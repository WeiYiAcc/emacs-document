#+TITLE: Emacs as a C++ IDE
#+URL: http://martinsosic.com/development/emacs/2017/12/09/emacs-cpp-ide.html
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 03月 22日 星期四 17:16:52 CST]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
[[http://martinsosic.com/images/emacs-loves-cpp.png]]
翻译:[![Emacs loves C++](http://martinsosic.com/images/emacs-loves-cpp.png)]

*TL;DR* -> take a look at the [[#summary][summary]].
翻译:"精简版"->查看[[#总结][总结]]部分。

I have been using Emacs for a few years for development in different languages, including C++.
翻译:我使用Emacs进行不同语言的开发已经有几年了，包括C++。
Since I was working mostly on smaller C++ projects and I heard how notoriously hard it is to setup Emacs as a C++ IDE, I never took time to fully set it up. That was working fine for me until I got my hands on a bigger C++ project and figured out I am really missing some of the more advanced features.
翻译:由于我主要在做一些较小的C++项目，而且听说配置Emacs作为C++IDE非常困难，所以我从未花时间去完全设置它。这对我来说一直运作得很好，直到我接触了一个更大的C++项目，并发现我真的很错过了其中一些更高级的功能。
I decided to give it a go and realized it is not as hard as I expected!
翻译:我决定试一试，发现其实并没有我想象中那么难！

Since it did take some time to try different setups and I feel like information about them is not accessible enough, I decided to share what I learned so others can have an easier start.
翻译:由于尝试不同的设置确实花费了一些时间，我觉得有关这些设置的信息并不够容易获取，所以我决定分享我所学到的东西，以便其他人可以更容易地开始。

Some of the main features that we can expect from C++ IDE:
翻译:我们期待从C++集成开发环境（IDE）中获得的主要特性如下：

- Navigation (jump from reference to definition and vice versa).
翻译:导航（从引用跳转到定义，反之亦然）。
- File outline (list of symbols in file for quick navigation).
翻译:文件概要（快速导航的文件符号列表）。
- Code completion.
翻译:代码补全。
- Real-time syntax checking.
翻译:实时语法检查。

While there are solutions for C that work quite well (e.g. CEDET), and some of them also work pretty well for C++, none of them fully support C++, since it is more complicated than C.
翻译:虽然有一些C语言的解决方案相当不错（例如CEDET），其中一些对于C++也相当有效，但它们都没有完全支持C++，因为C++比C更复杂。
Thanks to release of [[https://clang.llvm.org/doxygen/group__CINDEX.html][libclang]], which brought capabilities needed to create full support for C++, multiple tools/IDEs specialized for C++ were created. I am going to focus on two of them, Irony and RTags, which are among the most popular Emacs packages offering C++ IDE functionality.
翻译:感谢发布[[https://clang.llvm.org/doxygen/group__CINDEX.html][libclang]]，这使得创建对C++完全支持的能力成为可能。多个工具/IDE专门为C++而创建。我将重点介绍其中两个：Irony和RTags，它们是Emacs中最受欢迎的两个提供C++ IDE功能的包之一。

Also, since I work on Linux and usually use CMake with make or ninja as generators, that is what I am going to focus on in examples.
翻译:同样，由于我在Linux上工作，通常使用CMake与make或ninja作为生成器，因此我将在这个例子中专注于这个话题。
I found a lot of great advice and inspiration in [[https://tuhdo.github.io/c-ide.html][blog post by tuhdo]], so make sure to check it out for wider overview of available solutions!
翻译:我在[[https://tuhdo.github.io/c-ide.html][tuhdo的博客文章]]中找到了很多很好的建议和灵感，所以一定要去看看，以获得更广泛的解决方案概述！

* Company
:PROPERTIES:
:CUSTOM_ID: company
:END:

[[http://company-mode.github.io][Company]] is a code completion frontend, meaning it handles all the logic regarding code completion while typing except for actually coming up with completions.
翻译:公司是一个代码补全前端，意味着它处理了与在输入时进行代码补全相关的所有逻辑，而实际上提出补全则由其他部分完成。
So basically, Company does all the work with showing and handling completions, but it needs a brain (backend) to provide it with completions.
翻译:基本上，公司负责展示和处理完成项的所有工作，但它需要一个大脑（后端）来为其提供完成项。
It can use different sources (backends) of completions, including Irony and Rtags, which work really well for C++.
翻译:它可以使用不同的完成来源（后端），包括Irony和Rtags，这对C++来说工作得非常好。

My basic configuration looks like this (without Irony or RTags added as a backend yet):
翻译:我的基本配置看起来像这样（还没有添加Irony或RTags作为后端）：

#+BEGIN_EXAMPLE
(req-package company
:config
(progn
(add-hook 'after-init-hook 'global-company-mode)
(global-set-key (kbd "M-/") 'company-complete-common-or-cycle)
(setq company-idle-delay 0)))
#+END_EXAMPLE

* Flycheck
:PROPERTIES:
:CUSTOM_ID: flycheck
:END:

[[http://www.flycheck.org][Flycheck]] is package for Emacs that brings on-the-fly syntax checking.
翻译:[[http://www.flycheck.org][飞检]] 是一个为Emacs带来的即时语法检查包。
It already comes with support for a lot of languages and can also use other packages as backend.
翻译:它已经支持了很多种语言，也可以使用其他的包作为后端。
In our case, we are going to use it together with Irony or Rtags as backend.
翻译:在我们的案例中，我们将与Irony或Rtags一起使用它作为后端。

For me, this might just be the most important package of the ones listed here, as it helps you write code that will most likely compile in first try. I find it super useful, it saves me a lot of time.
翻译:对我来说，这可能是这里列出的最重要的包之一，因为它可以帮助您编写很可能一次就能编译通过的代码。我发现它非常有用，它为我节省了大量的时间。

My basic configuration looks like this (without Irony or RTags added as a backend yet):
翻译:我的基本配置看起来像这样（还没有添加Irony或RTags作为后端）：

#+BEGIN_EXAMPLE
(req-package flycheck
:config
(progn
(global-flycheck-mode)))
#+END_EXAMPLE

* Compilation database
:PROPERTIES:
:CUSTOM_ID: compilation-database
:END:

In order for both Irony and Rtags to work, we need to supply them with detailed information about our C++ project.
翻译:为了使Irony和Rtags都能正常工作，我们需要向它们提供有关我们的C++项目的详细信息。

This is done by providing [[http://clang.llvm.org/docs/JSONCompilationDatabase.html][compilation database]], which is a standard way to describe how your project is compiled.
翻译:这是通过提供[[http://clang.llvm.org/docs/JSONCompilationDatabase.html][编译数据库]]来完成的，它是一种描述项目如何编译的标准方式。
Compilation database is (usually) just a JSON file that contains compilation information for each translation unit and there are multiple ways to generate it.
翻译:编译数据库通常只是一个JSON文件，其中包含每个翻译单元的编译信息，并且有多种方法可以生成它。

If you are using Cmake to build your project, it is really easy to generate compilation database, since CMake has support for it.
翻译:如果您使用Cmake来构建您的项目，生成编译数据库非常简单，因为Cmake支持这一点。
You just provide CMake with correct flag (=cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ...=) and that is it! Later you can just call =cmake .= and it will update compilation database if needed.
翻译:您只需向CMake提供正确的标志（例如：`cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ...`），然后一切就绪！稍后，您可以简单地调用`= cmake `，如果需要的话，它将更新编译数据库。
This is what I used for my project, since it uses CMake.
翻译:这是我为项目所使用的，因为它使用了CMake。

In case tool that you are using to build your project does not have support for generation of compilation database, you can use [[https://github.com/rizsotto/Bear][bear]] tool, which records all calls to compiler by your build system and builds compilation database from it. It is easy to use and gives very good results.
翻译:如果您使用的项目构建工具不支持生成编译数据库，可以使用[[https://github.com/rizsotto/Bear][bear]]工具，它记录您的构建系统对编译器的所有调用，并从中构建编译数据库。该工具易于使用且效果非常好。

* Irony
:PROPERTIES:
:CUSTOM_ID: irony
:END:

[[https://github.com/Sarcasm/irony-mode][Irony mode]] brings IDE functionality to C, C++ and Objective-C.
翻译:铁人模式为C、C ++和Objective - C带来了IDE功能。
It consists of Emacs package (client) and Irony server (which runs on your machine and uses libclang).
翻译:它由Emacs包（客户端）和Irony服务器（运行在你的机器上并使用libclang）组成。
Features are: code completion, real-time syntax checking, live documentation.
翻译:特性包括：代码补全、实时语法检查和实时文档。

Irony is not hard to set up, just follow instructions from their documentation: you put configuration in your
翻译:讽刺并不难设置，只需按照他们的文档说明操作：您在配置文件中添加配置。
=init.el= file and that is it, it will automatically run =irony-server=.
翻译:初始化el文件后就是它了，它会自动运行=irony-server=。
Irony is going to find [[#compilation-database][compilation database]] on its own, as long as it is positioned in some logical place, so you only have to generate it and make sure it is up to date.
翻译:讽刺的是，Irony 将会自行找到编译数据库，只要它位于某个逻辑位置即可，因此你只需要生成它并确保它是最新的。

请注意，[[#compilation-database][compilation database]] 是一个链接，表示编译数据库的位置或引用。在翻译中，我将其保留为原样，以保持原文中的格式和含义。
In my case, since I have an out of source build, compilation database was in directory =build/= which is sibling of directory =source/=, and Irony had no problem picking it up.
翻译:在我的情况下，因为我有一个出站构建，编译数据库位于目录=build/中，该目录与目录=source/同级，因此Irony没有问题地找到了它。

What I really like about Irony is that even on big projects (10k files) it is still fast and does not consume noticable amount of resources.
翻译:我真正喜欢Irony的原因是，即使在大型项目中（1万个文件），它仍然非常快速，并且不会消耗可察觉的资源。

** Lacking support for header files
:PROPERTIES:
:CUSTOM_ID: lacking-support-for-header-files
:END:

Bad side when using Irony is that it does not know how to work with header files (.h, .hpp), because compilation database provides compilation information for source files but not for headers, meaning you get all the nifty features only for source files!
翻译:使用讽刺的坏处在于，它不知道如何处理头文件（.h、.hpp），因为编译数据库提供了源文件的编译信息，而不是头文件，这意味着你只能为源文件获得所有酷炫的功能！
This was a pretty big deal for me, and at the time of writing of this post author of Irony said he is actively working on solution for this, which is great.
翻译:这对我来说是个很大的问题，在撰写这篇文章的时候，《讽刺》一书的作者表示他正在积极寻找解决方案，这真是太好了。

Luckily, Irony has fallback options when compilation database is not enough or not available, so we can use those while waiting for solution.
翻译:幸运的是，当编译数据库不足或不可用时，讽刺有后备选项，因此我们可以在等待解决方案的同时使用它们。
In my case, I used =.clang_complete= file as a fallback option, which results with Irony using compilation database for source files and =.clang_complete= file for header files.
翻译:在我的情况下，我使用了=.clang_complete=文件作为后备选项，这导致Irony使用编译数据库为源文件和=.clang_complete=文件为头文件。

=.clang_complete= is a file with special format, originally used by a Vim plugin to provide code completion. It is simpler than compilation database since it can not provide specific compilation commands for each source file, instead it provides compilation flags for all files in the project. In most cases that is enough for Irony to work with your header files.
翻译:“=.clang_complete=” 是一个具有特殊格式的文件，最初被一个 Vim 插件用于提供代码补全功能。与编译数据库相比，“=.clang_complete=” 更简单，因为它不能为每个源文件提供特定的编译命令，而是为项目中所有文件提供编译标志。在大多数情况下，这足以让 Irony 与您的头文件协同工作。

** Code completion
:PROPERTIES:
:CUSTOM_ID: code-completion
:END:

Irony code completion works really well and fast, and can be provided as backend for different code completion frontends (Company, AC). I use it with Company.
翻译:讽刺代码补全功能非常好用且快速，可以作为不同代码补全前端（公司、AC）的后端支持。我与公司一起使用它。

** Real-time syntax checking
:PROPERTIES:
:CUSTOM_ID: real-time-syntax-checking
:END:

Irony integrates with Flycheck and works really well. Syntax checking is fast and on spot.
翻译:讽刺与Flycheck集成效果很好。语法检查快速且准确。

** Configuration
:PROPERTIES:
:CUSTOM_ID: configuration
:END:

Here is my configuration in =init.el=:
翻译:这里是我在 `~/.emacs.d/init.el` 中的配置：

#+BEGIN_EXAMPLE
(req-package irony
:config
(progn
;; If irony server was never installed, install it.
(unless (irony--find-server-executable) (call-interactively #'irony-install-server))

(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)

;; Use compilation database first, clang_complete as fallback.
(setq-default irony-cdb-compilation-databases '(irony-cdb-libclang
irony-cdb-clang-complete))

(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
))

;; I use irony with company to get code completion.
(req-package company-irony
:require company irony
:config
(progn
(eval-after-load 'company '(add-to-list 'company-backends 'company-irony))))

;; I use irony with flycheck to get real-time syntax checking.
(req-package flycheck-irony
:require flycheck irony
:config
(progn
(eval-after-load 'flycheck '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))))

;; Eldoc shows argument list of the function you are currently writing in the echo area.
(req-package irony-eldoc
:require eldoc irony
:config
(progn
(add-hook 'irony-mode-hook #'irony-eldoc)))
#+END_EXAMPLE

[[https://github.com/Andersbakken/rtags][RTags]] is indexer for C/C++ (and ObjC/ObjC++) that comes with integration for Emacs. Basically, what it does is it actually understands your C++ project and therefore offers all the functionality that C++ IDE needs.
翻译:[[https://github.com/Andersbakken/rtags][RTags]] 是一个为 C/C++（以及 ObjC/ObjC++）设计的索引器，它集成了 Emacs 的功能。基本上，它的作用是真正理解您的 C++ 项目，因此提供了 C++ 集成开发环境所需的所有功能。

As mentioned above, RTags indexes the whole projects and builds an index on the disk which it can query for information.
翻译:如上所述，RTags索引整个项目并在磁盘上建立一个索引，以便查询信息。
RTags consists of =rc= (client), =rdm= (daemon that does indexing) and Emacs =rtags= package that interacts with =rc=.
翻译:RTags 包括 =rc=（客户端）、=rdm=（执行索引的守护进程）和Emacs =rtags= 插件，该插件与 =rc= 交互。
=rdm= runs in the background, re-indexes files as needed (on change) and answers to queries from =rc=.
翻译:后台运行 =rdm= ，根据需要（在更改时）重新索引文件，并回答来自 =rc= 的查询。

** Features
:PROPERTIES:
:CUSTOM_ID: features
:END:

- Code completion (both source and header files).
翻译:代码补全（包括源文件和头文件）。
- Real-time syntax checking.
翻译:实时语法检查。
- Jump to definition.
翻译:跳转到定义。
- Find references.
翻译:查找参考资料
- ...

** Setup
:PROPERTIES:
:CUSTOM_ID: setup
:END:

=rdm= and =rc= can be installed through Emacs =rtags= package by running =rtags-install=, or manually.
翻译:"=rdm= 和 =rc= 可以通过运行 =rtags-install= 在 Emacs 的 =rtags= 软件包中安装，或者手动安装。"
Manual installation gives more control, and in that case it is best to configure it as systemd socket service.
翻译:手动安装可以提供更多控制，在这种情况下，最好将其配置为systemd套接字服务。

I like better manual installation, since in that case I can control number of processes that RTags uses.
翻译:我喜欢手动安装，因为这样我可以控制RTags使用的进程数量。
This is important because on larger projects reindexing takes a lot of CPU, so it makes sense to either go with smaller number of processes or turning automatic reindexing off.
翻译:这是因为在大项目中重新索引需要很多CPU资源，因此选择较少的过程数量或关闭自动重新索引是合理的。

We have to manually register each new project with RTags, which is done by running =rc -J <path_to_compile_commands.json>=.
翻译:我们必须手动使用RTags注册每个新项目，这通过运行命令=rc -J <path_to_compile_commands.json>=来完成。
If you installed RTags through emacs, =rc= is somewhere in its internal directory structure, so you have to find it to run this command. Also, make sure that =rdm= is running when doing that, and make sure it finishes indexing.
翻译:如果您通过emacs安装了RTags，则=rc=位于其内部目录结构中，因此您需要找到它来运行此命令。此外，在执行该操作时，请确保=rdm=正在运行，并确保完成索引。

RTags will make sure to automatically detect which project currently active buffer belongs to and tell rdm to switch to that project.
翻译:RTags 会自动检测当前活动缓冲区属于哪个项目，并通知 rdm 切换到那个项目。

** Configuration
:PROPERTIES:
:CUSTOM_ID: configuration-1
:END:

Below is my configuration for RTags:
翻译:以下是RTags的配置信息：

#+BEGIN_EXAMPLE
(req-package rtags
:config
(progn
(unless (rtags-executable-find "rc") (error "Binary rc is not installed!"))
(unless (rtags-executable-find "rdm") (error "Binary rdm is not installed!"))

(define-key c-mode-base-map (kbd "M-.") 'rtags-find-symbol-at-point)
(define-key c-mode-base-map (kbd "M-,") 'rtags-find-references-at-point)
(define-key c-mode-base-map (kbd "M-?") 'rtags-display-summary)
(rtags-enable-standard-keybindings)

(setq rtags-use-helm t)

;; Shutdown rdm when leaving emacs.
(add-hook 'kill-emacs-hook 'rtags-quit-rdm)
))

;; TODO: Has no coloring! How can I get coloring?
(req-package helm-rtags
:require helm rtags
:config
(progn
(setq rtags-display-result-backend 'helm)
))

;; Use rtags for auto-completion.
(req-package company-rtags
:require company rtags
:config
(progn
(setq rtags-autostart-diagnostics t)
(rtags-diagnostics)
(setq rtags-completions-enabled t)
(push 'company-rtags company-backends)
))

;; Live code checking.
(req-package flycheck-rtags
:require flycheck rtags
:config
(progn
;; ensure that we use only rtags checking
;; https://github.com/Andersbakken/rtags#optional-1
(defun setup-flycheck-rtags ()
(flycheck-select-checker 'rtags)
(setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
(setq-local flycheck-check-syntax-automatically nil)
(rtags-set-periodic-reparse-timeout 2.0) ;; Run flycheck 2 seconds after being idle.
)
(add-hook 'c-mode-hook #'setup-flycheck-rtags)
(add-hook 'c++-mode-hook #'setup-flycheck-rtags)
))
#+END_EXAMPLE

Compared to Irony, RTags is more powerful but it is also more heavyweight.
翻译:与Irony相比，RTags更加强大，但同时也更加沉重。
For example, RTags can jump to definitions, find references and do similar advanced stuff that Irony can't do, however Irony does not have to reindex big part of the project with each change which makes it much faster for big C++ projects.
翻译:例如，RTags可以跳转到定义、查找引用并执行Irony无法做到的类似高级功能，然而Irony不需要在每次更改后重新索引项目的大部分内容，这使得它在处理大型C++项目时要快得多。
Also, it is worth noting that RTags works correctly with header files out of the box, while Irony does not support that yet.
翻译:此外，值得一提的是，RTags 默认就可以正确处理头文件，而 Irony 目前还不支持这一点。

On smaller projects, I might go just with RTags, however on bigger projects (> 10k files) automatic reindexing becomes very resource demanding.
翻译:在较小的项目中，我可能会只使用RTags，但是在较大的项目（> 10k文件）中，自动重新索引会变得非常资源密集型。
What works well for me on bigger projects is using Irony for auto-complete and flycheck, since Irony works correct enough and is fast, while on the other hand I use RTags for more advanced features (jump to definition, find references, ...) and reindex manually from time to time.
翻译:在较大的项目中，我通常使用Irony进行自动补全和flycheck，因为Irony足够准确且速度快；另一方面，我使用RTags来获取更多高级功能（跳转到定义、查找引用等…），并且不时手动重新索引。

In this post I have shown my init.el configurations for both RTags and Irony, but I don't have all of it active at the same time.
翻译:在这篇文章中，我展示了我的init.el配置文件，用于同时启用RTags和Irony插件，但我并不会同时激活所有的设置。
I do have all of it in my init.el, but usually I (un)comment parts that I am (not)using currently, so for a very big project I might comment out company-rtags and flycheck-rtags configuration in favour of Irony.
翻译:我确实在我的init.el中拥有所有这些内容，但通常我会（取消）注释当前使用（或不使用）的部分，所以对于一个非常大的项目，我可能会为了Irony而取消注释公司-rtags和flycheck-rtags配置。

In the future, as both packages advance, I expect Irony will get more features while RTags will become faster and I will able to choose just one of them.
翻译:在将来，随着这两个包的发展，我预计Irony将会获得更多功能，而RTags将会变得更快，我将能够选择其中的一个使用。

* Projectile
:PROPERTIES:
:CUSTOM_ID: projectile
:END:

[[https://github.com/bbatsov/projectile][Projectile]] is a really nifty package, that “teaches” Emacs the concept of project.
翻译:"[[https://github.com/bbatsov/projectile][Projectile]] 是一个非常酷的包，它“教导”Emacs关于项目的概念。"

This means that when working on a certain source file, it will understand which project this file belongs to and offer some nice features based on that.
翻译:这意味着在处理某个特定源文件时，它能够理解该文件属于哪个项目，并据此提供一些不错的功能特性。

Projectile usually works out of the box, since it will detect your VCS (I use git) files automatically and figure out the project root from that.
翻译:通常情况下，Projectile 可以直接使用，因为它会自动检测您的 VCS（我使用的是 Git）文件，并从这些文件中确定项目根目录。
If your case is more complicated, you can just create empty =.projectile= file in the root directory of your project and Projectile will detect it.
翻译:如果你的情况更复杂，你只需在你的项目根目录中创建一个空的=.projectile=文件，然后Projectile就会检测到它。

Setting it up is as easy as:
翻译:安装过程非常简单：

#+BEGIN_EXAMPLE
(req-package projectile
:config
(progn
(projectile-global-mode)
))
#+END_EXAMPLE

Features I found most useful are jumping to a file/buffer in project and switching from source file to corresponding header file.
翻译:我发现最有用的功能是跳转到项目中的文件/缓冲区，以及从源文件切换到相应的头文件。

* Helm
:PROPERTIES:
:CUSTOM_ID: helm
:END:

[[https://emacs-helm.github.io/helm/][Helm]] is Emacs incremental completion and selection narrowing framework.
翻译:"Helm" 是 Emacs 的增量完成和选择缩小框架。
What that actually means is that if you use Helm, most of the searches/selections (finding file/buffer, browsing kill ring, executing command, ...) you do will have the same interface: Helm interface.
翻译:实际上这意味着如果你使用Helm，大多数搜索/选择（查找文件/缓冲区、浏览剪贴板、执行命令等）都将有相同的界面：Helm界面。
It also comes with some other useful features, and there are many integrations with other packages.
翻译:它还具备一些其他实用功能，并且与其他许多包有着丰富的集成。

Helm does not bring any C++ specific features, but since it is useful and adds to making Emacs a C++ IDE, I thought it is worth mentioning it.
翻译:helm并没有带来任何特定于C++的功能，但由于它很有用，并且有助于使Emacs成为一个C++集成开发环境（IDE），我认为提一下它是值得的。

My setup for it goes like this:
翻译:我的设置是这样的：

#+BEGIN_EXAMPLE
;; Helm makes searching for anything nicer.
;; It works on top of many other commands / packages and gives them nice, flexible UI.
(req-package helm
:config
(progn
(require 'helm-config)

;; Use C-c h instead of default C-x c, it makes more sense.
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))

(setq
;; move to end or beginning of source when reaching top or bottom of source.
helm-move-to-line-cycle-in-source t
;; search for library in `require' and `declare-function' sexp.
helm-ff-search-library-in-sexp t
;; scroll 8 lines other window using M-<next>/M-<prior>
helm-scroll-amount 8
helm-ff-file-name-history-use-recentf t
helm-echo-input-in-header-line t)

(global-set-key (kbd "M-x") 'helm-M-x)
(setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x

(global-set-key (kbd "C-x C-f") 'helm-find-files)

(global-set-key (kbd "M-y") 'helm-show-kill-ring)

(global-set-key (kbd "C-x b") 'helm-mini)
(setq helm-buffers-fuzzy-matching t
helm-recentf-fuzzy-match t)

;; TOOD: helm-semantic has not syntax coloring! How can I fix that?
(setq helm-semantic-fuzzy-match t
helm-imenu-fuzzy-match t)

;; Lists all occurences of a pattern in buffer.
(global-set-key (kbd "C-c h o") 'helm-occur)

(global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)

;; open helm buffer inside current window, not occupy whole other window
(setq helm-split-window-in-side-p t)
(setq helm-autoresize-max-height 50)
(setq helm-autoresize-min-height 30)
(helm-autoresize-mode 1)

(helm-mode 1)
))

;; Use Helm in Projectile.
(req-package helm-projectile
:require helm projectile
:config
(progn
(setq projectile-completion-system 'helm)
(helm-projectile-on)
))
#+END_EXAMPLE

As you can see from the comments, I have an issue with helm-semantic not doing syntax coloring, I haven't figured out yet how to fix that.
翻译:正如您从评论中所看到的，我遇到了helm-semantic无法进行语法高亮显示的问题，我还未能找出解决方法。

* Summary
:PROPERTIES:
:CUSTOM_ID: summary
:END:

With few packages, Emacs can become a full-fledged C++ IDE!
翻译:使用一些包，Emacs 可以成为一个完整的C++集成开发环境！

I use Company, Flycheck, Helm, Projectile and Irony and/or RTags. Most of these packages require pretty simple setup, Irony and RTags being the most demanding but still manageable with medium effort.
翻译:我使用Company、Flycheck、Helm、Projectile和Irony以及/或RTags。这些包中的大多数都需要相当简单的设置，其中Irony和RTags的需求最高，但仍然可以通过中等努力进行管理。

Irony and RTags are the “brain”, as they understand your C++ project (thanks to libclang) and provide code completion and other features.
翻译:讽刺的是，RTags是“大脑”，因为它们理解您的C++项目（得益于libclang），并提供代码补全和其他功能。
Although they are alternatives to each other and are not meant to be used together, I found that combination of the two is sometimes the best option since they have different strengths and weaknesses. In the future I hope to be able to use just one of them for projects of all types/sizes.
翻译:虽然它们是互相替代品，并不打算一起使用，但我发现有时候将两者结合是最好的选择，因为它们各自有不同的优点和缺点。我希望在未来能够为各种类型/规模的项目只使用其中之一。

I hope this post will give you a good idea of how to get more out of Emacs for C++ development!
翻译:我希望这篇帖子能给你一个很好的想法，让你知道如何更好地使用Emacs进行C++开发！
I am also sure there is a lot that can be improved over my setup, so please write your suggestions and I will do my best to try them out and update this post.
翻译:我也确信在我的设置上还有很多可以改进的地方，所以请写下您的建议，我会尽力尝试并更新这篇文章。
And again, big thanks to *tuhdo* for writing his [[https://tuhdo.github.io/c-ide.html][blog post]] that helped me a lot while setting up Emacs for C++ development, check it out.
翻译:再次感谢*tuhdo*撰写了[[https://tuhdo.github.io/c-ide.html][博客文章]]，它在我为C++开发设置Emacs时提供了很大帮助，去看看吧。
