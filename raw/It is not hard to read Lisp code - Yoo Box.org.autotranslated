#+TITLE: It is not hard to read Lisp code | Yoo Box
#+URL: https://yoo2080.wordpress.com/2014/07/04/it-is-not-hard-to-read-lisp-code/
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2020年 03月 02日 星期一 19:47:09 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

It is natural for someone who sees Lisp code for the first time to have the impression that Lisp might have poor readability. On the other hand, you know there are people who have been reading and writing Lisp code fine. With this post, I hope I can convince you that /you/ can read Lisp code with ease. The context of this post is that this post is a module of [[https://yoo2080.wordpress.com/2013/08/07/living-with-emacs-lisp/][Living with Emacs Lisp]] series, intended for beginning users of Emacs.
翻译:第一次看到Lisp代码的人可能会觉得Lisp的可读性很差这是很自然的。另一方面，你知道确实有很多人能够很好地阅读和编写Lisp代码。通过这篇文章，我希望我能说服你，你也可以轻松地阅读Lisp代码。本文的上下文是，本文是[[https://yoo2080.wordpress.com/2013/08/07/living-with-emacs-lisp/][与Emacs Lisp共存]]系列的一部分，旨在为初学者使用Emacs。

Most of this post is about how to read Lisp code in general, and then there is one section about how to read Emacs Lisp in particular.
翻译:这篇文章的大部分内容都是关于如何一般地阅读Lisp代码，然后有一个部分是专门关于如何阅读Emacs Lisp的。

** 1. Intro
:PROPERTIES:
:CUSTOM_ID: sec-1
:END:

*Alice:* “How can you read Lisp code written by others? How do you do that?”\
翻译:艾丽斯：“你怎么能读懂别人写的Lisp代码？你是怎么做到的？”
*Bob:* “You can see the nesting structure from how the code is indented. ”\
翻译:鲍勃说：“你可以通过代码缩进来观察嵌套结构。”
*Alice:* “Yes, I heard that Lisp programmers don't actually count parens (a.k.a parentheses) but still how do you read from indentation? ”\
翻译:“是的，我听说Lisp程序员实际上并不计算括号（即圆括号），但你们是如何通过缩进来读取代码的呢？”
*Bob:* “Look at it this way. To me, Lisp code looks like an expanded [[http://en.wikipedia.org/wiki/Tree_view][tree view]]. You look at the vertical alignment here and there to see the structure of the code. Give me some Lisp code and let's see.”\
翻译:鲍勃说：“换个角度看这个问题。对我来说，Lisp代码就像是一种展开的[树形视图](http://en.wikipedia.org/wiki/Tree_view)。你可以通过观察这里的垂直对齐来查看代码的结构。给我一些Lisp代码，我们来看看。”
*Alice:* “OK. Here is some Emacs Lisp code I got from someone long time ago. I'm going to indent this now.”^{[[#fn.1][1]]}
翻译:好的。这是很久以前从某人那里得到的Emacs Lisp代码。我现在要对其进行缩进。[1]

#+BEGIN_EXAMPLE
(when (eq system-type 'windows-nt)
(defvar my-gs-exe-list
(list "C:/Program Files/gs/gs9.14/bin/gswin32c.exe"
"c:/Program Files/gs/gs9.10/bin/GSWIN64C.EXE"
"C:/Program Files/gs/gs9.06/bin/GSWIN32C.EXE"))
(dolist (exe my-gs-exe-list)
(if (file-exists-p exe)
(setq preview-gs-command exe)))
;; (setq preview-image-type 'pnm)
)
#+END_EXAMPLE

*Bob:* “I don't use Emacs, but I'm curious, how do you indent in your text editor?”\
翻译:*鲍勃：*“我不使用Emacs，但出于好奇，你在你的文本编辑器中是如何缩进的？”
*Alice:* “In Emacs? I select the text and then I press =C-M-= (=indent-region=). Done. Discoverable through the menu interface too.”
翻译:*爱丽丝：*“在Emacs中？我选择文本然后按=C-M-=（=indent-region=）。这样就完成了。也可以通过菜单界面发现。”

#+BEGIN_EXAMPLE
(when (eq system-type 'windows-nt)
(defvar my-gs-exe-list
(list "C:/Program Files/gs/gs9.14/bin/gswin32c.exe"
"c:/Program Files/gs/gs9.10/bin/GSWIN64C.EXE"
"C:/Program Files/gs/gs9.06/bin/GSWIN32C.EXE"))
(dolist (exe my-gs-exe-list)
(if (file-exists-p exe)
(setq preview-gs-command exe)))
;; (setq preview-image-type 'pnm)
)
#+END_EXAMPLE

*Bob:* “There you see. You can see the nested structure now. Do you see it?”
翻译:*鲍勃说：*“你看，现在你可以看到嵌套的结构了。你看到了吗？”

** 2. Tree view
:PROPERTIES:
:CUSTOM_ID: sec-2
:END:

Let's take an example from the Wikipedia article on [[http://en.wikipedia.org/wiki/Tree_view][tree view]]:
翻译:让我们以维基百科上关于[[树视图](http://en.wikipedia.org/wiki/Tree_view)]的文章为例：

- Smiles
翻译:- 微笑

- Happy
翻译:快乐
- Sad
翻译:悲伤
- Neither
翻译:既不

- Vehicles
翻译:车辆

- Parts
翻译:部分

- Wheel
翻译:轮子

- Whole
翻译:整个

- Truck
翻译:卡车
- Car
翻译:汽车

You can see the nesting structure from how much each item is indented. Same is true with Lisp code:
翻译:从每个项目缩进的多少可以看出嵌套结构。Lisp代码也是如此：

#+BEGIN_EXAMPLE
(smiles
happy
sad
neither)
(vehicles
(parts
wheel)
(whole
truck
car))
#+END_EXAMPLE

Notice how the lines =(smiles= and =(vehicles= have zero indent (hence the same level: the top level), and how the three lines =happy=, =sad=, =neither)= share the same one level deep indent.
翻译:注意看=(微笑=和=(车辆=这两行没有缩进(因此处于同一级别：顶级)，以及=(开心=、=(伤心=和=(既不高兴也不伤心)=这三行共享相同的二级缩进。

** 3. Terminology
:PROPERTIES:
:CUSTOM_ID: sec-3
:END:

Before moving on to more examples, let's establish some terminology.
翻译:在继续更多示例之前，让我们先确立一些术语。

I'll assume you are familiar with the term “statement” and “expression” in other programming languages. Recall that expressions can contain other expressions in them. In some languages, statements always return some value, making the distinction between statements and expressions void. Lisp is one of such, and when you see something in Lisp code and you think “this looks like a block” or “this looks like a statement”, you can actually simply assume that what you are seeing is just an *expression* (playing the role of “block” or “statement” in some sense of course). Put simple, expressions everywhere. They are often specifically called *symbolic expressions* in Lisp speak, and they are also called *s-expressions*, or just *expressions*, for short. Sometimes they are called *s-exps* or *sexps*, for even shorter.
翻译:我将假设你已经熟悉了其他编程语言中的“语句”（statement）和“表达式”（expression）这两个术语。回想一下，表达式可以包含其他表达式。在一些语言中，语句总是返回某个值，使得语句和表达式的区别变得毫无意义。Lisp就是其中之一，当你看到Lisp代码中的某些东西，你认为“这看起来像一个块”或“这看起来像一个语句”，实际上你可以简单地认为你所看到的只是一个*表达式*（在某种意义上扮演“块”或“语句”的角色）。简单来说，到处都是表达式。在Lisp的说法中，它们通常被称为*符号表达式*（symbolic expressions），也称为*s-表达式*（s-expressions），简称*表达式*。有时它们被称为*s-exp*或*sexps*，更短。

For example, let's take a look at this code again:
翻译:例如，我们再次看看这段代码：

#+BEGIN_EXAMPLE
(when (eq system-type 'windows-nt)
(defvar my-gs-exe-list
(list "C:/Program Files/gs/gs9.14/bin/gswin32c.exe"
"c:/Program Files/gs/gs9.10/bin/GSWIN64C.EXE"
"C:/Program Files/gs/gs9.06/bin/GSWIN32C.EXE"))
(dolist (exe my-gs-exe-list)
(if (file-exists-p exe)
(setq preview-gs-command exe)))
;; (setq preview-image-type 'pnm)
)
#+END_EXAMPLE

That code contains lots of expressions. That entire code can be considered one big expression =(when ....)=, which we usually call a =when= form. The first line contains some short expression, namely, =(eq system-type 'windows-nt)=. We say that this expression is an =eq= form.
翻译:这段代码包含了大量的表达式。整个代码可以看作是一个巨大的表达式（=当...=），我们通常称之为=当=形式。第一行包含了一些简短的表达式，即=(eq system-type 'windows-nt)=。我们说这个表达式是一个=eq=形式。

The lines 2 to 5 contain an expression which is a =defvar= form. The lines 3 to 5 contains an expression which is a =list= form.
翻译:第2至5行包含一个=a=defvar=形式的表达式。第3至5行包含一个=a=list=形式的表达式。

Also, =when= itself is an expression. You can actually verify that because when you enter =when= alone to the Lisp interpreter, it won't say “Syntax error! That's not a valid expression!” (but it will say something like “you did not define that variable!”.)
翻译:此外，“when”本身就是一个表达式。你可以验证这一点，因为当你单独输入“when”到Lisp解释器中时，它不会说“语法错误！这不是一个有效的表达式！”（但它会说类似“你没有定义那个变量！”的话。）

You can check that the following is an expression too:
翻译:你可以检查以下也是一个表达式：

#+BEGIN_EXAMPLE
'windows-nt
#+END_EXAMPLE

which contains the following smaller expression
翻译:包含以下较小表达式

#+BEGIN_EXAMPLE
windows-nt
#+END_EXAMPLE

The following is an expression too.
翻译:接下来的也是一个表达式。

#+BEGIN_EXAMPLE
"C:/Program Files/gs/gs9.14/bin/gswin32c.exe"
#+END_EXAMPLE

This is not an expression:
翻译:这不是一个表达式

#+BEGIN_EXAMPLE
"C:/Program
#+END_EXAMPLE

Neither this:
翻译:既不是这个：

#+BEGIN_EXAMPLE
(+ 1 1
#+END_EXAMPLE

Nor this:
翻译:这不是这个：

#+BEGIN_EXAMPLE
(+ 1 1))
#+END_EXAMPLE

But it does contain an expression, namely:
翻译:但这确实包含了一个表达式，具体为：

#+BEGIN_EXAMPLE
(+ 1 1)
#+END_EXAMPLE

which in turn contains smaller expressions like
翻译:这反过来又包含更小的表达式，如

#+BEGIN_EXAMPLE
+
#+END_EXAMPLE

and
翻译:和

#+BEGIN_EXAMPLE
1
#+END_EXAMPLE

So we learned:
翻译:所以我们了解到：

- what (symbolic) expressions are
翻译:符号表达式是什么？
- usage of the phrase “blah form”
翻译:"使用“ blah 形式”短语
- how to check if some part of code is an expression, when not sure
翻译:如何检查代码中的某些部分是否为表达式

.

*** 3.1. Emacs Lisp note
:PROPERTIES:
:CUSTOM_ID: sec-3-1
:END:

If you an Emacs user and want to know whether something in Emacs Lisp code is an expression, you enter that something into the buffer created by:
翻译:如果您是Emacs用户，并想知道在Emacs Lisp代码中某处是否为表达式，您可以将其输入到由以下命令创建的缓冲区中：

#+BEGIN_EXAMPLE
M-x ielm
#+END_EXAMPLE

Try entering each of the non-examples in this section and see what happens.
翻译:尝试逐个输入本节中的每个反例，看看会发生什么。

*** 3.2. Common Lisp note
:PROPERTIES:
:CUSTOM_ID: sec-3-2
:END:

If you are an Emacs user and want to access the Common Lisp interpreter via Emacs, you might want to look into any of the SLIME starting guides or [[https://yoo2080.wordpress.com/2013/08/18/how-to-install-common-lisp-and-slime-on-ms-windows/][this guide in particular]].
翻译:如果您是Emacs用户并且想通过Emacs访问Common Lisp解释器，您可能想要查看任何SLIME入门指南或[[https://yoo2080.wordpress.com/2013/08/18/how-to-install-common-lisp-and-slime-on-ms-windows/][这篇指南]]。

If you are using other editors, you probably can get help from that editor's community.
翻译:如果您在其他编辑器中使用，您可能可以从该编辑器的社区中获得帮助。

Recall that the interpreter can be accessed from command line even before you set up integration with your editor.
翻译:记住，即使在您没有设置与编辑器集成之前，也可以从命令行访问解释器。

** 4. Variations
:PROPERTIES:
:CUSTOM_ID: sec-4
:END:

Sometimes this code (two big expressions):
翻译:有时这段代码（两个大表达式）：

#+BEGIN_EXAMPLE
(smiles
happy
sad
neither)
(vehicles
(parts
wheel)
(whole
truck
car))
#+END_EXAMPLE

is alternatively written as:
翻译:"也可以写作："。

#+BEGIN_EXAMPLE
(smiles happy
sad
neither)
(vehicles (parts wheel)
(whole truck
car))
#+END_EXAMPLE

That way is more vertically squeezed, and horizontally spread out. You'll also encounter code that is differently squeezed like:
翻译:这种方式在垂直方向上更为紧凑，而在水平方向上则更加分散。你还会遇到像这样在不同程度上被挤压的代码：

#+BEGIN_EXAMPLE
(smiles happy sad neither)
(vehicles
(parts wheel)
(whole truck car))
#+END_EXAMPLE

So I have shown three different styles. The issue of which style to use in which case is a matter I will not go into, For now, just notice that each style is readable to you. In each of the three cases, you can see the nesting structure easily from indentation alone.
翻译:所以我展示了三种不同的样式。在哪种情况下使用哪种样式的问题不是我将会涉及的话题，现在，只需注意到每种样式对你来说都是可读的。在这三种情况中，你都可以仅通过缩进来轻松看到嵌套结构。

** 5. How to find where the expression ends.
:PROPERTIES:
:CUSTOM_ID: sec-5
:END:

Some code taken from the =dash.el= library:
翻译:从 `dash.el` 库中提取的一些代码：

#+BEGIN_EXAMPLE
(defmacro --split-with (pred list)
"Anaphoric form of `-split-with'."
(declare (debug (form form)))
(let ((l (make-symbol "list")) ;; <-- the outermost let form starts here
(r (make-symbol "result"))
(c (make-symbol "continue")))
`(let ((,l ,list)
(,r nil)
(,c t))
(while (and ,l ,c)
(let ((it (car ,l))) ;; <-- the innermost let form starts here
(if (not ,pred)
(setq ,c nil)
(!cons it ,r)
(!cdr ,l))))
(list (nreverse ,r) ,l))))

(defun -split-with (pred list)
"Returns a list of ((-take-while PRED LIST) (-drop-while PRED LIST)), in no more than one pass through the list."
(--split-with (funcall pred it) list))
#+END_EXAMPLE

Quiz: That code has three =let= forms in it. The third =let= form (the innermost one) spans how many lines?
翻译:测验：那段代码中有三个=let=形式。第三个=let=形式（最内层的那个）跨越了多少行？

The answer is? There is a way to figure that out. The four lines following the beginning line of the let form are indented deeper than the beginning line, so you conclude that these four lines belong to the let form. So we conclude that the let form occupies 5 lines (including the beginning line).
翻译:答案是？有一种方法可以找出答案。紧跟在let形式开始行之后的四行比开始行缩进得更深，因此您得出结论，这四行属于let形式。所以我们得出结论，let形式占用了5行（包括开始行）。

Now, how many lines does the /first/ let form (the outermost one) occupy?
翻译:现在，最外层的“first”让形式（行）占用了多少行？

In general, the algorithm to figure that out is like this:
翻译:一般来说，确定这个算法是这样的：

1. Set D to the indent depth of the beginning line (of the form you are interested)
翻译:将D设置为所感兴趣行的起始缩进深度（的形式）。
2. Start with the beginning line. Paint this line red.
翻译:从第一行开始。将这一行涂成红色。
3. Go to the next non-blank line. (If none, exit the algorithm)
翻译:转到下一个非空白行。（如果没有，退出算法）
4. If the indent depth of the current line is bigger than D, paint this line red and go to Step 3. If not, exit the algorithm.
翻译:如果当前行的缩进深度大于D，则将该行涂成红色并返回步骤3。否则，退出算法。

Lines that are painted red by this algorithm are the lines that the form occupies.
翻译:这个算法涂成红色的线条是表单占用的线条。

Run this algorithm to conclude that the first let form occupies 13 lines (excluding blank lines).
翻译:运行此算法得出结论，第一个let形式占据了13行（不包括空白行）。

Actually, this algorithm is buggy because of two corner cases. I'll demonstrate both with another part of code from dash.el:
翻译:实际上，这个算法因为两个特殊情况而存在错误。我将用dash.el中的另一段代码来演示这两个情况：

#+BEGIN_EXAMPLE
(defun dash--table-carry (lists restore-lists &optional re)
"Helper for `-table' and `-table-flat'.

If a list overflows, carry to the right and reset the list.

Return how many lists were re-seted."
(while (and (not (car lists))
(not (equal lists '(nil))))
(setcar lists (car restore-lists))
(pop (cadr lists))
(!cdr lists)
(!cdr restore-lists)
(when re
(push (nreverse (car re)) (cadr re))
(setcar re nil)
(!cdr re))))
#+END_EXAMPLE

That is a defun form and defines the function =dash--table-carry=. The algorithm would give you the wrong conclusion that the defun form spans just two lines. Just below the first line, there's the docstring consisting of 5 lines, including blank lines. This docstring is part of the defun form. I'm sure you can figure out how to modify the algorithm to take care of this corner case.
翻译:这是一个defun形式，定义了函数=dash-table-carry=。算法会得出错误的结论，认为defun形式只跨越了两行。在第一行下面，有由5行组成的docstring，包括空行。这个docstring是defun形式的一部分。我相信你可以找出如何修改算法来处理这种特殊情况。

This =defun= form contains an =and= form. The =and= form occupies only two lines, but the algorithm would tell you otherwise (notice that the =and= form starts in the middle of the beginning line). You can figure out how to modify the algorithm to take care of this corner case as well.
翻译:这个函数形式包含了一个和（and）形式。和（and）形式只占据了2行，但是算法会告诉你不是这样的（注意到和（and）形式开始于第一行的中间）。你可以找出如何修改算法来处理这种情况。

** 6. Some difference from Python
:PROPERTIES:
:CUSTOM_ID: sec-6
:END:

There is some slight difference in the way Lisp code is indented and the way other languages code is indented. I will demonstrate with comparison to Python.
翻译:Lisp代码的缩进与其他语言的代码缩进有一些细微的区别。我将通过对比Python来进行演示。

The following Python code is taken from Python documentation:
翻译:以下Python代码摘自Python文档：

#+BEGIN_EXAMPLE
if x < 0:
x = 0
print('Negative changed to zero')
elif x == 0:
print('Zero')
elif x == 1:
print('Single')
else:
print('More')
#+END_EXAMPLE

The keyword =elif= is short for “else if” and now you see what that code is doing. Notice that the lines containing the keyword =elif= or =else= are indented to the same level as the line containing the =if= keyword, namely, zero level.
翻译:“elif”是“else if”的缩写，现在你可以看到这段代码在做什么了。请注意，包含“elif”或“else”的关键字的行与包含“if”关键字的行的缩进级别相同，即零级。

The equivalent Lisp code is this:
翻译:对应的Lisp代码如下：

#+BEGIN_EXAMPLE
(cond ((< x 0)
(setq x 0)
(print "Negative changed to zero."))
((= x 0)
(print "Zero."))
((= x 1)
(print "Single"))
(t
(print "More")))
#+END_EXAMPLE

Notice that the lines =((= x 0)= and =((= x 1)= (these are lines that start the =elif= clauses) and the line =(t= are /not/ indented to the same level as the beginning line of the =cond= form. This somewhat contrasts with Python. But then notice that those lines nevertheless are indented to the same level as the =((< x 0)= part.
翻译:请注意，以下行不是缩进的：=(= x 0)= 和 =((= x 1)=（这些是= elif=子句开始的行）以及 =(t=。这与Python有些不同。但是请注意，尽管如此，这些行仍然与= ((< x 0)=部分具有相同的缩进级别。

Anyway, run our (modified) algorithm to that Lisp code to verify the following questions and answers:
翻译:无论如何，运行我们的（修改后的）算法来验证以下问题和答案：

- How many lines does the =cond= form occupy? All the lines.
翻译:“=cond= 形式占用了多少行？所有行。”
- How many lines is the first =elif= clause in our Lisp code? Two lines.
翻译:我们的Lisp代码中的第一个`=elif=`子句有多少行？两行。
- How many lines is the =if= clause? Three lines.
翻译:如果子句中有多少行？三行。

That was a very simple =cond= form, so you don't really feel the algorithm running in your head, because you can see structure almost instantly in this case. But when you encounter a much more complicated =cond= form, that is when you find yourself running the algorithm.
翻译:这是一个非常简单的条件句式，所以你几乎感觉不到算法在你的脑海中运行，因为在这种情况下你可以立即看到结构。但是当你遇到一个更复杂的条件句式时，那就是你需要运行算法的时候了。

Back to Python. Suppose you are reading some Python code that contains some =if..elif..else..= which in turn contains another =if..elif..else..=, in other words, you are reading nested conditional statements. Suppose then that you see an =else= clause. How do you figure out whether this =else= clause belongs to the outer conditional or the inner conditional? You can figure that out by looking at how much the =else= keyword is indented and see whether it is indented to the same level as the =if= keyword in the outer conditional or as that in the inner conditional.
翻译:回到Python。假设您正在阅读一些包含嵌套条件语句的Python代码，也就是说，您正在阅读嵌套的条件语句。那么，如果您看到一个`else`子句，您如何判断这个`else`子句是属于外层条件还是内层条件呢？您可以通过观察`else`关键字缩进的层级来确定这一点：看看它是否与外层条件的`if`关键字具有相同的缩进级别，或者与内层条件的`if`关键字具有相同的缩进级别。

回到Python。假设您正在阅读一段包含嵌套 `if... elif... else...` 条件的代码，换句话说，您正在处理嵌套的条件语句。然后，假设您看到了一个 `else` 子句。要确定这个 `else` 子句属于外层条件还是内层条件，您可以观察 `else` 关键字相对于外部条件中的 `if` 关键字的缩进程度。如果 `else` 与最外层的 `if` 具有相同的缩进级别，则它属于外层条件；如果它与内部 `if` 具有相同的缩进级别，则它属于内层条件。

On the other hand, when you have a cond form within a cond form and you see an =else= clause, how do you figure out whether it belongs to the outer cond form or the inner cond form? You already know how to figure out the lines occupied by the inner cond form.
翻译:另一方面，当你在一个条件形式内部又有一个条件形式，并且看到一个=else=子句时，你怎么判断它属于外层还是内层条件形式呢？你已经知道如何找出内层条件形式所占用的行数了。

Speaking of =else= clauses, I like how Python allows =else= clauses even for =for= loops, such as in the following code (also taken from the documentation):
翻译:说到 else 子句，我喜欢 Python 即使对于 for 循环也允许使用 else 子句，如下面的代码所示（同样取自文档）：

#+BEGIN_EXAMPLE
for n in range(2, 10):
for x in range(2, n):
if n % x == 0:
print(n, 'equals', x, '*', n//x)
break
else:
# loop fell through without finding a factor
print(n, 'is a prime number')
#+END_EXAMPLE

output:
翻译:".

#+BEGIN_EXAMPLE
2 is a prime number
3 is a prime number
4 equals 2 0_sync_master.sh 1_add_new_article_manual.sh 1_add_new_article_newspaper.sh 2_start_translating.sh 3_continue_the_work.sh 4_finish.sh 5_pause.sh auto_translate.sh base.sh parse_url_by_manual.sh parse_url_by_newspaper.py parse_url_by_newspaper.sh project.cfg reformat.sh texput.log urls_checker.sh youdao.sh 2
5 is a prime number
6 equals 2 0_sync_master.sh 1_add_new_article_manual.sh 1_add_new_article_newspaper.sh 2_start_translating.sh 3_continue_the_work.sh 4_finish.sh 5_pause.sh auto_translate.sh base.sh parse_url_by_manual.sh parse_url_by_newspaper.py parse_url_by_newspaper.sh project.cfg reformat.sh texput.log urls_checker.sh youdao.sh 3
7 is a prime number
8 equals 2 0_sync_master.sh 1_add_new_article_manual.sh 1_add_new_article_newspaper.sh 2_start_translating.sh 3_continue_the_work.sh 4_finish.sh 5_pause.sh auto_translate.sh base.sh parse_url_by_manual.sh parse_url_by_newspaper.py parse_url_by_newspaper.sh project.cfg reformat.sh texput.log urls_checker.sh youdao.sh 4
9 equals 3 0_sync_master.sh 1_add_new_article_manual.sh 1_add_new_article_newspaper.sh 2_start_translating.sh 3_continue_the_work.sh 4_finish.sh 5_pause.sh auto_translate.sh base.sh parse_url_by_manual.sh parse_url_by_newspaper.py parse_url_by_newspaper.sh project.cfg reformat.sh texput.log urls_checker.sh youdao.sh 3
#+END_EXAMPLE

I like how the inner loop (and its else clause) captures the logic of “*If* 2 is a factor of n, do this, *elif* 3 is a factor of n, do this, *elif* 4 is a factor of n, do this, ...., *else* do that.” (To see an equivalent Lisp code, see Appendix).
翻译:我喜欢内循环（及其else子句）捕捉到了“如果”2是n的一个因数，就执行这个操作，“否则”3是n的一个因数，就执行这个操作，“否则”4是n的一个因数，就执行这个操作，……，“否则”就执行那个操作的逻辑。（要看到一个等效的Lisp代码，请参阅附录）。

** 7. Tools
:PROPERTIES:
:CUSTOM_ID: sec-7
:END:

Any editor good enough for Lisp is bound to provide features or tools for
翻译:任何足够好的Lisp编辑器都必定会提供功能或工具以

- highlighting matching parentheses, and
翻译:突出匹配的括号。
- sexp-based movement commands
翻译:基于性表达式（sexp）的运动命令

Those features will help you read Lisp code too.
翻译:这些特性也将帮助您阅读Lisp代码。

** 8. Logical operators being used for conditional statements roles
:PROPERTIES:
:CUSTOM_ID: sec-8
:END:

Sometimes you see C code which uses logical operators in place of conditional statements. This also happens in Lisp. Reading such code can seem hard at first, but did you know that this happens even in English?
翻译:有时候你会看到使用逻辑运算符代替条件语句的C代码。这种情况在Lisp中也会发生。一开始阅读这样的代码可能会觉得有些困难，但是你知道吗，即使在英语中也会有这样的情况发生。

“Eat that forbidden fruit *and* you will be screwed.”
翻译:吃那禁果，你就会倒霉。

There it is, the logical AND operator! You probably know that that is just another way of saying this conditional statement: “*If* you eat that fruit, you will be screwed.”
翻译:那里就是逻辑与运算符！你可能知道这仅仅是另一种表达这个条件语句的方式：“如果你吃了那个水果，你就会完蛋。”

This code is taken from the definition of the Emacs Lisp function =browse-url-of-buffer=:
翻译:这段代码取自Emacs Lisp函数`=browse-url-of-buffer:`的定义。

#+BEGIN_EXAMPLE
(and buffer (set-buffer buffer))
#+END_EXAMPLE

That is an =and= form and the meaning of that code is simple: *if* buffer, then do =(set-buffer buffer)=. That is:
翻译:这是一个“与”形式，该代码的含义很简单：“如果”缓冲区，则执行（设置缓冲区缓冲区）。也就是说：

#+BEGIN_EXAMPLE
(if buffer
(set-buffer buffer))
#+END_EXAMPLE

This is a long campaign slogan: “If you vote for our party, we'll make square mouse holes. If you don't, life will be tough.”
翻译:如果您投我们的票，我们将把鼠标洞修成正方形。如果不投，生活将会很艰难。

The campaign staff decides to shorten the slogan using logical operators: “Vote for us *and* we'll make square mouse holes. *Or* life will be tough.” The shortened slogan is still readable. You will be able to read shortened conditional statements in Lisp code too.
翻译:活动工作人员决定使用逻辑运算符来缩短口号：“投票给我们并且我们会把鼠标洞弄成正方形。“或者”生活会变得艰难。”缩短后的口号仍然可以阅读。你也能在Lisp代码中读到缩写的条件语句。

** 9. Prefix arithmetic
:PROPERTIES:
:CUSTOM_ID: sec-9
:END:

Here is the C exrpession for “one plus two”:
翻译:```c
#include <stdio.h>

int main() {
    int one = 1;
    int two = 2;
    int sum = one + two;

    printf("The sum of one and two is: %d\n", sum);

    return 0;
}
```

#+BEGIN_EXAMPLE
1 + 2
#+END_EXAMPLE

Here is the Lisp expression for “one plus two” (maybe more natural to read the following as “sum of one and two”):
翻译:这是一个表示“一加二”（或许更自然的读法是“一与二的和”）的Lisp表达式：

#+BEGIN_EXAMPLE
(+ 1 2)
#+END_EXAMPLE

It is definitely true that infix arithmetics (in C, Python, ...) reads better than prefix arithmetics (in Lisp), when you have a very complicated math formula, deeply nested. Fortunately, encountering a complicated math expression in code is a rare occurrence, more so for beginners.
翻译:后缀算术（在C、Python等中）比前缀算术（在Lisp中）读起来更好，当你有一个非常复杂的数学公式，深度嵌套时。幸运的是，在代码中遇到一个复杂的数学表达式是很少见的，对于初学者来说更是如此。

Here is some complicated (at least to beginners) example taken from the =color.el= library:
翻译:这是来自=color.el=库的一个复杂（至少对初学者来说是这样）的示例：

#+BEGIN_EXAMPLE
(sqrt (+ (expt (/ ΔL′ (* Sl kL)) 2.0)
(expt (/ ΔC′ (* Sc kC)) 2.0)
(expt (/ ΔH′ (* Sh kH)) 2.0)
(* Rt (/ ΔC′ (* Sc kC)) (/ ΔH′ (* Sh kH)))))
#+END_EXAMPLE

That is a kind of expression you won't encounter often. Arithmetics you do encounter often in code is mostly just:
翻译:这是一个你不会经常遇到的表情符号。你在代码中遇到的算术运算大部分只是：

- increasing the loop counter, or
翻译:增加循环计数器，或者
- adding up lengths of things
翻译:计算物体的长度

and they are simple and you will get used to them.
翻译:它们很简单，你会习惯它们的。

** 10. How to find arguments of a form
:PROPERTIES:
:CUSTOM_ID: sec-10
:END:

Simple case first. We have a lalala form and it has three arguments:
翻译:简单情况首先。我们有一个lalala表单，它有三个参数：

#+BEGIN_EXAMPLE
(lalala mamama
papapapa
nanana)
#+END_EXAMPLE

Notice that mamama, papapapa, nanana are aligned along to the left.
翻译:请注意，mamama、papapapa 和 nanana 沿着左侧对齐。

Another lalala form:
翻译:另一个啦啦啦形式：

#+BEGIN_EXAMPLE
(lalala mamama
(if foo
aaa
bbb)
nanana)
#+END_EXAMPLE

It has three arguments but this time the second argument is an if form. Notice that the three arguments are still aligned along to the left in some sense, that is, the following three are on the same column:
翻译:它有三个参数，但这次第二个参数是一个if形式。请注意，三个参数在某种程度上仍然对齐到左边，也就是说，下面的三个是在同一列上：

- the first letter of mamama
翻译:妈妈咪呀
- the first letter of the if form
翻译:如果语句的第一个字母是 I
- the first letter of nanana
翻译:"nanana" 的第一个字母是 "n"。

That observation is usually how you can spot the starting positions of arguments of some very long multi-line form (longer than our example.).
翻译:通常情况下，您可以通过这种方式找到一些非常长的多行形式（比我们的例子更长）的参数的开始位置。）

Let's see some variations. For example:
翻译:让我们看看一些变化。例如：

#+BEGIN_EXAMPLE
(lalala mamama1 mamama2
a b c d e
(if foo
aaa
bbb)
nanana1 nanana2)
#+END_EXAMPLE

That lalala form has these arguments: mamama1, mamama2, a, b, c, d, e, and then an if form, and then nanana1 and nanana2. Still nicely aligned. Readable.
翻译:那个lalala表单有这些参数：mamama1、mamama2、a、b、c、d、e，然后是一个if表单，接着是nanana1和nanana2。仍然对齐得很好。容易阅读。

What about that if form? Is that aligned good?
翻译:那个表格怎么样？对齐好吗？

A simple if form:
翻译:一个简单的如果表单：

#+BEGIN_EXAMPLE
(if (bed-net-exists-p)
(use-bed-net)
(bring-a-fan)
(turn-on-the-fan))
#+END_EXAMPLE

(Mosquitoes are in your room and you want to sleep. The code says “If there is a bed net, use it, else, bring a fan and turn on the fan (with wind blowing toward you. It's a trick to make sure that little vampire helicopters can't land on you)”)
翻译:蚊子在你的房间里，你想睡觉。代码说：“如果有蚊帐，就用它；否则，拿一个风扇并打开风扇（让风吹向你）。这是一个防止小吸血直升机降落在你身上的技巧。”

The reason why the else clause (two lines) is indented less than the then clause (that is, =(use-bed-net)=), at least for Emacs Lisp code, is that it's good to be able to visually distinguish the else clause and the then clause. The text editor usually remembers this by saying “The first two arguments of an if form shall be treated special (specially indented) and unlike the rest of the arguments”. The first two arguments of our if form are =(bed-net-exists-p)= and =(use-bed-net)=.
翻译:else子句（两行）缩进少于then子句（即=(使用蚊帐)=），至少对于Emacs Lisp代码来说，这样做的好处是可以从视觉上区分else子句和then子句。文本编辑器通常会记住这一点，说“if表的前两个参数应当被特殊对待（特别缩进）并且与其它参数不同”。我们的if表的前两个参数是=(床网存在吗)=和=(使用蚊帐)=。

The =let= forms are like this too. The text editor will treat the first argument of a let form specially. This let form:
翻译:"让" 形式也这样。文本编辑器会将 let 形式的第一个参数特别对待。这个 let 形式：

#+BEGIN_EXAMPLE
(let ((a 1) (b 1))
(message "hello")
(message "%d" (+ a b)))
#+END_EXAMPLE

can be alternatively written as:
翻译:你可以写成：

#+BEGIN_EXAMPLE
(let
((a 1) (b 1))
(message "hello")
(message "%d" (+ a b)))
#+END_EXAMPLE

Notice how the first argument (in the alternatively written one) is indented deeper than the rest of the arguments (two arguments).
翻译:请注意第一个参数（在另一种写法中）比其余参数（两个参数）缩进得更深。

If this were written using more lines like this:
翻译:如果这像这样使用更多的行：

#+BEGIN_EXAMPLE
(let
((a 1)
(b 1))
(message
"hello")
(message "%d"
(+ a b)))
#+END_EXAMPLE

you can still spot the starting positions of the three arguments. You see the distinguished argument (the first argument) with its starting position being deep, and then you see the two non-distinguished arguments with their starting positions vertically aligned nevertheless. This observation will help you spot the arguments in more complicated let forms.
翻译:你仍然可以找到三个参数的起始位置。您看到具有起始位置为深的区别参数（第一个参数），然后您看到两个非区分参数与它们的起始位置垂直对齐。这个观察将帮助您在更复杂的let形式中找到参数。

If you are curious, in general with other forms, there are just two cases:
翻译:如果您好奇的话，一般来说，在其他形式中只有两种情况：

- It has no distinguished arguments and all arguments are aligned to the same level (if they are all on different lines), or
翻译:它没有明显的参数区别，并且所有参数都调整到同一级别（如果它们都在不同的行上），或者
- The first N arguments are distinguished and they are aligned to a common level, say D1, and the rest of the arguments are aligned to a separate common level, say D2, and D1 is deeper than D2.
翻译:前N个参数是有区别的，并且被对齐到同一个级别，即D1，其余的参数则被对齐到另一个单独的常见级别，即D2，其中D1比D2深。

Some quick exercises (answers in footnotes). Without counting parens and only looking at indentation, figure out how many /non-distinguished/ arguments the following let form has^{[[#fn.2][2]]}:
翻译:一些快速练习（答案在脚注中）。不计括号，仅观察缩进，找出以下let形式有多少个[/非区分/]参数：^[[#fn.2][2]]:

#+BEGIN_EXAMPLE
(let ((x (- 2
1))
(y 100)
(z (+ 1
1)))
(lalala (or z
x)
y)
(moo x y)
(foo x
y
z))
#+END_EXAMPLE

By the way, did you see that the three expressions within the first argument are aligned as well?
翻译:顺便问一下，您注意到第一个参数中的三个表达式对齐了吗？

Without counting parens, figure out how many lines the non-distinguished arguments of the following if form occupies, and figure out how many lines the then clause occupies^{[[#fn.3][3]]}:
翻译:不计括号，找出以下if形式的非区分参数占用了多少行，以及then子句占用了多少行^[[#fn.3][3]]:

#+BEGIN_EXAMPLE
(if (bed-net-exists-p)
(progn
(install-bed-net)
(get-inside)
(go-to-sleep))
(bring-a-fan)
(turn-on-the-fan)
(go-to-sleep))
#+END_EXAMPLE

Without counting parens, figure out how many non-distinguished arguments are in the following if form and how many lines they span, and also figure out how many “statements” are in the then clause.^{[[#fn.4][4]]}
翻译:不计括号，找出以下if形式中有多少个非区分参数，以及它们跨越多少行，还要确定then子句中有多少“语句”。^

#+BEGIN_EXAMPLE
(if (progn blah
(progn blah
blah))
(progn
(blah (+ blah
blah))
(blah)
(blah (+ blah
blah)
blah))
(blah blah
blah)
(blah (+ blah
blah)))
#+END_EXAMPLE

** 11. Too many close parens?
:PROPERTIES:
:CUSTOM_ID: sec-11
:END:

So when you are reading Lisp code, by now it should be clear that there is no reason to fixate your eyes on that =)))...)))= thing (those close parens (a.k.a. right parentheses)), unless you are working with Positive Lisp, a revolutionary new dialect of Lisp which always uses smileys instead of simple parens, designed to promote smile, positive thinking and cross-platform happiness in your workplace. Sample code:
翻译:当您阅读Lisp代码时，现在应该很明显了，没有必要盯着那个东西（那些闭合括号，即右括号）看，除非您在使用Positive Lisp，这是一种革命性的新方言，总是使用笑脸而不是简单的括号，旨在促进微笑、积极思考和跨平台幸福感的职场环境。示例代码：

#+BEGIN_EXAMPLE
(: defun blah (: a b c :)
(: blah :) ;-) comment
(: x y z :) ;-) comment
(: blah
(: foo bar :) :) :)
#+END_EXAMPLE

** 12. Names
:PROPERTIES:
:CUSTOM_ID: sec-12
:END:

Knowing some commonly used prefix and postfixes can help.
翻译:了解一些常用的前缀和后缀会有所帮助。

=p= is a postfix commonly used for function names which are predicates. Examples:
翻译:"."是用于谓词函数名的后缀。示例："="

- =numberp= (“Is it a number”)
翻译:是否为数字
- =zerop= (“Is it zero”)
翻译:- 是零
- =string-or-null-p= (“Is it string or null”)
翻译:“它是字符串还是空？”

=def= is a prefix used for functions that define things. Examples:
翻译:"定义函数前缀 =def= 。示例："

- =defvar= (for defining a variable)
翻译:- 定义变量
- =defun= (for defining a function)
翻译:定义函数
- =defmacro= (for defining a Lisp macro)
翻译:定义一个Lisp宏（用于定义宏）。

=cl= is a prefix used for functions and variables from the CL library for elisp.
翻译:CL库中的函数和变量使用前缀“=cl=”。

- =cl-mapcar=
翻译:使用mapcar函数对列表进行映射
- =cl-union=
翻译:您可以使用以下代码来创建一个简单的Python脚本，用于将Markdown格式的文件转换为HTML：

```python
import markdown2

def markdown_to_html(markdown_text):
    html = markdown2.markdown(markdown_text)
    return html

# 读取Markdown文件
with open("example.md", "r") as file:
    markdown_content = file.read()

# 转换为HTML
html_content = markdown_to_html(markdown_content)

# 输出HTML内容
print(html_content)
```

请注意，这个脚本仅适用于基本的Markdown语法转换。如果您需要处理更复杂的Markdown特性或样式自定义，可能需要使用更高级的工具库，如`markdownify`、`myst-parser`等。

此外，如果您想要将生成的HTML保存到文件中，可以使用以下代码：

```python
with open("output.html", "w") as file:
    file.write(html_content)
```

这样，您的Markdown文件就会被转换为HTML并保存在“output.html”文件中。

Asterisk is sometimes used as a postfix for variations of some functions (or macros). Examples:
翻译:星号有时用作某些函数（或宏）变体的后缀。示例：

- =let*= is a variation of =let=
翻译:- “让”是“让”的一种变体
- =cl-letf*= is a variation of =cl-letf=
翻译:"."

=f= is a postfix for Lisp macros that support “places”. Examples:
翻译:"." 是 Lisp 宏的后缀，用于支持“位置”。示例：

- =setf= is a generalized version of =setq=
翻译:"- =setf= 是 =setq= 的一个通用版本"
- =letf= (in Common Lisp) is a generalize version of =let=
翻译:在Common Lisp中，“- =letf= ”是“=let= ”的一个通用版本。
- =incf= (in Common Lisp) (“inc” stands for “increment”)
翻译:增加（在Common Lisp中）“inc”代表“增量”。

.

*** 12.1. Places?
:PROPERTIES:
:CUSTOM_ID: sec-12-1
:END:

Python code:
翻译:Python代码：

#+BEGIN_EXAMPLE
vec = [10, 20]
vec[0] = 7
vec[1] += 2
print(vec)

# output: [7, 22]
#+END_EXAMPLE

equivalent Emacs Lisp code:
翻译:等效的Emacs Lisp代码：

#+BEGIN_EXAMPLE
(setq vec (vector 10 20))
(setf (elt vec 0) 7)
(cl-incf (elt vec 1) 2)
(print vec)

;; output: [7 22]
#+END_EXAMPLE

That Python code does not evaluate the expression =vec[0]= and likewise the Emacs Lisp code does not evaluate the expression =(elt vec 0)=. Instead, what the code does is.. I think you can already see what it does. That's what it means to support “places”.
翻译:这段Python代码并没有评估表达式`=vec[0]=`，同样地，Emacs Lisp代码也没有评估表达式`=（elt vec 0）=`。相反，代码所做的实际上是……我想你已经能看出它做了什么了。这就是支持“位置”的含义。

** 13. How to read Emacs Lisp code
:PROPERTIES:
:CUSTOM_ID: sec-13
:END:

You probably know what
翻译:你可能知道什么是

#+BEGIN_EXAMPLE
C-h f
#+END_EXAMPLE

and
翻译:你和

#+BEGIN_EXAMPLE
C-h v
#+END_EXAMPLE

do in Emacs Lisp buffers.\
翻译:在Emacs Lisp缓冲区中执行的操作。
(if you don't know, check them out with =C-h k=)
翻译:如果你不知道的话，可以用=C-h k=查看它们。

Also see [[http://www.emacswiki.org/emacs/EmacsSymbolNotation][Emacs Symbol Notation]] which explains what all those mysterious characters are about.
翻译:也参见[[http://www.emacswiki.org/emacs/EmacsSymbolNotation][Emacs符号表示法]]，它解释了所有那些神秘字符的含义。

Use the command =find-library= to read source code of a particular elisp library. Use the =elisp-slime-nav= package if you want quick access to definition of a function (at point), without having to press =C-h f= and then clicking on the link.
翻译:使用命令=find-library=来读取特定emacs-lisp库的源代码。如果您想要快速访问函数的定义（光标所在处），而不需要按=C-h f=然后点击链接，可以使用=elisp-slime-nav=包。

Use =eldoc-mode= (a minor mode) to display information about a function or a variable (at point), without having to manually press =C-h f= or =C-h v=
翻译:使用 =eldoc-mode=（一个最小模式）来显示关于函数或变量的信息（在光标处），而无需手动按下 =C-h f= 或 =C-h v=

*** 13.1. Variables name too long?
:PROPERTIES:
:CUSTOM_ID: sec-13-1
:END:

Use the command =my-simplify-prefix= in [[https://yoo2080.wordpress.com/2013/09/22/how-to-choose-emacs-lisp-package-namespace-prefix/][this link]].
翻译:在[[https://yoo2080.wordpress.com/2013/09/22/how-to-choose-emacs-lisp-package-namespace-prefix/][这个链接]]中使用命令=my-simplify-prefix=。

*** 13.2. Deeply nested data
:PROPERTIES:
:CUSTOM_ID: sec-13-2
:END:

Sometimes you'll see code that uses some deeply nested data (like a list of lists of lists) written in a somewhat compact way. For example:
翻译:有时候你会看到一些使用深度嵌套数据（比如列表中的列表中的列表）的紧凑方式的代码示例。例如：

#+BEGIN_EXAMPLE
(defface nobreak-space
'((((class color) (min-colors 88)) :inherit escape-glyph :underline t)
(((class color) (min-colors 8)) :background "magenta")
(t :inverse-video t))
"Face for displaying nobreak space."
:group 'basic-faces
:version "22.1")
#+END_EXAMPLE

Or this example:
翻译:这个例子：

#+BEGIN_EXAMPLE
(font-lock-add-keywords
nil
`((,(rx "$") (0 'my-dim t))
(,(rx "\" (or "(" ")" "[" "]")) (0 'my-dim t)))
t)
#+END_EXAMPLE

You can use your editor's sexp-based movement commands to get a feel for how the nested data is shaped, or you can [[https://yoo2080.wordpress.com/2013/12/21/small-rainbow-delimiters-tutorial/][use something like rainbow-delimiters]] (which is an Emacs package, but I have a feeling that other editors have similar things as well) to assign colors to parens to help you read, without having to manually invoke movement commands.
翻译:你可以使用你编辑器的基于性表达式（sexp）移动命令来感受嵌套数据是如何塑造的，或者你可以[[https://yoo2080.wordpress.com/2013/12/21/small-rainbow-delimiters-tutorial/][使用类似rainbow-delimiters的东西]]（这是一个Emacs包，但我觉得其他编辑器也有类似的功能），通过给括号分配颜色来帮助你阅读，而无需手动调用移动命令。

** 14. Further reading
:PROPERTIES:
:CUSTOM_ID: sec-14
:END:

Furthermore, it is not hard to edit or write Lisp code. To see how, see the [[https://yoo2080.wordpress.com/2014/07/20/it-is-not-hard-to-edit-lisp-code/][how to edit Lisp code]] article from the [[https://yoo2080.wordpress.com/2013/08/07/living-with-emacs-lisp/][Living with Emacs Lisp]] series.
翻译:进一步来说，编辑或编写Lisp代码并不困难。要了解如何做到这一点，请参阅[[https://yoo2080.wordpress.com/2014/07/20/it-is-not-hard-to-edit-lisp-code/][如何编辑Lisp代码]]文章，该文章来自[[https://yoo2080.wordpress.com/2013/08/07/living-with-emacs-lisp/][与Emacs Lisp共存]]系列。

** 15. Appendix
:PROPERTIES:
:CUSTOM_ID: sec-15
:END:

The dynamic “if .. elif .. elif ... else ..” in Emacs Lisp:
翻译:Emacs Lisp中的动态“if .. elif .. elif ... else ..”：

#+BEGIN_EXAMPLE
(cl-loop for n from 2 below 10
do
(cl-loop for x from 2 below n
do
(when (zerop (% n x))
(print (format "%d equals %d 0_sync_master.sh 1_add_new_article_manual.sh 1_add_new_article_newspaper.sh 2_start_translating.sh 3_continue_the_work.sh 4_finish.sh 5_pause.sh auto_translate.sh base.sh parse_url_by_manual.sh parse_url_by_newspaper.py parse_url_by_newspaper.sh project.cfg reformat.sh texput.log urls_checker.sh youdao.sh %d" n x (/ n x)))
(cl-return))
finally
(print (format "%d is a prime number" n))))
#+END_EXAMPLE

output
翻译:您可以使用我来进行图片翻译，您可以上传一张图片，我将为您进行翻译。

#+BEGIN_EXAMPLE
"2 is a prime number"

"3 is a prime number"

"4 equals 2 0_sync_master.sh 1_add_new_article_manual.sh 1_add_new_article_newspaper.sh 2_start_translating.sh 3_continue_the_work.sh 4_finish.sh 5_pause.sh auto_translate.sh base.sh parse_url_by_manual.sh parse_url_by_newspaper.py parse_url_by_newspaper.sh project.cfg reformat.sh texput.log urls_checker.sh youdao.sh 2"

"5 is a prime number"

"6 equals 2 0_sync_master.sh 1_add_new_article_manual.sh 1_add_new_article_newspaper.sh 2_start_translating.sh 3_continue_the_work.sh 4_finish.sh 5_pause.sh auto_translate.sh base.sh parse_url_by_manual.sh parse_url_by_newspaper.py parse_url_by_newspaper.sh project.cfg reformat.sh texput.log urls_checker.sh youdao.sh 3"

"7 is a prime number"

"8 equals 2 0_sync_master.sh 1_add_new_article_manual.sh 1_add_new_article_newspaper.sh 2_start_translating.sh 3_continue_the_work.sh 4_finish.sh 5_pause.sh auto_translate.sh base.sh parse_url_by_manual.sh parse_url_by_newspaper.py parse_url_by_newspaper.sh project.cfg reformat.sh texput.log urls_checker.sh youdao.sh 4"

"9 equals 3 0_sync_master.sh 1_add_new_article_manual.sh 1_add_new_article_newspaper.sh 2_start_translating.sh 3_continue_the_work.sh 4_finish.sh 5_pause.sh auto_translate.sh base.sh parse_url_by_manual.sh parse_url_by_newspaper.py parse_url_by_newspaper.sh project.cfg reformat.sh texput.log urls_checker.sh youdao.sh 3"
#+END_EXAMPLE

** Footnotes:
:PROPERTIES:
:CUSTOM_ID: footnotes
:CLASS: footnotes
:END:

^{[[#fnr.1][1]]}
翻译:您可以使用我来进行图片翻译，您可以上传一张包含非中文文本的图片，我将尽力为您提供相应的中文翻译。

In the old days, there was no pastebin and no github gist, and many blog engines did not preserve indents in comments.
翻译:以前没有pastebin和github gist，很多博客引擎在评论中不保留缩进。

^{[[#fnr.2][2]]}
翻译:您可以使用我来进行图片翻译，您可以上传一张包含非中文文本的图片，我将尽力为您提供中文翻译。

it has three non-distinguished arguments.
翻译:它有三个无法区分的参数。

^{[[#fnr.3][3]]}
翻译:您可以使用我来进行图片翻译，您可以上传一张包含非中文文本的图片，我将尽力为您提供中文翻译。

The else clause occupies three lines. The then clause occupies three lines, if you exclude the beginning line of the progn form, or four lines, if you include it.
翻译:else子句占用3行。then子句占用3行（如果您不包括progn形式的开始行），或者4行（如果您包括它）。

^{[[#fnr.4][4]]}
翻译:您可以使用我来进行图片翻译，您可以上传一张包含非中文文本的图片，我将为您提供相应的中文翻译。

The else clause consists of two statements and they span four lines in total. The then clause consists of three statements.
翻译:else子句由两个语句组成，总共跨越四行。then子句包含三个语句。
