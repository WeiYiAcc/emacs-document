#+TITLE: A Makefile for Emacs Packages « null program
#+URL: https://nullprogram.com/blog/2020/01/22/
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2020年 02月 19日 星期三 09:55:11 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

Each of my Emacs packages has a Makefile to byte-compile all source files, run the tests, build a package file, and, in some cases, run the package in an interactive, temporary, isolated Emacs instance. These [[/blog/2017/08/20/][portable Makefiles]] have a similar structure and follow the same conventions. It would require more thought and feedback before I'd try to make it a standard, but these are conventions I'd like to see in other package Makefiles.
翻译:我所有的Emacs包都有一个Makefile，用于编译所有源文件、运行测试、构建一个包文件，在某些情况下，在一个交互式、临时的、隔离的Emacs实例中运行这个包。这些[[/blog/2017/08/20/][便携式Makefile]]具有相似的结构并遵循相同的约定。在将其作为标准之前，我需要更多的思考和反馈，但我希望看到其他包的Makefile中也采用这些约定。

Here's an incomplete list of examples:
翻译:以下是一些不完整的示例列表：

+ https://github.com/skeeto/bitpack/blob/master/Makefile
翻译:```
+
https://github.com/skeeto/bitpack/blob/master/Makefile
```
+ https://github.com/skeeto/cplx/blob/master/Makefile
翻译:```
+
https://github.com/skeeto/cplx/blob/master/Makefile
```
+ https://github.com/skeeto/devdocs-lookup/blob/master/Makefile
翻译:```plaintext
+ https://github.com/skeeto/devdocs-lookup/blob/master/Makefile
```
+ https://github.com/skeeto/elfeed/blob/master/Makefile
翻译:```
+ https://github.com/skeeto/elfeed/blob/master/Makefile
```
+ https://github.com/skeeto/emacs-aio/blob/master/Makefile
翻译:```
+ https://github.com/skeeto/emacs-aio/blob/master/Makefile
```
+ https://github.com/skeeto/emacs-bencode/blob/master/Makefile
翻译:```
+ https://github.com/skeeto/emacs-bencode/blob/master/Makefile
```
+ https://github.com/skeeto/emacs-memoize/blob/master/Makefile
翻译:```
+ https://github.com/skeeto/emacs-memoize/blob/master/Makefile
```
+ https://github.com/skeeto/emacs-web-server/blob/master/Makefile
翻译:```
+ https://github.com/skeeto/emacs-web-server/blob/master/Makefile
```
+ https://github.com/skeeto/impatient-mode/blob/master/Makefile
翻译:```plaintext
+
https://github.com/skeeto/impatient-mode/blob/master/Makefile
```
+ https://github.com/skeeto/lcg128/blob/master/Makefile
翻译:```
+ https://github.com/skeeto/lcg128/blob/master/Makefile
```
+ https://github.com/skeeto/nasm-mode/blob/master/Makefile
翻译:```
# NASM模式Makefile

默认目标: nasm-mode.el

nasm-mode.el: $(SOURCES)
	emacs -batch -f batch-byte-compile $<
$(SOURCES): Makefile.in
	rm -f $@; autoheader; autoconf; automake --add-missing; ./configure; make depend; make
install: install-bin install-man
install-bin: 
	cp nasm-mode.el $(DESTDIR)/usr/share/emacs/site-lisp/
install-man:
	cp nasm-mode.texinfo $(DESTDIR)/usr/share/info/
clean:
	rm -rf $(BUILDDIR) $(CONFIG_STATUS) $(CONFIG_HEADER) $(CONFIG_SITE) $(CONFIG_SUB) $(CONFIG_SUBDIR) $(CONFIG_SUBFILES) $(CONFIG_TEXI2DVI) $(CONFIG_TEXI2PDF) $(CONFIG_TEXI2PS) $(CONFIG_TEXI2RTF) $(CONFIG_TEXI2TXT) $(CONFIG_TEXI2WEB) $(CONFIG_TEXI2XML) $(CONFIG_TEXI2XSLT) $(CONFIG_TEXI2XSLFO) $(CONFIG_TEXI2HTML) $(CONFIG_TEXI2TEXI) $(CONFIG_TEXI2DOCBOOK) $(CONFIG_TEXI2SGML) $(CONFIG_TEXI2DTD) $(CONFIG_TEXI2GROFF) $(CONFIG_TEXI2ASCII) $(CONFIG_TEXI2EPL) $(CONFIG_TEXI2FIG) $(CONFIG_TEXI2PIC) $(CONFIG_TEXI2PNG) $(CONFIG_TEXI2JPEG) $(CONFIG_TEXI2TIFF) $(CONFIG_TEXI2EPS) $(CONFIG_TEXI2PDF) $(CONFIG_TEXI2PS) $(CONFIG_TEXI2RTF) $(CONFIG_TEXI2TXT) $(CONFIG_TEXI2WEB) $(CONFIG_TEXI2XML) $(CONFIG_TEXI2XSLT) $(CONFIG_TEXI2XSLFO) $(CONFIG_TEXI2HTML) $(CONFIG_TEXI2TEXI) $(CONFIG_TEXI2DOCBOOK) $(CONFIG_TEXI2SGML) $(CONFIG_TEXI2DTD) $(CONFIG_TEXI2GROFF) $(CONFIG_TEXI2ASCII) $(CONFIG_TEXI2EPL) $(CONFIG_TEXI2FIG) $(CONFIG_TEXI2PIC) $(CONFIG_TEXI2PNG) $(CONFIG_TEXI2JPEG) $(CONFIG_TEXI2TIFF) $(CONFIG_TEXI2EPS) $(CONFIG_TEXI2PDF) $(CONFIG_TEXI2PS) $(CONFIG_TEXI2RTF) $(CONFIG_TEXI2TXT) $(CONFIG_TEXI2WEB) $(CONFIG_TEXI2XML) $(CONFIG_TEXI2XSLT) $(CONFIG_TEXI2XSLFO) $(CONFIG_TEXI2HTML) $(CONFIG_TEXI2TEXI) $(CONFIG_TEXI2DOCBOOK) $(CONFIG_TEXI2SGML) $(CONFIG_TEXI2DTD) $(CONFIG_TEXI2GROFF) $(CONFIG_TEXI2ASCII) $(CONFIG_TEXI2EPL) $(CONFIG_TEXI2FIG) $(CONFIG_TEXI2PIC) $(CONFIG_TEXI2PNG) $(CONFIG_TEXI2JPEG) $(CONFIG_TEXI2TIFF) $(CONFIG_TEXI2EPS) $(CONFIG_TEXI2PDF) $(CONFIG_TEXI2PS) $(CONFIG_TEXI2RTF) $(CONFIG_TEXI2TXT) $(CONFIG_TEXI2WEB) $(CONFIG_TEXI2XML) $(CONFIG_TEXI2XSLT) $(CONFIG_TEXI2XSLFO) $(CONFIG_TEXI2HTML) $(CONFIG_TEXI2TEXI) $(CONFIG_TEXI2DOCBOOK) $(CONFIG_TEXI2SGML) $(CONFIG_TEXI2DTD) $(CONFIG_TEXI2GROFF) $(CONFIG_TEXI2ASCII) $(CONFIG_TEXI2EPL) $(CONFIG_TEXI2FIG) $(CONFIG_TEXI2PIC) $(CONFIG_TEXI2PNG) $(CONFIG_TEXI2JPEG) $(CONFIG_TEXI2TIFF) $(CONFIG_TEXI2EPS) $(CONFIG_TEXI2PDF) $(CONFIG_TEXI2PS) $(CONFIG_TEXI2RTF) $(CONFIG_TEXI2TXT) $(CONFIG_TEXI2WEB) $(CONFIG_TEXI2XML) $(CONFIG_TEXI2XSLT) $(CONFIG_TEXI2XSLFO) $(CONFIG_TEXI2HTML) $(CONFIG_TEXI2TEXI) $(CONFIG_TEXI2DOCBOOK) $(CONFIG_TEXI2SGML) $(CONFIG_TEXI2DTD) $(CONFIG_TEXI2GROFF) $(CONFIG_TEXI2ASCII) $(CONFIG_TEXI2EPL) $(CONFIG_TEXI2FIG) $(CONFIG_TEXI2PIC) $(CONFIG_TEXI2PNG) $(CONFIG_TEXI2JPEG) $(CONFIG_TEXI2TIFF) $(CONFIG_TEXI2EPS) $(CONFIG_TEXI2PDF) $(CONFIG_TEXI2PS) $(CONFIG_TEXI2RTF) $(CONFIG_TEXI2TXT) $(CONFIG
+ https://github.com/skeeto/skewer-mode/blob/master/Makefile
翻译:```
+ https://github.com/skeeto/skewer-mode/blob/master/Makefile
```
+ https://github.com/skeeto/x86-lookup/blob/master/Makefile
翻译:```makefile
# Makefile for x86-lookup tool by Skeeto
```


You should make a habit of compiling your Emacs Lisp files even if you don't think you need the performance. The byte-compiler, while [[/blog/2019/02/24/][dumb]], does [[/blog/2016/12/22/][static analysis]] and may spot bugs and other issues early.
翻译:你应该养成编译Emacs Lisp文件的习惯，即使你认为不需要性能提升。虽然字节编译器[[/blog/2019/02/24/][有点傻]],但它可以进行[[/blog/2016/12/22/][静态分析]],可能会尽早发现错误和其他问题。

First things first: Every portable Makefile starts with a special target, =.POSIX=, to request standard behavior. This is followed by macro definitions. When compiling a C program, the =CC= macro is the name of the compiler. Analogously, when compiling Emacs packages the =EMACS= macro is the name of the Emacs program.
翻译:首先：每个便携式Makefile都以一个特殊目标开始，即“.POSIX=”，以请求标准行为。这后面是宏定义。在编译C程序时，“CC”宏是编译器的名称。同样地，在编译Emacs包时，“EMACS”宏是Emacs程序的名称。

#+BEGIN_EXAMPLE
.POSIX:
EMACS = emacs
#+END_EXAMPLE

Users can now override the macro to specify alternate Emacs binaries. I use this all the time to test my packages under different versions of Emacs.
翻译:现在用户可以覆盖宏以指定不同的Emacs可执行文件。我经常使用这个功能在不同的Emacs版本下测试我的包。

#+BEGIN_EXAMPLE
$ make clean
$ make EMACS=emacs-24.3 check
$ make clean
$ make EMACS=emacs-25.1 check
#+END_EXAMPLE

Note: It's common to use =?== assignment here, but that is both non-standard and unnecessary. If you want to override macro definitions from the environment, use the =-e= option:
翻译:注意：在这里使用 =?== 赋值是常见做法，但这既不标准也不必要。如果您想覆盖环境中定义的宏，请使用 =-e= 选项：

#+BEGIN_EXAMPLE
$ export EMACS=emacs-24.3
$ make -e
#+END_EXAMPLE

The first non-special target in the Makefile is the default target. For Emacs packages, this target should byte-compile all the source files, including tests. List the byte-compiled file names as the target dependencies:
翻译:Makefile中的第一个非特殊目标是最默认的目标。对于Emacs软件包来说，这个目标应该编译所有源文件，包括测试用例。将字节编译后的文件名列为目标的依赖关系：

#+BEGIN_EXAMPLE
compile: foo.elc foo-test.elc
#+END_EXAMPLE

Now for the tedious part: Define the dependencies between your different source files. It would be nice to automate this part somehow, but fortunately most packages just aren't that complicated. You do not need to list trivial dependencies --- i.e. mapping each .el file to its .elc file --- since make will figure that out on its own.
翻译:现在来进行繁琐的部分：定义您不同源文件之间的依赖关系。如果能以某种方式自动化这部分工作那就太好了，但幸运的是，大多数包并没有那么复杂。您不需要列出琐碎的依赖项---即每个 .el 文件与其对应的 .elc 文件的映射，因为 make 会自行解决这个问题。

Since =foo-test.elc= relies on =foo.elc= --- it's testing this file after all --- the relationship must be indicated to make. For single file packages (one package file, one test file), this is all that's needed:
翻译:由于 =foo-test.elc= 依赖于 =foo.elc= ——毕竟这是它在测试这个文件——这种关系必须被标明才能使。对于单文件包（一个包文件，一个测试文件），这就足够了：

#+BEGIN_EXAMPLE
foo-test.elc: foo.elc
#+END_EXAMPLE

I call my testing targets “check” and this target must depend on the byte-compiled files containing tests. It will transiently depend on the other package source files because of the previous section.
翻译:我将我的测试目标称为“检查”，此目标必须依赖于包含测试的字节编译文件。由于前一节的原因，它将暂时依赖其他包的源文件。

#+BEGIN_EXAMPLE
check: foo-test.elc
$(EMACS) -Q --batch -L . -l foo-test.elc -f ert-run-tests-batch
#+END_EXAMPLE

The =-Q= option runs Emacs with “minimum customizations.” The =-L .= option puts the current directory in the load path so that =(require 'foo=) will work. Finally it loads the file containing the tests and instructs ERT to run all defined tests.
翻译:“=-Q=”选项以“最小定制化”的方式运行Emacs。="-L=" 选项将当前目录添加到加载路径中，这样 =(require 'foo)= 就会生效。最后，它加载包含测试的文件，并指示ERT运行所有定义的测试。

A good build can clean up after itself:
翻译:一个好的构建可以在自己结束后进行清理：

#+BEGIN_EXAMPLE
clean:
rm -f foo.elc foo-test.elc
#+END_EXAMPLE

Finally we need one more thing to tie it all together: an inference rule to teach make how to compile .elc files from .el files.
翻译:我们还需要一个推理规则来教make如何从.el文件编译出.elc文件，以便将所有东西串联起来。

#+BEGIN_EXAMPLE
.SUFFIXES: .el .elc
.el.elc:
$(EMACS) -Q --batch -L . -f batch-byte-compile $<
#+END_EXAMPLE

This is similar to the “check” target, but compiles a source file instead of running tests.
翻译:这类似于“检查”目标，但编译源文件而不是运行测试。

For simple, single source file packages, this is all you need!
翻译:对于简单的单个源文件包，这就足够了！

* Complex packages
:PROPERTIES:
:CUSTOM_ID: complex-packages
:END:

My most complex package is Elfeed which has 10 source files and 4 test files. It also includes a target to build a package file, which I would upload to Marmalade when it was still functioning. I did a few extra things to keep this tidy.
翻译:我最为复杂的包是Elfeed，它有10个源文件和4个测试文件。此外，还包括一个构建包文件的target，当Marmalade仍然运行时，我会将其上传到Marmalade上。我还做了几项额外的工作来保持这个项目的整洁。

First, I define the package version in the Makefile:
翻译:首先，我在Makefile中定义了软件包版本：

#+BEGIN_EXAMPLE
VERSION = 1.2.3
#+END_EXAMPLE

It would be nice to grab this information from a reliable place (Git tag, source file, etc.), but I never found a reliable and satisfactory way to do this. Simple wins.
翻译:从可靠的来源（Git标签、源文件等）获取此信息是很好的，但我从未找到可靠且令人满意的方法来完成这项工作。简单至上。

To avoid repeating myself, I list the source files in a macro as well:
翻译:为了避免重复，我还将在宏中列出源文件：

#+BEGIN_EXAMPLE
EL = foo-a.el foo-b.el foo-c.el
DOC = README.md
TEST = foo-test.el
#+END_EXAMPLE

These will still need to have all their interdependencies individually defined for make. For example, if C depends on both A and B, but neither A nor B depend on each other, this is all you'd need:
翻译:这些仍然需要为make单独定义所有它们的依赖关系。例如，如果C依赖于A和B，而A和B之间不相互依赖，那么您只需要这样做：

#+BEGIN_EXAMPLE
foo-c.elc: foo-a.elc foo-b.elc
#+END_EXAMPLE

Done correctly you can perform parallel builds with the non-standard but common =-j= make option. This is pretty nice since Emacs can't do parallel builds itself.
翻译:正确执行时，你可以使用非标准但常见的=-j= make选项进行并行构建。这相当不错，因为Emacs本身无法进行并行构建。

I use the file list macros in the “compile” and “check” targets:
翻译:我使用“编译”和“检查”目标中的文件列表宏：

#+BEGIN_EXAMPLE
compile: $(EL:.el=.elc) $(TEST:.el=.elc)
test: $(TEST:.el=.elc)
#+END_EXAMPLE

The “package” target copies everything under a directory and tars it up. The directory is removed first, if it exists, so that any potenntial leftover garbage from doesn't get included.
翻译:“包”目标会复制一个目录下的所有文件并将其打包成tar文件。如果该目录已存在，则会先删除它，以免包含任何潜在的遗留垃圾。

#+BEGIN_EXAMPLE
package: foo-$(VERSION).tar
foo-$(VERSION).tar: $(EL) $(DOC)
rm -rf foo-$(VERSION)/
mkdir foo-$(VERSION)/
cp $(EL) $(DOC) foo-$(VERSION)/
tar cf $@ foo-$(VERSION)/
rm -rf foo-$(VERSION)/
#+END_EXAMPLE

In Elfeed, the target to test in an interactive, temporary Emacs instance is called “virtual”. In Skewer it's called “run”. The name of the target and the specific rules will depend on the package, should you even want this target at all. It's handy to have the option test without my own configuration contaminating Emacs, and vice versa. When people report issues, I can also direct them to reproduce their issue in the clean environment.
翻译:在Elfeed中，用于在交互式、临时Emacs实例中进行测试的目标被称为“虚拟”。在Skewer中，它被称为“运行”。目标名称和具体规则将取决于包，如果您甚至想要这个目标的话。拥有在不污染Emacs的情况下测试选项是很有用的，反之亦然。当人们报告问题时，我也可以指引他们在这个干净的环境中重现他们的issue。

Here's what a simple “run” target might look like:
翻译:这是一个简单的“运行”目标的示例：

#+BEGIN_EXAMPLE
run: $(EL:.el=.elc)
$(EMACS) -Q -L . -l foo-c.elc -f foo-mode
#+END_EXAMPLE

Make is not really designed to run interactive programs like this, but it works in practice.
翻译:make实际上并不适用于运行这样的交互式程序，但在实践中它是可行的。

* Dependencies
:PROPERTIES:
:CUSTOM_ID: dependencies
:END:

What about packages with dependencies? I've used [[https://github.com/cask/cask][Cask]] in the past but was never satisfied, especially when integrating it into a Makefile. So, again, I've opted for the dumb-but-reliable option: request that dependencies are cloned in adjacent directories matching the dependency's package name. For example, the [[/blog/2014/02/06/][EmacSQL]] Makefile header:
翻译:关于依赖项的包呢？我过去使用过[[https://github.com/cask/cask][Cask]]，但从未感到满意，尤其是在将其集成到Makefile中时。因此，我又选择了“愚蠢但可靠”的方法：请求将依赖项克隆到与依赖项的包名匹配的相邻目录中。例如，[[/blog/2014/02/06/][EmacSQL]] Makefile头部：

#+BEGIN_EXAMPLE
# Clone the dependencies of this package in sibling directories:
# $ git clone https://github.com/cbbrowne/pg.el ../pg
#+END_EXAMPLE

I also define a new “linker flags” macro, =LDFLAGS=. Like with =EMACS=, this lets users override it if needed:
翻译:我也定义了一个新的“链接器标志”宏，即=LDFLAGS=。与=EMACS=类似，这允许用户在需要时覆盖它：

#+BEGIN_EXAMPLE
LDFLAGS = -L ../pg
#+END_EXAMPLE

Everywhere I use =-L .= I also include =$(LDFLAGS)=. For example, in the inference rule:
翻译:我在使用的每个地方都包含了=-L .= 和=$(LDFLAGS)=。例如，在推理规则中：

#+BEGIN_EXAMPLE
.SUFFIXES: .el .elc
.el.elc:
$(EMACS) -Q --batch -L . $(LDFLAGS) -f batch-byte-compile $<
#+END_EXAMPLE

If the dependencies follow these conventions, then these can also be compiled in a recursive way with little effort:
翻译:如果依赖遵循这些约定，那么也可以通过很少的努力以递归的方式编译：

#+BEGIN_EXAMPLE
$ make -C ../pg
#+END_EXAMPLE

I'm not completely satisfied with this solution, particularly since it's an odd burden on anyone using the Makefile, but it's worked well enough for my needs. This is when I wish Emacs had [[/blog/2020/01/21/#package-management][distributed package management]].
翻译:我不太满意这个解决方案，特别是因为它给使用Makefile的人带来了额外的负担，但到目前为止它已经足够满足我的需求了。这时候真希望Emacs有[[/blog/2020/01/21/#package-management][分布式包管理]]功能。
