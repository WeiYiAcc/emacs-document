#+TITLE: Marcin Borkowski: 2018-07-02 Smart yanking
#+URL: http://mbork.pl/2018-07-02_Smart_yanking
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 07月 06日 星期五 15:05:54 CST]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
Notice: this is a long, technical post about a useful piece of Emacs Lisp. What it does it allowing to yank text with a space at either end both before and after a space between words and have Emacs adjust things so that you don't end up with two spaces at one end of the yanked fragment and no space at the other one. If you just want the working code, you may get it from here: [[https://gist.github.com/mbork/9ee1bd8216424e07342e88739fe65547]]. If you want to know the gory details, read on.
翻译:注意：这是一篇关于一个有用的Emacs Lisp脚本的详细技术文章。它的功能是在单词之间的空格前后都保留有空格的情况下，允许您粘贴文本，并让Emacs自动调整，避免粘贴片段的一端出现两个空格而另一端没有空格的情况。如果您只想获取可运行的代码，可以直接从这里获得：[[https://gist.github.com/mbork/9ee1bd8216424e07342e88739fe65547]]。如果您想了解详细的实现过程，请继续阅读。
注意:这是一篇很长的关于Emacs Lisp有用部分的技术文章。它所做的是允许在单词之间的前后两端都有空格的文本，并让Emacs进行调整，这样您就不会在被拖拽的片段的一端有两个空格，而另一端没有空格。如果你只是想要工作代码，你可以从这里:[[https://gist.github.com/mbork/9ee1bd8216424e07342e88739fe65547]]。如果你想知道血淋淋的细节，请继续读下去。
翻译:请注意：这是一篇非常长且深入探讨Emacs Lisp实用功能的技术文章。其主要目的是实现一种特性，使得在文本编辑过程中，当用户选择和移动包含有空格的单词时，Emacs能够智能地调整这些空格的数量，确保被选中的文本片段的两端空格数量一致。如果您需要直接获取相关代码示例，可以访问以下链接：[[https://gist.github.com/mbork/9ee1bd8216424e07342e88739fe65547]]。如果您对这一功能的实现细节感兴趣，请继续阅读。


Edit: in the first version of this blog post, I made an embarrassing rookie mistake. Sorry for that. Given that this post is one of the most popular ones in recent months, it is both ironic and humbling...
翻译:编辑：在本文的第一版中，我犯了一个尴尬的新手错误。对不起。鉴于这篇文章是最近几个月最受欢迎的文章之一，这既具有讽刺意味也让人感到谦卑……
编辑:在这篇博客文章的第一个版本中，我犯了一个令人尴尬的新手错误。对不起。鉴于这篇文章是近几个月来最受欢迎的文章之一，它既讽刺又令人难堪……



Anyway, the mistake is now corrected. Expect another blog post where I explain what I did wrong (I think it's easy to fall for this!).
翻译:无论如何，错误现在已经更正了。期待我在接下来的博客文章中解释我犯了什么错（我觉得这很容易上当受骗！）
不管怎样，这个错误现在已经改正了。期待我在另一篇博文中解释我做错了什么(我认为很容易上当!)

I use Emacs fairly often to write text in a natural language. While I consider Emacs support for human languages to be very good, there are still a few rough edges. One of them is connected with cutting and pasting, or, as Emacs insists on calling these, killing and yanking.
翻译:我经常使用Emacs以自然语言编写文本。虽然我认为Emacs对人类语言的支持非常好，但仍有一些不尽人意的地方。其中一个与复制和粘贴有关，或者像Emacs坚持称呼的那样，是删除和粘贴。
我经常使用Emacs以自然语言编写文本。虽然我认为Emacs对人类语言的支持非常好，但仍然存在一些不足之处。其中一个与剪切和粘贴有关，或者像Emacs坚持称的那样，与杀戮和猛拉有关。
翻译:我经常用Emacs用自然语言编写文本。尽管我认为Emacs对人类语言的支持相当不错，但仍有一些不足之处。其中之一与复制和粘贴有关，或者说，正如Emacs所坚持的，与“杀死”和“拖拉”有关。

It's been a long time since I wrote anything in Word, but I vaguely recall that its pasting command is fairly smart with respect to spaces. For instance, consider the following text:
翻译:我已经很久没有在Word中写东西了，但我想起来它的粘贴命令对于空格的处理相当智能。例如，考虑以下文本：
#+BEGIN_EXAMPLE
The quick| brown fox jumps over the lazy dog.
#+END_EXAMPLE

(The vertical bar denotes the point.) Now imagine pressing =M-d= (=kill-word=):
翻译:（竖线表示点。）现在想象按下=M-d=（=删除单词=）：
#+BEGIN_EXAMPLE
The quick| fox jumps over the lazy dog.
#+END_EXAMPLE

and moving to the “lazy” part:
翻译:并且转移到“懒惰”的部分：
#+BEGIN_EXAMPLE
The quick fox jumps over the |lazy dog.
#+END_EXAMPLE

Notice how we are now on the beginning of the word instead of at the end of the previous one. (This might have happened if we e.g. went to the end of line -- =C-e= -- and then back by two words -- =M-2 M-b=.)
翻译:现在我们位于单词的开头而不是前一个词的末尾（这可能发生在例如我们到了行尾-- =C-e= -- 然后后退两个单词-- =M-2 M-b= 的情况）。
注意我们现在是在单词的开头，而不是前一个单词的结尾。(这种情况可能会发生，如果我们例如:went to the end of line—=C-e=—and then by two words—=M-2 M-b=。)
翻译:请注意，我们现在处于单词的开头，而不是前一个单词的结尾。（这种情况可能会发生，比如我们在句子末尾输入：went to the end of line——C-e——然后向后移动两个单词——M-2 M-b。）

If we now press =C-y=, we end up with this:
翻译:如果我们现在按下=C-y=，我们最终得到这个结果：
#+BEGIN_EXAMPLE
The quick fox jumps over the brown|lazy dog.
#+END_EXAMPLE

As you can see, we now have a double space before “brown” and no space after it.
翻译:如您所见，我们现在在“brown”前面有一个空格，而在其后没有空格。
如您所见，我们现在在“brown”前面有一个双空格，在它后面没有空格。
翻译:您现在看到的字符串中，“brown”这个词前面有两个空格字符，而在它的后面则没有空格。

It is not difficult to code a function doing the right thing in this case. (The “right thing” could be e.g. moving the point back by a space before yanking.) The problem, however, is to know when we should do that.
翻译:编写一个在这种情况下执行正确操作的函数并不难。（“正确的事情”可能是指移动光标后退一格然后再进行剪切。）然而，问题在于要知道我们何时应该这样做。
在这种情况下，编写正确的函数并不困难。(“正确的做法”可以是，在猛拉之前，将指针向后移动一个空格。)然而，问题是要知道我们什么时候应该这样做。

First of all, it is definitely a bad idea in programming modes. (Possibly unless we are editing comments or strings, but let's forget about it for now.) On the other hand, Org-mode, LaTeX modes etc. are fine. This means that we probably should put our customizations in =text-mode-hook=.
翻译:首先，在编程模式下这样做绝对是错误的。（除非我们在编辑注释或字符串，但让我们现在先忘记它。）另一方面，Org模式、LaTeX模式等是可以的。这意味着我们可能应该把我们的自定义设置放在=text-mode-hook=中。
首先，在编程模式中这绝对是个坏主意。(可能除非我们在编辑注释或字符串，但现在先把它忘掉。)另一方面，组织模式、乳胶模式等也很好。这意味着我们可能应该将定制放在=text-mode-hook=中。
翻译:首先，在编程模式下这样做绝对是错误的。（除非我们现在正在编写注释或字符串，但暂时先忽略它。）另一方面，组织模式、LaTeX模式等都很好用。这意味着我们可能应该把自定义设置放到`text-mode-hook`中。

Then, we should decide where in the Emacs system we should plug our functionality into. Redefining =yank= is probably a bad idea -- we do not want to do all the hard work that command does (it has more than a dozen lines!). We could define our own command, let's call it =smart-yank=, which would do its magic and then call =yank=, but there is no need to. Emacs has a special facility designed exactly to this kind of customizations, called =advice=. We can advise the =yank= command, which means that we provide some Elisp code to be run before or after =yank= (or even instead of it).
翻译:然后，我们应该决定在Emacs系统中将我们的功能插入到哪个位置。重新定义=yank=可能不是一个好主意——我们不想做这个命令所做的所有艰苦工作（它有超过一打行！）。我们可以定义自己的命令，让我们称之为=smart-yank=，它会执行它的魔法，然后调用=yank=，但这样做没有必要。Emacs有一个专门为此类自定义设计的特殊设施，叫做=advice=。我们可以劝告=yank=命令，这意味着我们将一些Elisp代码提供给在=yank=之前或之后运行（甚至代替它）。


然后，我们应该决定将我们的功能插入Emacs系统的哪个部分。重新定义=yank=可能是个坏主意——我们不想做命令所做的所有艰苦工作(它有十几行!)我们可以定义我们自己的命令，我们将它命名为=smart-yank=，它会执行它的魔法，然后调用=yank=，但是没有必要这样做。Emacs有一个专门针对这种定制设计的特殊工具，称为=advice=。我们可以建议使用=yank=命令，这意味着我们提供了一些Elisp代码，可以在=yank=之前或之后运行(甚至代替它)。
翻译:接着，我们需要确定如何将我们的功能集成到Emacs系统中。修改“yank”的定义可能不是一个好的选择 —— 我们不希望承担命令的全部辛勤工作（它有十多行代码！）。我们可以创建自己的命令，称之为“smart-yank”，它会施展它的魔力，并在最后调用“yank”，但无需如此繁琐。Emacs提供了一个专为这类自定义而设计的高级工具，叫做“advice”。我们可以向“yank”命令提出建议，这意味着我们将一些Elisp代码提供给Emacs，这些代码可以在“yank”执行前后或者替代“yank”本身来运行。

One drawback of using advice is that it is global: there is no way to install advice only in a specific mode or buffer. In other words, =text-mode-hook= will be of no use for us. This is not a huge problem, though, since we can make our function check whether we are in a mode derived from =text-mode=, and do nothing if we are not in such a mode.
翻译:使用建议的一个缺点是它是全局性的：无法只在一个特定的模式或缓冲区中安装建议。换句话说，`=text-mode-hook` 对我们将毫无用处。然而，这并不是一个大问题，因为我们可以让我们的函数检查我们是否处于从 `text-mode` 衍生的模式中，如果不是，则什么都不做。
使用通知的一个缺点是它是全局的:无法仅在特定模式或缓冲区中安装通知。换句话说，=text-mode-hook=对我们没有用处。不过，这并不是一个大问题，因为我们可以让函数检查是否处于派生自=text-mode=的模式，如果不处于这种模式，则什么也不做。
翻译:使用通知的一个缺点是它是全局的：无法仅在特定模式或缓冲区中安装通知。换句话说，`text-mode-hook` 对我们没有用处。不过，这并不是一个大问题，因为我们可以让函数检查是否处于派生自 `text-mode` 的模式，如果不处于这种模式，则什么也不做。

Now let's think about what exactly our advice should do. This is not easy, especially that we should probably take into consideration the fact that we may have two spaces at the end of the sentence, and that instead of a space we may have a newline between words. My first idea is to check whether the last entry in the kill ring has a whitespace character at the left or right. My assumptions are as follow.
翻译:现在让我们思考一下我们的建议应该做什么。这并不容易，特别是我们可能需要在句子的末尾有两个空格，而且我们可能有换行符而不是空格在单词之间。我第一个想法是检查杀戮环中的最后一个条目是否在其左右两侧有空白字符。我的假设如下。
- If it has whitespace on both sides, nothing special should happen.
翻译:如果它两边都有空格，什么特殊的事情都不会发生。
-如果两边都有空格，就不会发生什么特别的事情。
- If it has whitespace on e.g. left side, and there is whitespace to the left of the point, we should move point before any whitespace.
翻译:如果例如在左侧有空格，并且在点的左侧有空格，我们应该将点移动到任何空格之前。
-如果它有空白，例如左边，和有空白的点的左边，我们应该移动点之前的任何空白。
- Similarly if the last kill rinf entry has whitespace on the right side.If the kill ring entry has no space on either side, it might be difficult to decide what to do. It might be the case that it is not a whole word but only a prefix (though this would be strange). I think I could try to make sure that in this case, space is inserted on whichever side had no space before, and just see what happens during daily usage.
翻译:如果最后一个杀戮循环条目右侧有空格，那么情况也是如此。如果一个杀戮循环条目两侧都没有空格，可能很难决定该怎么办。也许它不是一个完整的单词，而只是一个前缀（尽管这会很奇怪）。我认为我可以尝试确保在这种情况下，在之前没有空格的一侧插入空格，然后看看在日常使用中会发生什么。
如果杀环入口两边都没有空间，可能很难决定该怎么做。它可能不是一个完整的单词，而是一个前缀(尽管这很奇怪)。我想我可以试着确保在这种情况下，插入空间的任何一方没有空间之前，只是看看发生了什么日常使用。

All this is rather simplified, since we do not really care for newlines and filling, but let's do it one step at a time.
翻译:这相当简化了，因为我们实际上并不关心换行和填充，但让我们一步一步来。
所有这些都非常简单，因为我们并不真正关心换行和填充，但是让我们一次只做一步。

#+BEGIN_EXAMPLE
(defun has-space-at-boundary-p (string)
"Check whether STRING has any whitespace on the boundary.
Return 'left, 'right, 'both or nil."
(let ((result nil))
(when (string-match-p "^[[:space:]]+" string)
(setq result 'left))
(when (string-match-p "[[:space:]]+$" string)
(if (eq result 'left)
(setq result 'both)
(setq result 'right)))
result))
#+END_EXAMPLE

Notice how I used =string-match-p=, which does not modify match data (which is global state, so I don't like modifying it by my functions).
翻译:请注意我使用了 =string-match-p=，这个函数不会修改匹配数据（这是全局状态，所以我更喜欢在我的函数中不修改它）。
注意我是如何使用=string-match-p=的，它不修改匹配数据(这是全局状态，所以我不喜欢通过函数修改它)。
翻译:请注意我是如何使用`string-match-p`的，它不会修改匹配数据（因为这是全局状态，所以我更喜欢不通过函数来修改它）。

Let us now write the function checking whether we should do something special when yanking. The criteria are as follows:
翻译:现在让我们编写一个函数来检查在粘贴（yank）时是否需要执行特殊操作。以下是判断标准：

1. 如果光标位于字符串中，则不执行任何特殊操作。

2. 如果光标位于字符串之前，并且字符串长度小于或等于 10 个字符，则不执行任何特殊操作。

3. 如果光标位于字符串之后，并且字符串长度大于 10 个字符，则不执行任何特殊操作。

4. 其他情况下，执行特殊操作。
- If there is no space around point or on both sides of the point, do nothing special.
翻译:如果点前后没有空格，或者点两侧都没有空格，则不做特殊处理。
-如果点周围或点的两边没有空间，不要做任何特殊的事情。
- If there is space e.g. to the left of the point, and the yanked text has space on the left, move point left across all the space first.
翻译:如果有点左侧的空间，例如，并且被拖动的文本左侧有空格，首先将光标移动到所有这些空格上。
-如果有空格，例如在点的左边，并且被拉下的文本在左边有空格，则先将点左移到整个空格。
- If there is space to the right of the point, do the analogous thing.
翻译:如果点的右边有空位，就做类似的事情。
如果在点的右边有空间，做类似的事情。

First, we want to be able to check whether there is any whitespace around the point.
翻译:首先，我们想检查该点周围是否有任何空白。
#+BEGIN_EXAMPLE
(defun is-there-space-around-point-p ()
"Check whether there is whitespace around point.
Return 'left, 'right, 'both or nil."
(let ((result nil))
(when (< (save-excursion
(skip-chars-backward "[:space:]"))
0)
(setq result 'left))
(when (> (save-excursion
(skip-chars-forward "[:space:]"))
0)
(if (eq result 'left)
(setq result 'both)
(setq result 'right)))
result))
#+END_EXAMPLE

We can now write the function combining all we have done so far.
翻译:我们现在可以编写结合到目前为止我们所做的一切的功能函数。
我们现在可以写出这个函数了。

#+BEGIN_EXAMPLE
(defun set-point-before-yanking (string)
"Put point in the appropriate place before yanking STRING."
(let ((space-in-yanked-string (has-space-at-boundary-p string))
(space-at-point (is-there-space-around-point-p)))
(cond ((and (eq space-in-yanked-string 'left)
(eq space-at-point 'left))
(skip-chars-backward "[:space:]"))
((and (eq space-in-yanked-string 'right)
(eq space-at-point 'right))
(skip-chars-forward "[:space:]")))))
#+END_EXAMPLE

Now there is one problem. We cannot advice =yank=, since we do not know the yanked string before =yank= is actually evaluated. (We could of course look up the source code for =yank=, and see how it uses =current-kill= to get the right string. Copying and pasting code between a function and its advice, however, kind of defeats the purpose of advising it in the first place.) It turns out, however, that =yank= is a pretty complicated mechanism, which calls the =insert-for-yank= command. It allows for some deep magic, manipulating text before yanking (and indeed, this mechanism could be used to solve our initial problem!). We may than advice =insert-for-yank=, which gets exactly what we want (the string) as its sole argument.
翻译:现在有一个问题。我们不能建议=yank=，因为我们不知道在=yank=实际评估之前被拉取的字符串是什么。（当然，我们可以查找=yank=的源代码，看看它是如何使用=current-kill=来获取正确字符串的。然而，在函数和其建议之间复制粘贴代码，却有点违背了最初对其进行建议的目的。）但是，我们发现=yank=是一个非常复杂的机制，它调用了=insert-for-yank=命令。它允许进行一些深奥的魔法，在拉取之前操纵文本（实际上，这个机制可以用来解决我们最初的问题！）。然后我们可以建议=insert-for-yank=，它会得到我们想要的正好是那个字符串作为它的唯一参数。
现在有一个问题。我们不能advice =yank=，因为在=yank=被实际求值之前，我们不知道被拉动的字符串。(当然，我们可以查找=yank=的源代码，看看它如何使用=current-kill=来获得正确的字符串。然而，在函数和它的建议之间复制和粘贴代码，从一开始就违背了建议它的目的。然而，=yank=是一个相当复杂的机制，它调用=insert-for-yank=命令。它允许在猛拉之前对文本进行一些深层次的处理(实际上，这种机制可以用来解决我们最初的问题!)我们可以使用than advice =insert-for-yank=，它获取我们想要的(字符串)作为惟一参数。
翻译:现在有一个问题。我们不能直接使用`yank`，因为在我们实际调用`yank`之前，我们并不知道要拉取的字符串是什么。（当然，我们可以查阅`yank`的源代码，看看它是如何通过`current-kill`来获取正确字符串的。但是，在函数中复制并粘贴代码以得到建议，这从一开始就是违反建议初衷的做法。不过，`yank`是一个非常复杂的机制，它会调用`insert-for-yank`命令。这个机制允许我们在执行真正的拉取动作之前对文本进行一些深入处理（实际上，这种机制甚至可以帮助我们解决最开始遇到的问题！）我们可以尝试使用`insert-for-yank`代替`yank`的建议，这样它就会接受我们想要的字符串作为唯一的参数。

One possible drawback of this approach is that =yank= calls =push-mark= before =insert-for-yank=, which may or may not be what we want. We could circumvent that, but I'm not sure whether it's worth the effort, and the code would be even more hacky than it is now.
翻译:这种方法的一个潜在缺点是，=yank=在=insert-for-yank=之前调用了=push-mark=，这并不是我们想要的。我们可以绕过这个问题，但我不确定这样做是否值得，而且代码会比现在更加“骇客”。
这种方法的一个可能的缺点是=yank= calls =push-mark= before =insert-for-yank=，这可能是我们想要的，也可能不是。我们可以绕过它，但我不确定这样做是否值得，代码将比现在更容易破解。
翻译:这种方法的一个可能的缺点是`yank`在调用`insert-for-yank`之前调用了`push-mark`，这可能正是我们所希望的，也可能不是。我们可以绕过它，但我不确定这样做是否值得，因为代码将比现在更容易被破解。

So let's finally define and install our advice, remembering about checking whether the mode is a text one.
翻译:我们最终定义并安装了建议，记得检查模式是否为文本模式。
#+BEGIN_EXAMPLE
(defun set-point-before-yanking-if-in-text-mode (string)
"Invoke `set-point-before-yanking' in text modes."
(when (derived-mode-p 'text-mode)
(set-point-before-yanking string)))

(advice-add
'insert-for-yank
:before
#'set-point-before-yanking-if-in-text-mode)
#+END_EXAMPLE

This solution has one drawback. It installs some magic working behind the scenes (such kind of magic is traditionally called “DWIM” -- or “do what I mean” in Emacs world), and does not give the user any convenient way of turning this magic off. I don't like it when computers try to be smarter than they are, so I'd prefer to be able to tell Emacs “just yank this as it is, without paying attention to any spaces whatsoever”. Now the question is: how to tell that to Emacs? A prefix argument (=C-u=) is the first idea, but a prefix argument to =yank= has a well established meaning and I don't want to give up that.
翻译:这个解决方案有一个缺点。它会在后台安装一些魔法（这种魔法在Emacs世界中传统上被称为“DWIM”——即“按我意图行事”），并且没有给用户提供任何方便的方式来关闭这些魔法。我不喜欢计算机试图比它们实际更聪明，所以我想告诉Emacs“就原样粘贴这个，不管任何空格”。现在的问题是：如何向Emacs传达这一点？前缀参数（=C-u=）是第一个想法，但是=yank=的前缀参数已经建立了固定的含义，我不想放弃那个。

```


```python
# Your code here...
```

这个解决方案有一个缺点。安装一些魔法在幕后工作(这样的魔法传统上被称为“DWIM”——或者Emacs世界上“做我的意思”),和不给用户任何方便关闭这个神奇的方式。我不喜欢它当电脑尝试比他们更聪明,所以我希望能够告诉Emacs“猛拉这个,没有注意到任何空间”。现在的问题是:如何告诉Emacs?前缀参数(=C-u=)是第一个想法，但是前缀参数to =yank=有一个确定的含义，我不想放弃它。
翻译:这个解决方案存在一个缺陷。它在后台偷偷使用了一些魔法（这种魔法传统上被称为“DWIM”——或者在Emacs的世界里说，“做我的意思”），并且不提供一个简单的方法让用户可以轻松地关闭这个神奇的特性。我不太喜欢计算机试图表现得比自己聪明的做法，因此我希望能够告诉Emacs：“强硬地执行这个命令，忽略所有的空格。”目前的问题是：我该如何向Emacs传达这个请求呢？首先想到的是使用前缀参数（即按住=C-u=键）。但是，前缀参数对于=yank=（粘贴）操作已经有了固定的意义，我不想放弃它的原有功能。

Well, another natural choice is =C-u C-u=. We have one problem, though. The =insert-for-yank= function knows nothing about the prefix argument to =yank=.
翻译:嗯，另一个自然的选择是=C-u C-u=。不过我们有一个问题。=insert-for-yank=函数对=yank=的前缀参数一无所知。
另一个自然的选择是=C-u C-u=。不过，我们有一个问题。函数=insert-for-yank=对前缀参数=yank=一无所知。
翻译:另一个自然的选择是“C-u C-u”。不过，我们有一个问题。函数“insert-for-yank”对前缀参数“yank”一无所知。

We may overcome this problem in a few ways. The first that came to my mind was to advise =yank= instead. This is probably not a bad idea, although there is one problem with it: what about other yanking commands? There aren't many of them in stock Emacs, and I don't care for yanking rectangles a lot (although my advice will break it, since =yank-rectangle= calls =insert-for-yank= repeatedly for each line), but there are at least =yank-pop= and mouse yanking commands. Since I don't yank rectangles very often (although I happen to use =delete-rectangle= every now and again), I am willing to pay the price.
翻译:我们可以通过几种方式解决这个问题。我首先想到的建议是使用=yank=（粘贴）。这可能不是一个坏主意，尽管它有一个问题：那其他的粘贴命令怎么办呢？在库存Emacs中粘贴命令并不多，我不太喜欢用矩形粘贴（虽然我的建议会破坏它，因为=yank-rectangle=会对每一行重复调用=insert-for-yank=），但至少有=yank-pop=和鼠标粘贴命令。由于我不经常使用矩形粘贴（尽管偶尔我会用到=delete-rectangle=），我愿意为此付出代价。
我们可以用几种方法来克服这个问题。我首先想到的是advise =yank= instead。这可能不是一个坏主意，尽管它有一个问题:其他的猛拉命令呢?在股票Emacs中，这样的命令并不多，而且我也不太喜欢猛拉矩形(尽管我的建议会破坏它，因为=猛拉矩形=调用=插入-for-猛拉=每行重复执行)，但是至少有=猛拉-pop=和鼠标猛拉命令。因为我不经常使用矩形(尽管我偶尔会使用=delete-rectangle=)，所以我愿意为此付出代价。
翻译:我们可以用多种方法来解决这个难题。我最初的想法是尝试使用"yank="代替。这或许并不是一个坏的主意，尽管它存在一个问题：其他的"yank"命令怎么办？在标准的Emacs中，这类命令并不常见，而且我个人也不太偏好使用“yank”矩形（尽管我的建议可能会破坏这一点，因为“yank”矩形实际上调用了“insert-for-yank”，它会逐行重复执行），但至少我们有“yank-pop”和鼠标“yank”命令。由于我不常使用矩形（尽管我偶尔会用“delete-rectangle”），因此我愿意为这一改变做出妥协。

This leaves us with the problem of telling =insert-for-yank= about the prefix argument to the command that invoked it. Luckily for us, we don't have to do anything. There is already the [[http://mbork.pl/2017-07-09_current-prefix-arg][current-prefix-arg]] variable, which is global state, so blah, blah, you shouldn't use it, but really, who cares.
翻译:这个问题是关于告诉(insert-for-yank)=命令的派生前缀参数。幸运的是，我们不需要做任何事情。已经有[[http://mbork.pl/2017-07-09_current-prefix-arg][当前前缀参数]]变量了，它是全局状态，所以 blah, blah，你不应该使用它，但说真的，谁在乎呢。
这给我们留下了一个问题:告诉=insert-for-yank=调用它的命令的前缀参数。幸运的是，我们不需要做任何事。已经有了[[http://mbork。pl/2017-07-09_current-prefix-arg][current-prefix-arg]]变量，它是全局状态，所以，等等，你不应该使用它，但真的，谁在乎呢。
翻译:这个问题是关于如何传递参数给`call`函数。幸运的是，我们可以直接使用现有的`current-prefix-arg`变量来解决这个问题，这个变量已经存在于全局状态中。虽然我们不推荐这样做，但实际上也没有关系。

So here again is our advice.
翻译:再次给出我们的建议。
#+BEGIN_EXAMPLE
(defun set-point-before-yanking (string)
"Put point in the appropriate place before yanking STRING."
(unless (equal current-prefix-arg '(16))
(let ((space-in-yanked-string (has-space-at-boundary-p string))
(space-at-point (is-there-space-around-point-p)))
(cond ((and (eq space-in-yanked-string 'left)
(eq space-at-point 'left))
(skip-chars-backward "[:space:]"))
((and (eq space-in-yanked-string 'right)
(eq space-at-point 'right))
(skip-chars-forward "[:space:]"))))))
#+END_EXAMPLE

Now =C-u C-u C-y= inserts the last entry in the kill ring as is. This is still not ideal -- we cannot meaningfully pass =C-u C-u= to =yank-pop=, for instance -- but should work well enough. (Remember that in a pinch, you can always manually reinsert the spaces. This is not as bad as it sounds -- yanking puts the point and mark around the yanked stuff, although without activating the mark, so jumping to the other side of the yanked text is as simple as =C-u C-SPC= or =C-x C-x=.) Incidentally, this also fixes the problem with yanking rectangles -- if =yank-rectangle= behaves wrong (i.e., the yanked lines are not aligned because of our machinations), you can just undo it and say =C-u C-u C-x r y= -- it's cumbersome, but possible.
翻译:现在按下=C-u C-u C-y=会将最后的剪切板条目原样插入。这仍然不是理想的解决方案——例如，我们不能有意义地将=C-u C-u=传递给=yank-pop=——但应该足够好用。(记住，在紧急情况下，您总是可以手动重新输入空格。这并没有听起来那么糟糕——复制粘贴会移动光标和标记到被复制的文本周围，尽管不会激活标记，所以跳转到被复制文本的另一边就像按下=C-u C-SPC=或=C-x C-x=一样简单。)顺便说一下，这也解决了复制矩形的bug——如果=yank-rectangle=行为不正常(即由于我们的操作导致复制行的对齐出现问题)，您可以简单地撤销并说=C-u C-u C-x r y=——虽然麻烦，但可行。
现在=C-u C-u C-y=按原样插入终止环中的最后一项。这仍然不理想——例如，我们不能有意义地将=C-u C-u=传递给=yank-pop=，但是应该可以很好地工作。(记住，在紧急情况下，总是可以手动重新插入空格。这并没有听起来那么糟糕——虽然没有激活标记，但是在标记的周围加上点和标记，所以跳到标记的另一边就像=C-u C-SPC=或=C-x C-x=一样简单。)顺便说一句，这也修复了拉拽矩形的问题——如果=拉拽矩形=行为错误(即。你可以撤销它，然后说=C-u C-u C-x r y=——这很麻烦，但也是可能的。
翻译:当前 = 按 Ctrl+u Ctrl+u Ctrl+y 原样插入终止环中的最后一个项目。这仍然不是理想的解决方案 - 例如，我们不能有意识地使用 Ctrl+u Ctrl+u 传递给 yank-pop ，但是这应该能很好地运行。（记住，在紧急情况下，始终可以通过手动重新插入空格来解决问题。）顺便说一下，这也解决了拖动矩形的bug - 如果拖动矩形的行为出错（也就是说，你可以撤销它，然后输入 Ctrl+u Ctrl+u Ctrl+x r y —— 这有点麻烦，但却是可行的。）

Interestingly, there exists a completely different approach to the whole problem. There is a =yank-handler= property which you can put on a string passed to =insert-for-yank=, and it specifies a function that is called instead of =insert= when yanking text. So, we might just leave the yanking as it is, and make =kill-region= put this property on the text, with a “modified insert”. This approach looks promising, but I envision one problem: it won't support yanking texts from outside Emacs. For now, I'm staying with the above.
翻译:有趣的是，对于整个问题存在一种完全不同的方法。有一个=yank-handler=属性，你可以将其放在传递给=insert-for-yank=的字符串上，它指定了一个在复制文本时调用而不是=insert=的函数。因此，我们可能只需保留复制功能不变，让=kill-region=将此属性应用到文本上，使用“修改后的插入”。这种方法看起来很有前景，但我预见到一个问题：它不支持从Emacs外部复制文本。目前，我仍采用上述方法。
有趣的是，有一个完全不同的方法来解决整个问题。有一个=yank-handler=属性，您可以将其放在传递给=insert-for-yank=的字符串上，它指定了一个函数，在对文本进行猛拉时调用该函数而不是=insert=。因此，我们可能只需要保持拉拽的原样，并使用“修改后的插入”使=kill-region=将此属性放在文本上。这种方法看起来很有前途，但我认为有一个问题:它不支持从Emacs外部删除文本。就目前而言，我仍坚持上述观点。
翻译:有趣的另一种方法是解决整个问题。有一个=yank-handler=属性，您可以将它放在传递给=insert-for-yank=的字符串上，它指定了一个函数，在对文本进行猛拉时调用该函数而不是=insert=。因此，我们可能只需要保留拖拽的原始状态，并通过“修改后的插入”功能使=kill-region=将此属性放置在文本上。这种方法看起来很有前景，但我觉得存在一个问题：它不支持从Emacs外部删除文本。就目前的情况来看，我还是坚持我之前的观点。
