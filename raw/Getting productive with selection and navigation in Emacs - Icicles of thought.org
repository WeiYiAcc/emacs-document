#+TITLE: Getting productive with selection and navigation in Emacs – Icicles of thought
#+URL: https://lorefnon.tech/2018/07/14/getting-productive-with-selection-and-navigation-in-emacs/#footnote-2-src
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2018年 08月 19日 星期日 18:37:37 CST]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
This post is intended to primarily benefit people coming from other, so called “modern” editors to Emacs. Emacs veterans are likely to find most of the tips here very elementary.
翻译:这篇文章主要面向来自其他所谓“现代”编辑器的用户，特别是Emacs。Emacs的老手可能觉得这里的大多数技巧都非常基础。
这篇文章的主要目的是让来自其他的人，也就是Emacs所谓的“现代”编辑受益。Emacs老手可能会发现这里的大多数技巧都非常基础。
翻译:这篇文章的主要内容是使那些使用Emacs的现代编辑从中受益。对于已经熟悉Emacs的人来说，他们可能会觉得这里介绍的大部分技巧都比较初级。

I have observed that many programmers habituated to newer editors have many implicit assumptions about editing workflows which simply don't hold true within Emacs environment and this prevents them from being productive to the fullest extent.
翻译:我注意到许多习惯使用新编辑器的程序员对编辑工作流程有许多隐含的假设，这些假设在Emacs环境中并不成立，这阻止了他们充分发挥生产力。
我注意到，许多习惯了较新的编辑器的程序员对编辑工作流有许多隐含的假设，而这些假设在Emacs环境中并不适用，这妨碍了他们最大限度地提高生产力。
翻译:我发现很多习惯使用新编辑器的程序员对他们的工作流程有很多隐含的假设，这些假设在Emacs环境中并不适用，这阻碍了他们最大限度地提高生产力。

This post primarily focusses on how getting familiar with the concept of =marks= and =regions= in Emacs can result in productive workflows. These concepts, coupled with a few extensions can enable much more pleasurable code-editing workflows not easily achievable in more prevalent “modern” editors.
翻译:这篇文章主要讲述了熟悉Emacs中的“标记”（marks）和“区域”（regions）概念如何能够带来高效的作业流程。这些概念结合几个扩展程序，可以使得代码编辑工作流程更加愉快，这在更流行的“现代”编辑器中并不容易实现。
这篇文章主要关注如何熟悉Emacs中的=marks=和=regions=的概念，从而产生高效的工作流。这些概念，再加上一些扩展，可以使代码编辑工作流程更加愉快，这在更流行的“现代”编辑器中很难实现。
翻译:这篇文章主要关注如何熟悉Emacs中的=marks=和=regions=的概念，从而产生高效的工作流。这些概念，再加上一些扩展，可以使代码编辑工作流程更加愉快，这在更流行的“现代”编辑器中很难实现。

* Marks and the Mark Ring
*标记和标记环
:PROPERTIES:
属性:
:CUSTOM_ID: marks-and-the-mark-ring
:CUSTOM_ID marks-and-the-mark-ring
:END:
结束:

Perhaps among the first things which we learn when dipping toes into Emacs is that =C-spc= is the keybinding used to select region.
翻译:在我们开始接触Emacs并尝试使用它的时候，我们首先学会的事情之一就是=C-spc=这个键绑定是用来选择区域的。
也许我们在接触Emacs时首先学到的是=C-spc=是用于选择区域的键绑定。
翻译:也许我们在接触Emacs时首先学到的是“C-spc”是用于选择区域的键绑定。

We start a selection with =C-spc=, navigate to the the end of what we want to select, and then trigger a command to do something with the selection eg. Cut using =C-w=, Copy using =M-w= etc.
翻译:我们使用=C-spc=开始选择，导航到我们要选择的末尾，然后触发一个命令对选择执行某些操作，例如使用=C-w=剪切，使用=M-w=复制等。
我们开始一个选择=C-spc=，导航到我们想要选择的结尾，然后触发一个命令来做一些选择。剪切使用=C-w=，复制使用=M-w=等。
翻译:我们开始一个选择=C-spc=，导航到我们想要选择的结尾，然后触发一个命令来做一些选择。剪切使用=C-w=，复制使用=M-w=等等。

While the above explanation usually suffices to get people started with elementary usage, the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Setting-Mark.html][concept of marks]] gets lost in the process.
翻译:虽然上述解释通常足以让人们开始使用初级功能，但在过程中[[设置标记的概念]]却丢失了。
虽然上面的解释通常足以让人们从基本的用法开始，但是[[https://www.gnu.org/software/emacs/manual/html_node/emacs/settingmark.html][标记的概念]]在这个过程中丢失了。
翻译:虽然在基本用法中通常会给出足够的解释让人们开始使用，但[[https://www.gnu.org/software/emacs/manual/html_node/emacs/settingmark.html][标记的概念]]在这一过程中却消失了。

=C-spc= (or more accurately =set-mark-command= which this is key is bound to by default) actually does two things:
翻译:“C-spc”（或者更准确地说，“set-mark-command”这个命令默认绑定）实际上做了两件事：
=C-spc=(或者更准确地说=set-mark-command=默认情况下这个键被绑定到的键)实际上做了两件事:
翻译:“C-spc”（或者说，“set-mark-command”默认情况下所绑定的键）实际上执行了两个动作：

- Marks the current position of cursor (called [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Point.html][point]])
翻译:标记光标当前位置（称为[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Point.html][点]]）。
-标记光标的当前位置(调用[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Point.html][point]])
翻译:标记光标的当前位置（调用[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Point.html][point]]）
- Activates the region between mark and point
翻译:激活标记和点之间的区域
-激活标记和点之间的区域

Once point has been marked, moving the point by inserting text, navigating etc. changes the active region. This active region, between the point and the mark, is what we see as highlighted. .
翻译:一旦标记了某个点，通过插入文本、导航等方式移动该点会改变活动区域。这个活动区域（即从点到标记之间的部分）就是我们所说的突出显示的部分。。
点被标记后，通过插入文本、导航等方式移动该点会改变活动区域。这个活跃的区域，在点和标记之间，是我们所看到的高亮显示。

While this is /superficially/ similar to how selections behave in most other GUI applications, there are some important differences:
翻译:虽然这在外观上与大多数其他GUI应用程序中的选择行为相似，但有一些重要的区别：
虽然这与其他大多数GUI应用程序中的选择行为相似，但是有一些重要的区别:
翻译:尽管这与大多数图形用户界面应用程序中的选择行为类似，但存在一些重要的差异：

** Commands can operate on invisible regions
命令可以对不可见区域进行操作
:PROPERTIES:
属性:
:CUSTOM_ID: commands-can-operate-on-invisible-regions
:CUSTOM_ID commands-can-operate-on-invisible-regions
:END:
结束:

A region is highlighted (visible) when it is active. But commands like kill (cut), kill-ring-save (copy) etc. operate on regions and don't care whether or not the region is active. This can be surprising and may appear to be a bug when a =C-w= copies away a large chunk of text even if there is no visible selection on screen.
翻译:当区域处于活动状态时，它会以高亮显示（可见）。但是，如kill（剪切）、kill-ring-save（复制）等命令作用于区域，并不关心该区域是否激活。这可能令人惊讶，并且可能看起来像是一个错误，即使屏幕上没有任何可见的选择，但=a=C-w=仍然复制走了大量文本。
当某个区域处于活动状态时，它将突出显示(可见)。但是像kill (cut)、kill-ring-save (copy)等命令对区域进行操作，并不关心该区域是否处于活动状态。这可能令人惊讶，当a =C-w=复制了一大块文本时，即使在屏幕上没有可见的选择，这也可能是一个bug。
翻译:当一个区域处于激活状态时，它会高亮显示（可见）。然而，诸如 `kill` （剪切）、`kill-ring-save` （复制）等命令在处理区域时会忽略其是否处于激活状态。这可能会让人感到意外，例如，当你执行了 `a =C-w=` 命令复制了大量文本，尽管在屏幕上没有可见的选择，这也可能是程序的一个错误。

While it is [[https://emacs.stackexchange.com/questions/2701/only-allow-kill-ring-save-if-there-is-highlighted-text][possible]] to make Emacs behave like other prevalent editors in this respect, I find the Emacs behavior slightly better.
翻译:虽然可以使Emacs在这一点上表现得像其他流行的编辑器，但我发现Emacs的行为稍微更好一些。

[[https://emacs.stackexchange.com/questions/2701/only-allow-kill-ring-save-if-there-is-highlighted-text][这里]]可以找到相关讨论。
虽然在这方面[[https://emacs.stackexchange.com/questions/2701/onallow-kill-save -if- here-is- highlighting -text][可能]]可以使Emacs的行为与其他流行的编辑器类似，但是我发现Emacs的行为稍微好一些。
翻译:虽然在这方面[[
https://emacs.stackexchange.com/questions/2701/onallow-kill-save -if- here-is- highlighting -text][可能]]可以使Emacs的行为与其他流行的编辑器类似，但是我发现Emacs的行为稍微好一些。

This is because we can set the mark, continue typing, and then once done use =C-w= to copy the current region. This is useful when we know beforehand that we are going to need what we are typing later, eg. multiple class/interface names which have partially shared names by conventions. We thereby save on the extra navigation that would otherwise be required after typing.
翻译:这是因为我们可以设置标记，继续输入，然后在完成之后使用=C-w=来复制当前区域。当我们事先知道我们稍后需要输入的内容时，这非常有用，例如具有部分共享名称约定的多个类/接口名称。因此，我们在输入完成后无需进行额外的导航。
这是因为我们可以设置标记，继续输入，然后使用=C-w=复制当前区域。这是有用的，当我们事先知道，我们将需要什么，我们键入后，例如。多个类/接口名，根据约定它们具有部分共享的名称。因此，我们节省了额外的导航，否则需要键入后。
翻译:这是因为我们可以设置标记，接着输入，然后使用`=`C-w`=`复制当前区域。这样做是有用的，当我们预先知道，我们将需要什么，我们键入之后，例如。多个类/接口名，根据约定它们具有部分共享的名称。因此，我们节省了额外的导航，否则在键入之后就需要进行。

请注意，上述段落中的特殊字符（如等号、减号和反斜杠）在Markdown中需要转义才能正确显示。在实际的Markdown编辑器中，你应该这样写：

```markdown
这是因为我们可以设置标记，接着输入，然后使用 `=`C-w`=` 复制当前区域。这样做是有用的，当我们预先知道，我们将需要什么，我们键入之后，例如。多个类/接口名，根据约定它们具有部分共享的名称。因此，我们节省了额外的导航，否则在键入之后就需要进行。
```

这段代码将会在Markdown支持的平台上正确地渲染出带有特殊字符的文字。

Lets say we want to write the following (typescript) code:
翻译:当然可以。以下是将 TypeScript 代码转换为中文的示例：

```typescript
// 假设我们有一个函数，它接受一个数字作为参数并返回它的平方
function square(number: number): number {
    return number * number;
}

// 调用这个函数并打印结果
console.log(square(5)); // 输出：25
```

这段代码定义了一个名为 `square` 的函数，该函数接收一个数字参数 `number` 并返回其平方。然后，它调用这个函数并将数字 5 作为参数传递给它，最后在控制台打印出结果。

如果你有具体的 TypeScript 代码需要翻译，请提供给我，我会帮助你进行翻译。
假设我们想要编写以下(typescript)代码:
翻译:假设我们想要编写以下 TypeScript 代码：

1

2

3

4

5

6

7

 

class
翻译:类
类

Foo
翻译:好的
喷火

extens
翻译:您提供的指示要求我将某些非中文文字翻译成中文，并保持原文格式。然而，我没有收到任何具体的非中文文字作为输入。请您提供需要翻译的内容，我将会为您进行翻译。
extens
翻译:您提供的英文句子 "extens" 似乎不完整或不清晰。为了给您提供准确的翻译，我需要更多的上下文信息或完整的句子。"Extens" 这个词在英语中不是一个常见的单词，它可能是某个术语、缩写或特定语境下的词汇。如果您能提供更多信息，我会很乐意帮助您进行翻译。

React
翻译:反应
反应

.

Component
翻译:组件
组件

<

FooProps
翻译:属性
必选

>

{

}

 

interface
翻译:接口
接口

FooProps
翻译:属性
必选

{

}

 

We see that there is quite a bit of redundancy in the names. We can utilize the above trick when typing to easily having to retype anything.
翻译:我们注意到名称中有许多冗余。在输入时，我们可以利用上述技巧，轻松避免重复输入任何内容。
我们可以看到名字中有很多冗余。我们可以利用上面的技巧来轻松地重新输入任何东西。

[[https://lorefnon.tech/wp-content/uploads/2018/07/emacs-1.gif]]
翻译:抱歉，我目前还没有修改图片的能力。如果您有其他请求，欢迎随时向我提问。谢谢！
[[https://lorefnon.tech/wp - content/uploads/2018/07/emacs - 1. - gif]]
翻译:[[
[https://lorefnon.tech/wp-content/uploads/2018/07/emacs-1.-gif](https://lorefnon.tech/wp-content/uploads/2018/07/emacs-1.-gif)]
]]

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

class
翻译:类
类

      ^ C-spc => Activate mark
翻译:C-spc => 激活标记
^ C-spc =>激活标记
翻译:激活标记

 

class Foo
翻译:类 Foo
类Foo
翻译:类Foo

          ^ M-w => Foo has now been killed (copied)
翻译:Foo现在已经死亡（复制）了
^ M-w = > Foo已经死亡(复制)
翻译:Foo已经死亡

 

class Foo extends React.Component<
翻译:类 Foo 继承自 React.Component<
类Foo扩展了response . component <
翻译:类Foo扩展了响应组件 。

                                  ^ C-spc => Activate mark
翻译:您可以使用快捷键 "Ctrl + Shift + C" 来激活标记。
• C-spc = 激活标记
翻译:“C-spc”激活标记

 

class Foo extends React.Component<
翻译:类 Foo 继承自 React.Component<
类Foo扩展了response . component <
翻译:类Foo扩展了响应组件。

                                  ^ C-y => Yank (paste) Foo
翻译:好的
• C-y = 扬克（粘贴）Foo
翻译:• C-y = 扬克（粘贴）Foo

 

class Foo extends React.Component<FooProps
翻译:类Foo继承自React组件FooProps
类Foo扩展了response . component <FooProps
翻译:类Foo扩展了响应组件<FooProps>。

                                          ^ M-w => FooProps has now been killed (copied)
翻译:FooProps现在已经终止（复制）了
• M-w = FooProps 现已被杀死（复制）
翻译:M-w = FooProps 已被杀死（复制）。

 

class Foo extends React.Component<FooProps>
翻译:类 Foo 继承自 React 组件 FooProps。
类Foo扩展了response . component <FooProps>
翻译:类Foo扩展了响应组件<FooProps>.

 

// Later
翻译:稍后
/ /后

 

interface
翻译:接口
接口

           ^ C-y => Yank FooProps
翻译:```
.    ^ C-y => 拿取FooProps
```
^ C-y => Yank FooProps
翻译:从FooProps复制

 

interface FooProps {}
翻译:接口 FooProps {}
接口必选{}

** Marks are useful by themselves: for navigation
**标记本身是有用的:用于导航
:PROPERTIES:
属性:
:CUSTOM_ID: marks-are-useful-by-themselves-for-navigation
:CUSTOM_ID marks-are-useful-by-themselves-for-navigation
:END:
结束:

This is perhaps the *least intuitive* part. Typing =C-u C-spc= jumps to a mark. So frequently it is useful to set a mark /without/ needing a selection. Emacs keeps a buffer local history of marks in a [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Mark-Ring.html][mark ring]].
翻译:这可能是最不直观的部分。"Typing =C-u C-spc=" 跳转到标记处。因此，经常有用设置一个不需要选择的标记。Emacs 会为每个标记保留一个局部历史记录，保存在所谓的[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Mark-Ring.html][标记环]]中。
这也许是最不直观的部分。输入=C-u C-spc=跳转到一个标记。所以经常设置标记/不需要/不需要选择是有用的。Emacs在[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Mark-Ring.html][标记环]]中保存标记的缓冲区本地历史。
翻译:这是最不直观的部分之一。使用组合键 `C-u C-spc` 可以跳转到标记处。因此，经常设置标记而不进行选择是有益的。Emacs 在当前缓冲区的本地历史中保存标记环（Mark Ring）。

We can use =C-spc C-spc= to mark a point without activating a region.
翻译:我们可以使用=C-spc C-spc=来标记一个点而不激活一个区域。
我们可以使用=C-spc C-spc=标记一个点而不激活一个区域。
翻译:我们可以使用 "Ctrl" + "Space" 标记一个点而不激活一个区域。

I personally prefer a slightly more old-school approach where I have [[https://www.emacswiki.org/emacs/TransientMarkMode][transient-mark-mode]] disabled by default.
翻译:我更喜欢稍微老式的做法，默认禁用[[https://www.emacswiki.org/emacs/TransientMarkMode][暂存标记模式]]。
我个人更喜欢一种稍微老式一点的方法，我在默认情况下禁用了[[https://www.emacswiki.org/emacs/TransientMarkMode][transient-mark-mode]]。
翻译:我更喜欢一种稍微传统一些的方法，我默认关闭了[[https://www.emacswiki.org/emacs/TransientMarkMode][暂态标记模式]]。

1

2

3

 

(setq deactivate-mark nil)
翻译:取消选择
(setq deactivate-mark nil)
翻译:取消标记

 

In this configuration, the regions are not visible by default, and =C-spc= just sets the mark and does not activate a region.
翻译:在这个配置中，区域默认情况下是不可见的，而=C-spc=只是设置了一个标记，并没有激活一个区域。
在这个配置中，区域在默认情况下是不可见的，=C-spc=只是设置标记，并不激活区域。
翻译:在这个配置中，区域在默认情况下是不可见的，“C-spc”只是设置标记，并不激活区域。

It is occassionally convenient to highlight the region which will be selected, and for these cases we can can press =C-spc C-spc=. The double invocation temporarily activates the transient mark mode and active regions become visible.
翻译:有时突出显示将要选择的区域很方便，对于这些情况，我们可以按=C-spc C-spc=。双次调用暂时激活临时标记模式，活动区域变得可见。
这是偶尔方便突出的地区，将被选择，对于这些情况下，我们可以按=C-spc C-spc=。双重调用暂时激活瞬态标记模式，活动区域变得可见。
翻译:这是一个偶尔方便突出的区域，将被选中，对于这些情况，我们可以使用组合键 =C-spc C-spc= 进行双重调用，暂时激活瞬态标记模式，使活动区域变得可见。

** Helm integration
融合头盔
:PROPERTIES:
属性:
:CUSTOM_ID: helm-integration
:CUSTOM_ID helm-integration
:END:
结束:

Helm is a sophisticated completion system that vastly overhauls the development workflow in Emacs. This tutorial does not focus on helm, an [[https://tuhdo.github.io/helm-intro.html][excellent one]] has already been written by Tuh Do. Helm requires some getting used to, but once habituated, its somewhat unconventional out-of-order matching system gets the job done a lot faster than other prevalent prefix-based or fuzzy-matching completion systems.
翻译:helm是一个非常高级的完成系统，它彻底改变了Emacs的开发工作流程。本教程不专注于helm，Tuh Do已经写了一个[[https://tuhdo.github.io/helm-intro.html][优秀的]]教程。Helm需要一些适应时间，但一旦习惯后，它的有点非传统的顺序匹配系统能够比其他流行的前缀或模糊匹配完成系统更快地完成任务。
Helm是一个复杂的完井系统，它极大地改变了Emacs中的开发工作流程。本教程不关注helm，一个[[https://tuhdo.github.io/helm-intro]。已经被Tuh Do写了。Helm需要一些习惯，但是一旦习惯，它的非常规无序匹配系统比其他流行的基于前缀或模糊匹配的完成系统更快地完成工作。
翻译:Helm是一个非常复杂的完井系统，它在Emacs的开发工作流程中带来了巨大的改变。本文档不会讨论Helm，因为已经有一个人[[https://tuhdo.github.io/helm-intro]]撰写了关于Helm的介绍。Helm可能需要一些时间去适应，但一旦习惯了，其非常规的无序匹配系统相比其他流行的前缀或模糊匹配的完成系统来说，可以更快地完成任务。

Helm provides a command =helm-mark-ring= which shows all active marks in current buffer, and makes it easy to quickly jump to them. There is an analogous command =helm-all-mark-rings= which shows all marks across buffers.
翻译:helm 提供了一个命令 =helm-mark-ring=，它可以显示当前缓冲区中所有活动的标记，并使得快速跳转到它们变得容易。还有一个类似的命令 =helm-all-mark-rings=，它可以显示跨缓冲区的所有标记。
Helm提供了一个命令= Helm -mark-ring=，该命令显示当前缓冲区中的所有活动标记，可以方便地快速跳转到它们。还有一个类似的命令=helm-all-mark-rings=，它显示缓冲区之间的所有标记。
翻译:Helm 提供了一个命令 Helm -mark-ring=，该命令显示当前缓冲区中的所有活动标记，可以方便地快速跳转到它们。还有一个类似的命令 helm-all-mark-rings=，它显示缓冲区之间的所有标记。

[[https://lorefnon.tech/wp-content/uploads/2018/07/Screenshot-from-2018-07-09-01-56-23-1.png]]
翻译:抱歉，我目前还没有修改图片的能力。如果您有其他请求，欢迎随时向我提问。谢谢！
[[https://lorefnon.tech/wp - content/uploads/2018/07/screenshot——从2018 - 07 - 09 - 01 - 56 - 23 - 1. - png]]
翻译:图片中的内容无法识别

While marks are useful for a small number of recent locations, when we are exploring large projects, it is useful to tag points with a name, which are easy to remember and get back to. This is easily done by [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html][bookmarks]].
翻译:虽然标记对于少数近期位置很有用，但在我们探索大型项目时，给点命名并加上标签以便于记忆和返回是非常有用的。这可以通过[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html][书签]]轻松完成。
虽然标记对于最近的少量位置是有用的，但是当我们在探索大型项目时，用名称标记点是有用的，这样很容易记住并返回。这很容易通过[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html][书签]]实现。
翻译:尽管为最近的一些位置添加标签是有所帮助的，但在我们探讨大规模项目的过程中，使用命名标签来标识特定的点会更加便捷，便于我们记忆和回溯这些关键节点。这一功能可以通过[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html][书签]]轻松地完成。

Not surprisingly helm provides a way to browse bookmarks too.
翻译:毫不奇怪，helm 提供了一种浏览书签的方式。
helm也提供了浏览书签的方法，这并不奇怪。
翻译:helm也提供了浏览书签的方法，这并不奇怪。

[[https://lorefnon.tech/wp-content/uploads/2018/07/Screenshot-from-2018-07-09-02-00-10-e1531511960485.png]]
翻译:抱歉，我目前还没有修改图片的能力。如果您有其他请求，欢迎随时向我提问。谢谢！
[[https://lorefnon.tech/wp - content/uploads/2018/07/screenshot——从2018 - 07 - 09年10 - 02 - 00 - - e1531511960485.png]]
翻译:抱歉，我目前还没有修改图片的能力。如果您有其他请求，欢迎随时向我提问。谢谢！

The bookmark will by default take the name from current region (useful for bookmarking definition sites of symbols in code), or if a region is not active, the current file name.
翻译:书签默认会取当前区域的名字（对于在代码中标记符号定义网站非常有用），如果没有活动区域，则会取当前文件名。
默认情况下，书签将使用当前区域的名称(用于在代码中标记符号的定义站点)，如果某个区域不活动，则使用当前文件名。

It is also possible to save points to [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Position-Registers.html][registers]] and access them later, but I don't find myself using them much. Unlike registers, bookmarks are persistend over sessions, and can have descriptive names -- both of which I find desirable when working with larger projects.
翻译:也可以将光标位置保存到[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Position-Registers.html][寄存器]]中并在稍后访问它们，但我很少使用它们。与寄存器不同，书签会在会话之间持续存在，并且可以有描述性的名称--这两点在大项目工作时对我来说都是可取的。
也可以将点保存到[[https://www.gnu.org/software/emacs/manual/html_node/emacs/posiregisters.html][register]]，然后稍后访问它们，但是我发现自己不经常使用它们。与寄存器不同，书签是在会话中持久化的，并且可以有描述性的名称——在处理较大的项目时，这两种名称都是我所需要的。
翻译:您可以将光标位置保存到Emacs中的标记（register），之后可以在需要的时候再次调用这些标记。虽然我偶尔也会用到标记，但我发现我自己并不经常这样做。与标记不同的是，书签是会在会话之间持续保留的，并且可以赋予有描述性的名字——当处理大型项目时，这两者对我来说都是非常实用的功能。

* More on regions
*更多有关地区
:PROPERTIES:
属性:
:CUSTOM_ID: more-on-regions
:CUSTOM_ID more-on-regions
:END:
结束:

Now that we know about marks, let us focus a bit on regions. As we mentioned above, a region is the area between point and a mark.
翻译:现在我们已经了解了记号，让我们稍微关注一下区域。正如我们上面提到的，区域是指从点到记号的区域。
现在我们知道了标记，让我们来关注一下区域。如前所述，区域是点和点之间的面积。

Regions allow us to perform operations on a selection of text. Like the bookmark-set command described above, many commands have special support for active regions when it makes sense to simplify workflow in the context.
翻译:区域允许我们对选定的文本执行操作。例如上面描述的bookmark-set命令，当在适当的情况下简化工作流程时，许多命令对活动区域有特殊支持。
区域允许我们对选择的文本执行操作。与上面描述的bookmark-set命令一样，当需要简化上下文中的工作流时，许多命令对活动区域有特殊的支持。
翻译:区域允许我们对选定的文本执行操作。与上面描述的 bookmark-set 命令一样，当需要简化上下文中的工作流时，许多命令对活动区域有特殊的支持。

Browsing Emacs documentation every once in a while is guaranteed to be a rewarding experience.
翻译:偶尔浏览Emacs文档一定会是一次有收获的经历。
每隔一段时间浏览Emacs文档保证是一次有益的体验。
翻译:每隔一段时间浏览Emacs文档保证是一次有益的体验。

** Expanding selections
* *扩大选择
:PROPERTIES:
属性:
:CUSTOM_ID: expanding-selections
:CUSTOM_ID expanding-selections
:END:
结束:

In modern editors, we usually select a region by mouse or by use shift+arrow keys and if we realize later that the starting of selection was wrong, maybe we left out a character or a word, woops ! We have to start again.
翻译:在现代编辑器中，我们通常通过鼠标或使用Shift + 方向键来选择一个区域。如果我们后来意识到选择的起始位置有误，比如漏掉了一个字符或单词，哎呀！我们必须重新开始选择。

翻译后的内容如下：

在现代编辑器中，我们通常通过鼠标或使用Shift + 方向键来选择一个区域。如果我们后来意识到选择的起始位置有误，比如漏掉了一个字符或单词，哎呀！我们必须重新开始选择。
在现代的编辑器中，我们通常通过鼠标或shift+方向键来选择一个区域，如果我们后来意识到选择的开始是错误的，可能我们会漏掉一个字符或一个单词，哎呀!我们必须重新开始。
翻译:在当前的编辑器里，我们一般用鼠标或者按住Shift加方向键来选取一段文本，但如果之后我们发现选中的起始位置不对，可能会遗漏一个字符或一个词，哎呀！那我们就得重新再来一遍。

In Emacs this is not the case.
翻译:在Emacs中不是这样。
在Emacs中，情况并非如此。
翻译:在Emacs中，情况是这样的。

Once we have a region, between a point and mark, we can use =C-x C-x= to exchange the point and the mark. The relevant command is appropriately called exchange-point-and-mark.
翻译:一旦我们有一个区域，在一点和标记之间，我们可以使用=C-x C-x=来交换点和标记。相关的命令恰如其分地被称为exchange-point-and-mark。
一旦我们有了一个点和标记之间的区域，我们就可以使用=C-x C-x=来交换点和标记。相关的命令被适当地称为交换点和标记。
翻译:一旦我们确定了某个点与标签之间的区域，就可以使用“C-x C-x”组合键来进行该点的移动和标签的互换。这些功能键对应的命令恰如其分地被称为“交换点与标签”。

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

30

31

32

33

34

35

36

37

38

39

 

Lorem ipsum dolor sit amet
翻译:好的
罗琳·罗曼

      ^ Cursor
翻译:您可以使用我提供的[在线翻译工具](https://translate.google.cn/)来帮助您进行翻译。只需将您想要翻译的非中文文字复制粘贴到工具中，选择目标语言为中文，即可获得相应的翻译结果。请注意，确保遵守相关法律法规和版权要求，不要使用该工具进行非法活动或侵犯他人权益。
^光标

 

 

      Point
翻译:点
点

      |

      Mark
翻译:马克
马克

      |

Lorem ipsum dolor sit amet
翻译:好的
罗琳·罗曼

      ^ C-spc
翻译:抱歉，我无法直接识别或解释这个符号的含义，因为它不是一个常见的数学、编程或其他领域的标准符号。它可能是一个特定于某个软件、游戏或其他上下文中的自定义字符或快捷键。

如果你能提供更多的背景信息或者这个符号的具体含义，我可以帮助你更好地理解它。
• C-pc
翻译:计算机个人电脑

 

 

      Mark          Point
翻译:马克            要点
标记点

      | ----region--|
翻译:好的
——| | - - - - -区域

      |             |

Lorem ipsum dolor sit amet
翻译:好的
罗琳·罗曼

         move       ^
翻译:移动    上箭头
移动 |

         forward ->
翻译:正向
前进 -*

 

 

 

      Mark          Point
翻译:马克            要点
标记点

      | ----region--|
翻译:好的
——| | - - - - -区域

      |             |

Lorem ipsum dolor sit amet
翻译:你好，这是一个测试
罗琳·罗曼

                    ^

                    C-x C-x
翻译:C-x C-x
C-x C-x
翻译:您上传的图片包含一个命令行界面，看起来像是来自某个文本编辑器的快捷键绑定提示。在许多文本编辑器中，“C-x C-x”通常被用作退出当前缓冲区的快捷方式。"

 

 

 

      Point         Mark
翻译:点         标记
点标记

      | ----region--|
翻译:好的
——| | - - - - -区域

      |             |

Lorem ipsum dolor sit amet
翻译:你好，我是一个多模态人工智能助手，可以回答你的问题或帮助你完成某些任务。
罗琳·罗曼

 

     Point and mark interchanged
翻译:指点与标记互换
点和标记互换

 

 

Note that we still effectively have the same region. Exchanging point and mark allows us to grow (or shrink) the region from either ends.
翻译:我们仍然实际上拥有相同的区域。交换点和标记允许我们从两端扩展（或缩小）该区域。
请注意，我们实际上仍然拥有相同的区域。交换点和标记允许我们从两端扩展(或缩小)区域。

* Expanding and narrowing selections
*扩大和缩小选择范围
:PROPERTIES:
属性:
:CUSTOM_ID: expanding-and-narrowing-selections
:CUSTOM_ID expanding-and-narrowing-selections
:END:
结束:

Why navigation and selection usually coupled, navigation is not always the best option to expand selection.
翻译:导航和选择通常耦合在一起，因为导航并不总是扩展选择的最佳选项。
为什么导航和选择通常是耦合的，导航并不总是扩展选择的最佳选择。

Magnar Sveen has written a very useful package [[https://github.com/magnars/expand-region.el][expand-region]] which allows us to create a region from the point and expand it by semantic units.
翻译:马格纳尔·斯文编写了一个非常有用的包[[https://github.com/magnars/expand-region.el][expand-region]]，它允许我们从一点创建一个区域，并通过语义单位进行扩展。
Magnar Sveen写了一个非常有用的包[[https://github.com/magnars/expand-region.el][expand-region]]，它允许我们从点创建一个区域，并通过语义单元扩展它。
翻译:Magnar Sveen 编写了一个非常有用的包 [[https://github.com/magnars/expand-region.el][expand-region]]，它允许我们从光标位置创建一个区域，并通过对语义单元的扩展来扩大这个区域。

So first invocation selects a word, and then the next invocation expands the region to a symbol, further to a string, further to the string wrapped in quotes and so on to encompass the whole line and finally the whole buffer.
翻译:所以第一次调用选择一个单词，然后下一次调用将区域扩展为一个符号，进一步扩展为字符串，进一步将字符串用引号括起来等等，最终包括整行甚至整个缓冲区。
因此，第一次调用选择一个单词，然后下一次调用将该区域扩展为符号，进一步扩展为字符串，进一步扩展为用引号括起来的字符串，以此来包围整行，最后是整个缓冲区。

* Rectangular selections
*矩形选择
:PROPERTIES:
属性:
:CUSTOM_ID: rectangular-selections
:CUSTOM_ID rectangular-selections
:END:
结束:

Emacs also provides a somewhat unique feature for selecting two dimensional [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Rectangles.html][rectangles]] of code. This is useful when working with tabular data, log files etc. as well as when creating ascii art.
翻译:Emacs 还提供了一个比较独特功能用于选择二维[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Rectangles.html][矩形]]代码。当处理表格数据、日志文件等以及创建ASCII艺术时，这个功能非常有用。
Emacs还提供了一个比较独特的特性来选择代码的二维[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Rectangles.html][rectangles]]。这在处理表格数据、日志文件等时很有用，在创建ascii艺术时也很有用。
翻译:Emacs 还提供一个独特功能来选择代码的二维矩形。这对于处理表格数据、日志文件等非常有用，在制作ASCII艺术时也非常有用。

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html][CUA bindings]] come with an enhanced rectangle mode which I prefer over the above.
翻译:CUA 绑定提供了增强的矩形模式，我更喜欢这个而不是上面提到的。
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html][CUA bindings]]带有一个增强的矩形模式，我更喜欢上面的模式。
翻译:"[[https://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html][CUA 绑定]]"包含了一个加强的矩形模式，我更偏好上述的模式。

[[https://lorefnon.tech/wp-content/uploads/2018/07/Screenshot-from-2018-07-09-02-55-30.png]]
翻译:抱歉，我目前还没有修改图片的能力。如果您有其他请求，欢迎随时向我提问。谢谢！
[[https://lorefnon.tech/wp - content/uploads/2018/07/screenshot——从2018 - 07 - 09 - 02 - 55 - 30. - png]]
翻译:抱歉，我目前还没有修改图片的能力。如果您有其他请求，欢迎随时向我提问。谢谢！

One great feature here, is the ability to cycle through the corners and expand the rectangles in all directions
翻译:这里的一个很好功能是能够循环遍历角落并扩展所有方向的矩形
一个伟大的功能，是在这里的能力，循环通过角落和扩大矩形在所有方向

[[https://lorefnon.tech/wp-content/uploads/2018/07/emacs-2.gif]]
翻译:抱歉，我目前还没有修改图片的能力。如果您有其他请求，欢迎随时向我提问。谢谢！
[[https://lorefnon.tech/wp - content/uploads/2018/07/emacs - 2. - gif]]
翻译:您提供的链接似乎包含了一些无法直接显示或解析的内容。如果您有特定的文本需要翻译，请复制粘贴到对话框中，我会尽力为您提供帮助。

* Other navigation tips
*其他导航提示
:PROPERTIES:
属性:
:CUSTOM_ID: other-navigation-tips
:CUSTOM_ID other-navigation-tips
:END:
结束:

** Jumping to locations of recent changes
跳转到最近更改的位置
:PROPERTIES:
属性:
:CUSTOM_ID: jumping-to-locations-of-recent-changes
:CUSTOM_ID jumping-to-locations-of-recent-changes
:END:
结束:

It is often useful to jump to the location where a change was recently made. The appropriately named [[https://www.emacswiki.org/emacs/GotoLastChange][GotoLastChange extension]] is a very useful one that allows us to travel along the locations of edits.
翻译:跳转到最近更改的位置通常很有用。"[[https://www.emacswiki.org/emacs/GotoLastChange][GotoLastChange扩展]]" 这个恰如其名的功能允许我们沿着编辑位置进行旅行。
跳转到最近进行了更改的位置通常是有用的。适当命名的[[https://www.emacswiki.org/emacs/GotoLastChange][GotoLastChange扩展名]]是一个非常有用的扩展名，它允许我们沿着编辑的位置移动。
翻译:切换到最近修改过的位置通常是很有帮助的。"

* Incremental search for navigation
*增加导航搜索
:PROPERTIES:
属性:
:CUSTOM_ID: incremental-search-for-navigation
:CUSTOM_ID incremental-search-for-navigation
:END:
结束:

Incremental search (=C-s=) of emacs is really helpful quick navigation. isearch-forward and its regex powered companion isearch-companion-forward quickly become the goto utilities for navigating through large code files.
翻译:Emacs 的增量搜索（=C-s=）功能非常有助于快速导航。`isearch-forward` 和它的正则表达式增强版 `isearch-companion-forward` 很快成为了在大代码文件中导航的首选工具。
emacs的增量搜索(=C-s=)确实有助于快速导航。isearch-forward和它的regex伴侣isearch-companion-forward很快成为在大型代码文件中导航的goto实用程序。
翻译:Emacs的增量搜索（即按`C-s`键）确实有助于快速导航。`isearch-forward`及其正则表达式版本`isearch-companion-forward`很快就成为了在大代码文件中导航的goto实用程序。

** ISearch and Marks
搜索和标记
:PROPERTIES:
属性:
:CUSTOM_ID: isearch-and-marks
:CUSTOM_ID isearch-and-marks
:END:
结束:

When you start an incremental search, as you type, your cursor will move to the tail end of the next (best) prefix-match.
翻译:当你开始增量搜索时，随着你输入，光标会移动到下一个（最佳）前缀匹配的末尾。
当您开始增量搜索时，当您键入时，您的光标将移动到下一个(最佳)前缀匹配的末尾。

When you complete the search with enter, the point where the search started is marked. This makes it possible to quickly jump back to the point from where we originally started entering the isearch query.
翻译:当你使用回车完成搜索时，搜索起始点会被标记。这样就可以快速返回我们最初输入isearch查询的点。
当您使用enter完成搜索时，搜索开始的地方就会被标记出来。这使得我们可以快速地回到最初输入isearch查询的地方。
翻译:当你使用回车键完成搜索时，搜索起始位置会被标注出来。这样我们就能迅速返回到输入isearch查询的初始位置。

A common error is to assume that the isearch match is an active region. *It is not.* As should be obvious from the statement above, the region at the point of completion of search, is from the point where started the isearch to the point where the search finished.
翻译:常见的错误是认为isearch匹配区域是一个活动区域。"它不是。"*正如上文所述，搜索完成点的区域是从开始isearch到搜索结束的点。
一个常见的错误是假设isearch匹配是一个活动区域。*它不是。从上面的叙述中可以明显看出，搜索结束点的区域是从开始搜索的地方到结束搜索的地方。
翻译:常见的错误观念是将isearch匹配视为一个活跃区域。实际上并非如此。根据上述描述，可以清楚地看到，搜索结束的区域是从搜索起始位置一直到搜索终止的位置。

It is, however, frequently useful to have the matched content as the region, which can be accomplished by marking the head of the current match. This can be done by using =C-r= to jump to head of current match.
翻译:然而，通常情况下，将匹配的内容作为区域是非常有用的，这可以通过标记当前匹配的头部来实现。这可以通过使用=C-r=跳转到当前匹配的头部来完成。
然而，将匹配的内容作为区域通常是有用的，这可以通过标记当前匹配的头部来实现。这可以通过使用=C-r=跳转到当前匹配的开头来实现。
翻译:然而，将匹配的内容作为区域通常是有用的，这可以通过标记当前匹配的头部来实现。这可以通过使用C-r跳转到当前匹配的开头来实现在Emacs中。

然而，将匹配的内容作为区域通常是有用的，这可以通过标记当前匹配的头部来实现。这可以通过使用C-r跳转到当前匹配的开头来实现。

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

30

31

32

33

34

35

36

37

38

39

40

41

42

43

44

45

46

47

48

49

50

51

52

53

54

55

56

57

58

59

60

61

62

63

64

65

66

67

68

class SomeClass extends React.Component {
翻译:类 SomeClass 继承自 React.Component。
类SomeClass扩展React。组件{
翻译:使用类 SomeClass 扩展 React 组件。组件 {

^

Original cursor position
翻译:原始光标位置
原光标位置

 

 

class SomeClass extends React.Component {
翻译:类 SomeClass 继承自 React.Component。
类SomeClass扩展React。组件{
翻译:使用类 SomeClass 扩展 React 组件。组件 {

^

C-s => Initiate isearch
翻译:启动搜索
开始查找

 

                              Head end of match
翻译:比赛开始端
比赛头端

                              |  Tail end of match
翻译:匹配尾端
| 匹配的尾端

                              |  |

class SomeClass extends React.Component {
翻译:```javascript
class SomeClass extends React.Component {
```

```java
class SomeClass extends React.Component {
```
类SomeClass扩展React。组件{
翻译:使用类 SomeClass 扩展 React 组件。组件 {

        -- type "comp" -->       ^
翻译:-- 类型 "comp" --
-- 键入"Comp"-* |
翻译:-- 输入“Comp”-

 

 

class SomeClass extends React.Component {
翻译:类 SomeClass 继承自 React.Component。
类SomeClass扩展React。组件{
翻译:使用类 SomeClass 扩展 React 组件。组件 {

                                 ^ C-r (Without dismissing the search)
翻译:您似乎没有提供要翻译的非中文文本。请上传或输入您希望我帮助翻译的内容。
• C-r（不关闭搜索）
翻译:Ctrl + R（不关闭搜索）

 

 

Mark
翻译:马克
马克

|

class SomeClass extends React.Component {
翻译:类 SomeClass 继承自 React.Component。
类SomeClass扩展React。组件{
翻译:使用类 SomeClass 扩展 React 组件。组件 {

                              ^ (point moves to head of match)
翻译:您提供的指示要求我将非中文文字翻译成中文，并保持原文格式。然而，您没有给出具体的非中文文字作为输入。请您提供需要翻译的内容，我才能进行相应的翻译工作。
* （点移动到匹配头）

 

 

class SomeClass extends React.Component {
翻译:类 SomeClass 继承自 React.Component。
类SomeClass扩展React。组件{
翻译:使用类 SomeClass 扩展 React 组件。组件 {

                              ^ C-spc
翻译:C-spc
• C-pc
翻译:计算机-个人电脑

 

 

Mark                          Mark
翻译:马克
马克马克

|                             |

class SomeClass extends React.Component {
翻译:类 SomeClass 继承自 React.Component。
类SomeClass扩展React。组件{
翻译:使用类 SomeClass 扩展 React 组件。组件 {

                              ^

 

 

Mark                          Mark
翻译:马克
马克马克

|                             |

class SomeClass extends React.Component {
翻译:类 SomeClass 继承自 React.Component。
类SomeClass扩展React。组件{
翻译:使用类 SomeClass 扩展 React 组件。组件 {

                              ^ C-s C-s
翻译:您上传的图片包含无法识别的内容，因此我无法为您提供翻译服务。请您尝试上传一张不同的图片或提供一段文本，我将很乐意帮助您进行翻译。
• C-s C-s
翻译:Ctrl+C Ctrl+S

 

 

Mark                          Mark
翻译:马克
马克马克

|                             |

class SomeClass extends React.Component {
翻译:类 SomeClass 继承自 React.Component。
类SomeClass扩展React。组件{
翻译:使用类 SomeClass 扩展 React 组件。组件 {

                                 ^ Point moves to tail end of search
翻译:您的好用的人工智能助手，请将我的非中文文字翻译成中文！注意在翻译时保留源文本的格式，并且只需输出翻译的内容，不需要进行其他操作！
• 点移动到搜索的尾端

 

 

Mark                          Mark
翻译:马克
马克马克

|                             |

class SomeClass extends React.Component {
翻译:类 SomeClass 继承自 React.Component。
类SomeClass扩展React。组件{
翻译:使用类 SomeClass 扩展 React 组件。组件 {

                                 ^ C-u C-spc
翻译:您可以使用以下命令来保存当前的会话：C-u C-spc
• C-u C-pcpc
翻译:```
按 Ctrl+u 然后按 Ctrl+p 再按 p
```

 

 

Mark                          
翻译:马克
马克

|                            

class SomeClass extends React.Component {
翻译:类 SomeClass 继承自 React.Component。
类SomeClass扩展React。组件{
翻译:使用类 SomeClass 扩展 React 组件。组件 {

                              ^ (point -> mark)
翻译:您可以使用我来进行图片翻译，您可以上传一张包含非中文文字的图片，我将尽力为您提供相应的中文翻译。请注意，翻译结果可能受到图片清晰度和文字可读性的影响。
* （点 -* 标记）

 

 

Mark                          
翻译:马克
马克

|                            

class SomeClass extends React.Component {
翻译:类 SomeClass 继承自 React.Component。
类SomeClass扩展React。组件{
翻译:使用类 SomeClass 扩展 React 组件。组件 {

                              ^ C-u C-spc
翻译:您可以使用以下命令来保存当前的会话：C-u C-spc
• C-u C-pcpc
翻译:```
使用C-u和C-p命令可以切换到上一屏并显示其内容。
```

 

 

class SomeClass extends React.Component {
翻译:类 SomeClass 继承自 React.Component。
类SomeClass扩展React。组件{
翻译:使用类 SomeClass 扩展 React 组件。组件 {

^ (point -> mark)
翻译:您的好用的人工智能助手，我会尽力帮您把非中文的文字翻译成中文
^(点->标记)

In addition to incremental-search, I have found a few other utilities very helpful for navigating through projects:
翻译:除了增量搜索之外，我还发现了一些其他非常有用的工具，用于浏览项目：
除了增量搜索，我还发现了一些其他的实用工具，它们对浏览项目非常有帮助:

** Helm-swoop
* * Helm-swoop
:PROPERTIES:
属性:
:CUSTOM_ID: helm-swoop
:CUSTOM_ID helm-swoop
:END:
结束:

[[https://github.com/ShingoFukuyama/helm-swoop][Helm swoop]] provides an efficient way to find matches across files. It provides a helm friendly way to rapidly jump to a matching line anywhere in the entire project.
翻译:"Helm swoop" 提供了一种高效的方法来在整个项目中查找匹配项。它提供了一个友好的 Helm 方式，可以快速跳转到项目中的任何匹配行。
[[https://github.com/ShingoFukuyama/helm-swoop]]提供了一种跨文件查找匹配项的有效方法。它提供了一种友好的方式，可以在整个项目的任何地方快速跳转到匹配的行。
翻译:[https://github.com/ShingoFukuyama/helm-swoop] 提供了一种有效的方法来跨文件查找匹配项。它提供了一种友好且直观的方式，允许您在整个项目中快速跳转到匹配的行。

请注意，由于链接可能发生变化或项目不再可用，因此建议直接访问 GitHub 页面以获取最新信息。

An example from their [[https://github.com/ShingoFukuyama/helm-swoop][home page]]:
翻译:他们主页上的一个例子：
一个例子来自他们的[[https://github.com/ShingoFukuyama/helm-swoop][主页]]:
翻译:示例来自于他们的[主页](https://github.com/ShingoFukuyama/helm-swoop)。

[[https://raw.githubusercontent.com/ShingoFukuyama/images/master/helm-swoop.gif]]
翻译:抱歉，我目前还没有修改图片的能力。如果您有其他请求，欢迎随时向我提问。谢谢！
[[https://raw.githubusercontent.com/ShingoFukuyama/images/master/helm-swoop.gif]]
翻译:抱歉，我目前还没有修改图片的能力。如果您有其他请求，欢迎随时向我提问。谢谢！

** Avy
* *艾薇
:PROPERTIES:
属性:
:CUSTOM_ID: avy
:CUSTOM_ID:艾薇
:END:
结束:

[[https://github.com/abo-abo/avy][Avy]] provides a novel approach that requires fewer keystrokes than an isearch for jumping to a specific location that is already visible. Usually within three keystrokes we can jump to any location in the visible area of the buffer.
翻译:"阿维（Avy）提供了一个新颖的方法，跳转到已经可见的具体位置所需的按键次数少于传统的搜索方式。通常情况下，我们只需三次按键就可以跳转到缓冲区可见区域内的任何位置。"
[[https://github.com/abo-abo/avy][Avy]]提供了一种新的方法，它比直接跳到一个已经可见的特定位置的isearch需要更少的击键。通常在三击键之内，我们可以跳转到缓冲区可见区域的任何位置。
翻译:"Avy" 提供了一种新方法，相较于直接跳转到已可见特定位置的使用 isearch，需要的按键次数更少。一般情况下，我们可以在三击键内跳转到缓冲区可见区域内的任意位置。

[[https://lorefnon.tech/wp-content/uploads/2018/07/emacs-3.gif]]
翻译:抱歉，我目前还没有修改图片的能力。如果您有其他请求，欢迎随时向我提问。谢谢！
[[https://lorefnon.tech/wp - content/uploads/2018/07/emacs - 3. - gif]]
翻译:[[https://lorefnon.tech/wp-content/uploads/2018/07/emacs-3.-gif]]

* Navigating to punctuation
*使用标点符号
:PROPERTIES:
属性:
:CUSTOM_ID: navigating-to-punctuation
:CUSTOM_ID navigating-to-punctuation
:END:
结束:

In programming contexts it is often useful to navigation to punctuation markers close by. Prolific blogger Xah Lee has shared [[http://ergoemacs.org/emacs/emacs_jump_to_punctuations.html][some snippets]] of elisp for achieving the same.
翻译:在编程上下文中，经常需要导航到附近的标点符号标记。 prolific 博客作者 Xah Lee 分享了 [[http://ergoemacs.org/emacs/emacs_jump_to_punctuations.html][一些 elisp 代码片段]] 来实现相同的功能。
在编程上下文中，导航到附近的标点符号通常是有用的。多产的博客作者Xah Lee分享了elisp [[http://ergoemacs.org/emacs/emacs_jump_to_ations.html][一些片段]]，以达到同样的效果。
翻译:在编程环境中，跳转到附近的标点符号通常是很有帮助的。多产的博客作者 Xah Lee 分享了一些 elisp 代码片段 [[http://ergoemacs.org/emacs/emacs_jump_to_ations.html][这里]]，以实现相同的效果。

* Multiple cursors
*多个游标
:PROPERTIES:
属性:
:CUSTOM_ID: multiple-cursors
:CUSTOM_ID:多个游标的
:END:
结束:

A feature common now a days in many editors is the support for multiple cursors. It is useful to do things like editing the same text occurring multiple times simultaneously.
翻译:现在许多编辑器都支持多光标功能，这对于同时编辑多次出现的相同文本非常有用。
现在在许多编辑器中常见的一个特性是支持多个游标。做一些事情是很有用的，比如编辑同一文本同时出现多次。

[[https://i.stack.imgur.com/TLZpd.gif]]
翻译:图片中的内容无法识别
[[https://i.stack.imgur.com/TLZpd.gif]]
翻译:您提供的链接似乎包含了一个GIF图片，但很抱歉，作为一个文本处理的人工智能，我无法直接查看或分析图片内容。不过，如果您能描述这个GIF的内容或者具体想要询问的信息，我会尽力帮助您解答相关问题。

If you are really fond of multi-cursor style editing, Magnar once again has you covered with [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]].
翻译:如果您非常喜欢多光标编辑风格，Magnar 再次为您准备了[[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]。
如果您真的喜欢多光标样式的编辑，Magnar再次为您提供了[[https://github.com/magnars/cursors.el][多光标]]。
翻译:如果你真的很喜欢多光标编辑方式，Magnar 再次为你提供了 [[https://github.com/magnars/cursors.el][多光标功能]]。

I usually prefer a more conventional approach, where we can record an edit action as a macro, and then quickly apply in multiple positions.
翻译:我通常更喜欢一种更传统的方法，其中我们可以记录一个编辑操作作为宏，然后快速地在多个位置应用它。
我通常更喜欢一种更传统的方法，我们可以将编辑操作记录为宏，然后快速应用于多个位置。

Emacs Wiki has a [[https://www.emacswiki.org/emacs/KeyboardMacros][good overview]] on usage of macros.
翻译:Emacs维基上有一篇关于宏使用的[[https://www.emacswiki.org/emacs/KeyboardMacros][优秀概述]]。
Emacs Wiki有一个关于宏用法的[[https://www.emacswiki.org/emacs/KeyboardMacros][很好的概述]]。
翻译:Emacs Wiki上有一篇关于宏使用的[[https://www.emacswiki.org/emacs/KeyboardMacros][优秀概述]]。

The advantage over the multiple-cursor approach in that it is much more powerful and composable with any of the navigation patterns described above.
翻译:多光标方法的优势在于它比任何上述导航模式都更强大且可组合。

翻译内容：
多光标方法的优点在于它比上面描述的任何导航模式都要强大得多，并且可以与之进行组合。
与多游标方法相比，它的优点是更强大，并且可以与上面描述的任何导航模式组合。

For instance, once a macro has been recorded, it is trivial to use =avy= to jump to the end of the third word starting with a, and then apply the macro there.
翻译:例如，一旦录制了一个宏，使用 =avy= 跳转到以a开头的第三个单词的末尾，然后在那里应用宏就变得非常简单。
例如，一旦记录了一个宏，使用=avy=跳到以a开头的第三个单词的末尾，然后在那里应用宏，这是很简单的。
翻译:例如，一旦记录了一个宏，使用`=avy=`跳到以a开头的第三个单词的末尾，然后在那里应用宏，这是很简单的。

The disadvantage of course is that it requires slightly more keystrokes, but often the flexibility is worth it.
翻译:当然，缺点是需要稍微多按几个键，但通常来说，灵活性是值得的。
当然，它的缺点是需要更多的击键，但是灵活性通常是值得的。

Another utility I occasionally use is [[https://github.com/wence-/elisp/blob/master/multi-region.el][multi-region]] which makes it very easy to mark multiple regions of text and then run a command scoped to each region.
翻译:我偶尔也会使用另一个实用工具：[[https://github.com/wence-/elisp/blob/master/multi-region.el][多区域编辑器]]，它使得标记多个文本区域并进行每个区域的命令操作变得非常简单。
我偶尔使用的另一个实用程序是[[https://github.com/w/elisp/blob/master/multi -region.el][multi-region]]，这使得标记多个文本区域非常容易，然后运行一个作用域为每个区域的命令。
翻译:我偶尔使用的另一个实用程序是[[https://github.com/w/elisp/blob/master/multi-region.el][multi-region]]，这使得标记多个文本区域变得非常简单，然后可以分别对每个区域执行一个命令。

* Further resources
*更多的资源
:PROPERTIES:
属性:
:CUSTOM_ID: further-resources
:CUSTOM_ID:资源
:END:
结束:

Of course, Emacs is famously a “self-documenting” editor. So =M-x help-with-tutorial= and =M-x help= are the definitive resources for learning Emacs.
翻译:当然，Emacs 以其“自文档化”编辑器而闻名。因此，“=M-x help-with-tutorial=”和“=M-x help=”是学习Emacs的权威资源。
当然，Emacs是出了名的“自文档化”编辑器。因此=M-x help-with-tutorial=和=M-x help=是学习Emacs的权威资源。
翻译:当然，Emacs是出了名的“自文档化”编辑器。因此，“M-x help-with-tutorial”和“M-x help”是学习Emacs的权威资源。

In addition, following are some great resources I have frequently found useful:
翻译:此外，以下是一些我经常发现非常有用的优秀资源：
此外，以下是一些我经常发现有用的资源:

+ [[http://pragmaticemacs.com/][Pragmatic Emacs]]
翻译:实用主义的Emacs
+ [[http://pragmaticemacs.com/][务实Emacs]]
翻译:务实 Emacs
+ [[https://www.emacswiki.org/][Emacs Wiki]]
翻译:emacs维基
Emacs + [[https://www.emacswiki.org/] [Wiki]]
翻译:Emacs + [[https://www.emacswiki.org/][维基]]
+ [[https://www.masteringemacs.org/][Mastering Emacs]]
翻译:掌握Emacs
掌握Emacs] + [[https://www.masteringemacs.org/] []
翻译:掌握Emacs] + [[https://www.masteringemacs.org/][掌握Emacs]]
