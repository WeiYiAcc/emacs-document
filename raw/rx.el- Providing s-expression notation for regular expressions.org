#+TITLE: rx.el: Providing s-expression notation for regular expressions
#+URL: https://opensourceforu.com/2020/02/rx-el-providing-s-expression-notation-for-regular-expressions/
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2020年 02月 18日 星期二 20:23:10 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
The rx.el Emacs Lisp module provides s-expression notation for regular expressions. It is a macro that can generate regular expressions from readable s-expressions. This eleventh article in the GNU Emacs series explores the various s-expression counterparts and the regular expressions that get generated with numerous examples.
翻译:rx.el 是 Emacs Lisp 模块，它提供了正则表达式的 s-表达式表示法。这是一个宏，可以从可读的 s 表达式中生成正则表达式。本文是关于 GNU Emacs 的系列文章中的第十一篇，它探讨了各种 s 表达式对应物以及通过众多示例生成的正则表达式。

The rx.el Emacs Lisp module is written by Gerd Moellman and is included as part of GNU Emacs, which is released under the GNU General Public License v3.
翻译:rx.el 是由 Gerd Moellman 编写的 Emacs Lisp 模块，它是 GNU Emacs 的一部分，后者是根据 GNU 通用公共许可证 v3 发布的。

*Installation*\
翻译:安装
The rx.el library is already included as part of GNU Emacs and you can simply require the same as shown below:
翻译:rx.el库已经是GNU Emacs的一部分了，您可以直接以下面所示的方式进行要求：

#+BEGIN_EXAMPLE
(require ‘rx)
#+END_EXAMPLE

We will use the s.el package available in Milkypostman's Emacs Lisp Package Archive (MELPA) and in the Marmalede repo to demonstrate the examples. In particular, we will use thes-matches-p and s-match-strings-all functions provided by the s.el library. You can install this using the following  command inside GNU Emacs:
翻译:我们将使用在Milkypostman的Emacs Lisp Package Archive（MELPA）和Marmalede仓库中可用的`s.el`包来演示示例。特别是，我们将使用`s.el`库提供的`s-matches-p`和`s-match-strings-all`函数。您可以在GNU Emacs中使用以下命令安装此插件：

#+BEGIN_EXAMPLE
M-x package-install s
#+END_EXAMPLE

Alternatively, you can copy the s.el source file to your Emacs load path to use it. If you are using Cask, then you can add the following to your Cask file:
翻译:或者，您可以复制s.el源文件到您的Emacs加载路径中以使用它。如果您使用的是Cask，那么您可以将以下内容添加到您的Cask文件中：

#+BEGIN_EXAMPLE
(depends-on “s”)
#+END_EXAMPLE

After installation, you can require the s.el package using the following snippet:
翻译:安装完成后，您可以使用以下代码片段要求安装s.el包：

#+BEGIN_EXAMPLE
(require ‘s)
#+END_EXAMPLE

*Usage*\
翻译:使用方法
Let us now explore the different s-expressions that can be used with the rx macro to generate regular expressions. The any construct matches any character in a SET. The latter may be a character or a string. In the following example ‘[0-9A-Fa-f]' is the regular expression pattern that is generated.
翻译:现在让我们探索可以使用rx宏生成正则表达式的不同s表达式。任意构造符匹配集合中的任意字符。后者可以是字符或字符串。"在下面的例子中'[0-9A-Fa-f]'是生成的正则表达式模式。

#+BEGIN_EXAMPLE
(any SET ...) ;; Syntax

(setq alphanumeric-pattern (rx (any "a-f" "A-F" "0-9")))
"[0-9A-Fa-f]"

(s-matches-p (rx (any "a-f" "A-F" "0-9"))
"A")
t
(s-matches-p (rx (any "a-f" "A-F" "0-9"))
";")
nil
#+END_EXAMPLE

The s-matches-p function in the s.el library takes a regular expression and a string, and returns ‘true' if there is a match and ‘nil' otherwise. If an optional START argument is provided to it, then it starts the search from that index.
翻译:`s.el`库中的`s-matches-p`函数接受一个正则表达式和一个字符串作为参数，如果找到匹配项则返回‘true’，否则返回‘nil’。如果提供了可选的`START`参数，那么将从那个索引开始搜索。

#+BEGIN_EXAMPLE
(s-matches-p REGEXP S &optional START) ;; Syntax
#+END_EXAMPLE

You can also use the in construct to generate the same ‘[0-9A-Fa-f]' regular expression pattern as illustrated below:
翻译:您也可以使用in构造来生成如下所示的相同“[0-9A-Fa-f]”正则表达式模式：

#+BEGIN_EXAMPLE
(in SET ...) ;; Syntax

(s-matches-p (rx (in "a-f" "A-F" "0-9"))
"A")
t
#+END_EXAMPLE

The and construct can be used to combine multiple s-expressions together. In the following example, line-start generates the ‘^' (caret) character and is combined with zero or more occurrences of alphabets as shown below:
翻译:"与构造可以用来组合多个s表达式。在以下示例中，行开始生成“^”字符（撇号），并与零个或多个字母的出现结合如下所示："

#+BEGIN_EXAMPLE
(and SEXP1 SEXP2 ...) ;; Syntax

(rx (and line-start (0+ (in "a-z"))))
"^[a-z]*"
#+END_EXAMPLE

If you want to match either of the s-expressions, you can use the or construct as illustrated below:
翻译:如果您想匹配这两个s表达式，可以使用如下所示的或构造：

#+BEGIN_EXAMPLE
(or SEXP1 SEXP2 ...) ;; Syntax

(s-match-strings-all
(rx (or “Mary” “Peter” “John”))
“Mary had a little lamb”)
((“Mary”))
#+END_EXAMPLE

The s-match-strings-all function from the s.el library takes two arguments: a REGEX and a STRING. It returns a list of matches for REGEX in the given input STRING.
翻译:`s-match-strings-all` 函数来自 `s.el` 库，它接受两个参数：一个正则表达式（REGEX）和一个字符串（STRING）。该函数返回在给定的输入字符串中匹配 REGEX 的所有子串列表。

#+BEGIN_EXAMPLE
(s-match-strings-all REGEX STRING) ;; Syntax
#+END_EXAMPLE

The not rx-constituent can be used to generate a negative match. In the following example, a regular expression is generated to match a newline followed by anything that is not a blank.
翻译:非限定成分可用于生成否定匹配。在以下示例中，生成一个正则表达式以匹配换行符后跟任何非空白字符。

#+BEGIN_EXAMPLE
(not SEXP) ;; Syntax

(rx (and “n” (not blank)))
“n[^[:blank:]]”
#+END_EXAMPLE

You can match for a specific character literally using the char construct. A couple of examples to match for the character ‘;' are given below:
翻译:你可以使用char构造字面匹配特定字符。下面给出了几个匹配字符‘;’的示例：

#+BEGIN_EXAMPLE
(rx (char ";"))
";"

(s-matches-p (rx (char ";"))
"ABC")
nil
(s-matches-p (rx (char ";"))
"ABC;")
t
#+END_EXAMPLE

The negate operation to not match a character is provided by the ‘not-char' construct. For example:
翻译:否定操作符用于不匹配字符是通过“not-char”结构提供的。例如：

#+BEGIN_EXAMPLE
(not-char SEXP1 SEXP2 ...) ;; Syntax

(rx (not-char "A"))
"[^A]"

(s-matches-p (rx (not-char "A"))
"B")
t
(s-matches-p (rx (not-char "A"))
"A")
nil
#+END_EXAMPLE

The actual code for not-char in rx.el is defined as follows:
翻译:实际上，rx.el中not-char的代码定义如下：

#+BEGIN_EXAMPLE
(defconst rx-constituents
‘((...
(not-char . (rx-not-char 1 nil rx-check-any))
...)))

(defun rx-not-char (form)
“Parse and produce code from FORM. FORM is `(not-char ...)’.”
(rx-check form)
(rx-not `(not (in ,@(cdr form)))))
#+END_EXAMPLE

You can generate regular expressions from s-expressions to match for zero or more, one or more, and zero or one occurrences, as illustrated below:
翻译:您可以从s表达式生成正则表达式来匹配零个或多个、一个或多个以及零个或一个发生的情况，如下所示：

#+BEGIN_EXAMPLE
(zero-or-more SEXP ...) ;; Syntax
(one-or-more SEXP ...) ;; Syntax
(zero-or-one SEXP ...) ;; Syntax

(rx (zero-or-more “x”))
“x*”

(s-matches-p (rx (zero-or-more “x”))
“yz”)
t
(s-matches-p (rx (zero-or-more “x”))
“xyz”)
t

(rx (one-or-more “x”))
“x+”

(s-matches-p (rx (one-or-more “x”))
“yz”)
nil
(s-matches-p (rx (one-or-more “x”))
“xyz”)
t

(rx (zero-or-one “x”))
“x?”

(s-matches-p (rx (zero-or-one “x”))
“yz”)
t
(s-matches-p (rx (zero-or-one “x”))
“xyz”)
t
#+END_EXAMPLE

We have already seen the line-start construct that generates the caret symbol (^). Similarly, you can use the line-end construct to signify the end of a line, which is represented by the dollar sign ($). For example:
翻译:我们已经看到了生成caret符号（^）的行开始构造。同样，您可以使用行结束构造来表示行的结束，它由美元符号（$）表示。例如：

#+BEGIN_EXAMPLE
(rx “end” line-end)
“end$”

(s-matches-p (rx “end” line-end)
“The end.”)
nil
(s-matches-p (rx “end” line-end)
“The end”)
t
#+END_EXAMPLE

A digit can be represented by using either digit, numeric or num constructs. A couple of examples are shown below:
翻译:一个数字可以用数字、数值或num构造来表示。下面举几个例子：

#+BEGIN_EXAMPLE
(rx digit)
“[[:digit:]]”

(rx numeric)
“[[:digit:]]”

(rx num)
“[[:digit:]]”

(s-matches-p (rx num)
“1234”)
t
(s-matches-p (rx num)
“abcd”)
nil
#+END_EXAMPLE

A control character is a non-printing character and you can use either control or cntrl constructs to generate the regular expression for the same. A few examples are given below:
翻译:控制字符是非打印字符，您可以使用控制或cntrl构造来生成相同的正则表达式。下面给出了一些示例：

#+BEGIN_EXAMPLE
(rx control)
“[[:cntrl:]]”

(rx cntrl)
“[[:cntrl:]]”

(s-matches-p (rx control)
“0”)
t
(s-matches-p (rx control)
“abc”)
nil
#+END_EXAMPLE

A hexadecimal digit can be matched by using either hex-digit, hex, or xdigit rx-constituents as illustrated below:
翻译:十六进制数字可以通过使用以下所示的hex-digit、hex或xdigit语法成分进行匹配：

#+BEGIN_EXAMPLE
(rx hex-digit)
“[[:xdigit:]]”

(rx hex)
“[[:xdigit:]]”

(rx xdigit)
“[[:xdigit:]]”

(s-matches-p (rx digit)
“1234”)
t
(s-matches-p (rx digit)
“abcd”)
nil
#+END_EXAMPLE

You can match for lower case characters using either lower or lower-case constructs. Similarly, you use upper or upper-case constructs to match for upper case letters. A few examples are shown below:
翻译:您可以使用小写或小写形式来匹配小写字母。同样，您使用大写或大写形式来匹配大写字母。下面是一些示例：

#+BEGIN_EXAMPLE
(rx lower)
“[[:lower:]]”

(rx lower-case)
“[[:lower:]]”

(rx upper)
“[[:upper:]]”

(rx upper-case)
“[[:upper:]]”

(s-matches-p (rx lower)
“abc”)
t
(s-matches-p (rx lower-case)
“;”)
nil

(s-matches-p (rx upper)
“ABC”)
t
(s-matches-p (rx upper-case)
“;”)
nil
#+END_EXAMPLE

If you have escaped characters in your input text, you will need to use either regexp-quote or eval on the input before being able to apply the regular expression to match on the input string. An example is given below:
翻译:如果您在输入文本中使用了转义字符，您需要在应用正则表达式以匹配输入字符串之前，使用regexp-quote或eval对输入进行预处理。下面给出了一个示例：

#+BEGIN_EXAMPLE
(eval FORM) ;; Syntax

(setq input “”Hello, world!””)

(not (s-matches-p input input))
nil

(s-matches-p (regexp-quote input) input)
t

(s-matches-p (rx (eval input)) input)
t
#+END_EXAMPLE

The rx.el library also provides support for non-ascii characters, such as multi-byte and accented characters. You can match for the same using the non-ascii construct as shown below:
翻译:rx.el库也提供了对非ASCII字符的支持，例如多字节和带重音的字符。您可以使用下面的非ASCII构造来匹配相同的字符：

#+BEGIN_EXAMPLE
(rx nonascii)
“[[:nonascii:]]”

(s-matches-p (rx nonascii)
“ABC”)
nil
(s-matches-p (rx nonascii)
“È”)
t
#+END_EXAMPLE

The alpha-numeric rx-constituent can be used to match for both alphabets and numerals. A couple of examples are provided below for reference:
翻译:字母数字成分可以用来匹配字母和数字。下面提供了几个示例供参考：

#+BEGIN_EXAMPLE
(rx alphanumeric)
“[[:alnum:]]”


(s-matches-p (rx alphanumeric)
“abc123”)
t
(s-matches-p (rx alphanumeric)
“;”)
nil
#+END_EXAMPLE

If you want to match for only alphabets, then you can use the alpha construct. A few examples are shown below:
翻译:如果您只想匹配字母，则可以使用alpha构造。下面显示了一些示例：

#+BEGIN_EXAMPLE
(rx alpha)
“[[:alpha:]]”

(s-matches-p (rx alpha)
“ABC”)
t
(s-matches-p (rx alpha)
“;;”)
nil
#+END_EXAMPLE

You can search for a blank character using the blank construct. For example:
翻译:您可以使用空白构造来搜索空白字符。例如：

#+BEGIN_EXAMPLE
(rx blank)
“[[:blank:]]”

(s-matches-p (rx blank)
“ “)
t
(s-matches-p (rx blank)
“A”)
nil
#+END_EXAMPLE

The space, white and whitespace rx-constituents can be used to match for white space as illustrated below:
翻译:空间、空白和空白组成部分可以用来匹配下面的空白：

#+BEGIN_EXAMPLE
(rx space)
“[[:space:]]”

(rx white)
“[[:space:]]”

(rx whitespace)
“[[:space:]]”


(s-matches-p (rx space)
“ “)
t
(s-matches-p (rx space)
“abc”)
nil
#+END_EXAMPLE

The punct construct is used to match for punctuation marks. A couple of examples follow:
翻译:点构造用于匹配标点符号。以下是一些例子：

#+BEGIN_EXAMPLE
(rx punct)
“[[:punct:]]”

(rx punctuation)
“[[:punct:]]”

(s-matches-p (rx punct)
“abc”)
nil
(s-matches-p (rx punct)
“.”)
t
#+END_EXAMPLE

You can match for a word using either the word or wordchar constructs. For example:
翻译:您可以使用word或wordchar构造来匹配单词。例如：

#+BEGIN_EXAMPLE
(rx word)
“[[:word:]]”

(rx wordchar)
“[[:word:]]”

(s-matches-p (rx word)
“the”)
t
(s-matches-p (rx word)
“ “)
nil
#+END_EXAMPLE

If you do not want to match for a word, you can use the not-wordchar construct as follows:
翻译:如果您不想对一个单词进行匹配，可以使用如下所示的not-wordchar结构：

#+BEGIN_EXAMPLE
(rx not-wordchar)
“\W”

(s-matches-p (rx not-wordchar)
“abc”)

nil
(s-matches-p (rx not-wordchar)
“ “)
t
#+END_EXAMPLE

The repeat construct takes two arguments: a number N and an s-expression. It repeatedly applies the s-expression N number of times to generate the regular expression. In the following example, we match for two occurrences of the letter ‘x':
翻译:重复构造函数接受两个参数：一个数字N和一个s表达式。它重复地将s表达式应用N次以生成正则表达式。在下面的例子中，我们匹配字母‘x’的两个出现：

#+BEGIN_EXAMPLE
(repeat N SEXP) ;; Syntax

(rx (repeat 2 "x"))
"x\{2\}"

(s-matches-p (rx (repeat 2 "x"))
" ")
nil
(s-matches-p (rx (repeat 2 "x"))
"xxyz")
t
#+END_EXAMPLE

You can use group or group-n rx-constituents to capture groups of regular expressions. The first argument to group-n represents the group number, which is followed by the actual s-expression. In the following example, we create a regular expression to match the date in the MM-DD-YYYY format:
翻译:您可以使用分组或分组-n 来捕获正则表达式的组。group-n 的第一个参数表示分组号，后面跟着实际的s表达式。在下面的示例中，我们创建了一个匹配MM-DD-YYYY格式的日期的正则表达式：

#+BEGIN_EXAMPLE
(group SEXP1 SEXP2 ...) ;; Syntax
(group-n N SEXP1 SEXP2 ...) ;; Syntax

(setq mm-dd-yyyy
(rx (group-n 3 (repeat 2 digit))
“-”
(group-n 2 (repeat 2 digit))
“-”
(group-n 1 (repeat 4 digit))))

(s-match-strings-all mm-dd-yyyy “12-10-2019”)
((“12-10-2019” “2019” “10” “12”))
#+END_EXAMPLE

The generated regular expression pattern is‘\(?3:[[:digit:]]\{2\}\)-\(?2:[[:digit:]]\{2\}\)-\(?1:[[:digit:]]\{4\}\)'.
翻译:生成的正则表达式模式是 ‘\(?3:[[:digit:]]{2}\)-\(?2:[[:digit:]]{2}\)-\(?1:[[:digit:]]{4}\)’。

You are encouraged to read the information given in https://github.com/typester/emacs/blob/master/lisp/emacs-lisp/rx.el to know more about the available constructs provided by rx.el.
翻译:你可以阅读https://github.com/typester/emacs/blob/master/lisp/emacs-lisp/rx.el中的信息，以了解更多关于rx.el提供的可用构造。
