#+TITLE: 5 ways to use Emacs as your RPG dashboard | Opensource.com
#+URL: https://opensource.com/article/20/1/emacs-rpgs
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2020年 02月 10日 星期一 09:57:23 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
There are two ways to play a tabletop role-playing game (RPG): You can play an adventure written by the game's publisher or an independent author, or you can play an adventure that is made up as you go. Regardless of which you choose, there's probably prep work to do. One player (generically called the game master) must gather monster or enemy stats, loot tables, and references for rules, and the other players must build characters and apportion (pretend) equipment. Nothing's going to eliminate prep work from a complex RPG, but if you're an [[https://opensource.com/life/16/2/intro-to-emacs][Emacs]] user, you might find that Emacs makes a great dashboard to keep everything all straight.
翻译:玩桌面角色扮演游戏（RPG）有两种方式：你可以玩由游戏的出版商或独立作者编写的冒险故事，或者边走边创造一个冒险故事。无论你选择哪种方式，你可能都需要做一些准备工作。一名玩家（通常被称为游戏主持人）必须收集怪物或敌人的统计数据、战利品表以及规则参考，而其他玩家则必须建立角色并分配（假装）装备。没有什么能完全消除复杂RPG中的准备工作，但如果你是[[https://opensource.com/life/16/2/intro-to-emacs][Emacs]]的用户，你可能会发现Emacs是一个非常棒的仪表板，可以帮助你整理所有事情。

** Organize the rules
:PROPERTIES:
:CUSTOM_ID: organize-the-rules
:END:

Unfortunately, the digital editions of many RPGs are distributed as PDFs because that's what the RPG publisher sent to the printer for the physical edition. PDFs are good at preserving layout, but they're far from an ideal eBook format. If you play RPGs published under an open license, you can often obtain the rules in alternate formats (such as HTML), which gives you more control and flexibility. Even the world's first and most famous RPG, Dungeons & Dragons, provides its rules as a free download in digital format (which has been translated into HTML and Markdown by many a website).
翻译:很遗憾，许多角色扮演游戏（RPG）的数字版是以PDF形式分发的，因为这是游戏出版商发送给印刷厂用于实体版的文件。PDF在保留排版方面做得很好，但远不是一种理想化的电子书格式。如果您玩的是在开放许可下出版的角色扮演游戏，您通常可以获取规则的其他格式（例如HTML），这样您可以获得更多的控制和灵活性。即使是世界上第一个也是最著名的角色扮演游戏，《龙与地下城》（Dungeons & Dragons），也提供了其规则的免费下载（许多网站已经将其转换为HTML和Markdown格式）。

I open the rules as Markdown in Emacs so that I have a searchable reference at the ready. While opening the rules as a PDF in a PDF reader lets you search for embedded text, using a text file instead provides several benefits. First of all, a text file is much smaller than a PDF, so it's faster to load and to search. Second, text files are easily editable, so if you find a rule that sends you seeking clarification, you can add what you learn (or whatever you make up) directly into your master document. You can also add house rules and additional resources. My aim is to have a single file that contains all of the rules and resources I use in games I run, with everything a quick *Ctrl+s* (*C-s* in Emacs notation) away.
翻译:我将规则以Markdown格式在Emacs中打开，以便随时有一个可搜索的参考资料。虽然以PDF格式在PDF阅读器中打开规则可以让您搜索嵌入的文字，但使用文本文档而不是PDF有几个好处。首先，文本文档比PDF小得多，因此加载和搜索速度更快。其次，文本文档易于编辑，所以如果您发现一条需要澄清的规则，您可以直接将其添加到您的主文档中（或者您编造的内容）。您还可以添加家规和额外的资源。我的目标是拥有一个包含我在游戏中使用的所有规则和资源的单个文件，只需快速按下*Ctrl+s*（在Emacs表示法中为*C-s*）即可访问一切。

** Manage initiatives
:PROPERTIES:
:CUSTOM_ID: manage-initiatives
:END:

Most RPG systems feature a method to determine the order of play during combat. This is commonly called initiative, and it comes up a lot since the source of conflict in games often involves combat or some kind of opposed competitive action. It's not that hard to keep track of combat with pencil and paper, but in games where I'm using digital assets anyway, I find it easier to stay digital for everything. Luckily, the venerable [[https://orgmode.org/][Org mode]] provides an excellent solution.
翻译:大多数角色扮演游戏系统都提供了一种确定战斗中行动顺序的方法。这通常被称为主动性，因为在游戏中冲突的来源往往涉及战斗或某种对立的竞争行为。使用铅笔和纸张跟踪战斗并不难，但在那些我无论如何都要使用数字资产的游戏中，我发现全程数字化更容易。幸运的是，备受推崇的[[https://orgmode.org/][Org模式]]提供了一个出色的解决方案。

When players roll for initiative, I type their names into Emacs' scratch buffer. Then I type each monster or enemy, along with the hit or health points (HP) of each, followed by two columns of 0:
翻译:当玩家进行主动性投掷时，我将他们的名字输入到Emacs的空白缓冲区中。然后我依次输入每个怪物或敌人，以及每个敌人的攻击力或生命值（HP），后面跟着两列0：

#+BEGIN_EXAMPLE
brad

emily

zombie 22 0 0

zombie 22 0 0

flesh-golem 93 0 0
#+END_EXAMPLE

Then I select the block of player characters (PCs) and monsters and use the *org-table-create-or-convert-from-region* function to create an Org mode table around it. Using *Alt+Down arrow* (*M-down* in Emacs notation), I move each PC or monster into the correct initiative order.
翻译:然后我选择玩家角色（PC）和怪物所在的区块，并使用*org-table-create-or-convert-from-region*函数创建一个围绕它的Org模式表格。使用*Alt+下箭头*（在Emacs表示法中为*M-down*），我将每个PC或怪物移动到正确的行动顺序中。

#+BEGIN_EXAMPLE
| emily       |    |   |   |

| flesh-golem | 93 | 0 | 0 |

| zombie      | 22 | 0 | 0 |

| brad        |    |   |   |

| zombie      | 22 | 0 | 0 |
#+END_EXAMPLE

During combat, I only need to record damage for monsters, because the players manage their own HP. For the enemies I control in combat, the second column is its HP (its starting number is taken from the RPG system's rules), and the third is the damage dealt during the current round.
翻译:在战斗中，我只需要记录怪物的伤害值，因为玩家负责管理他们的生命值。对于我控制的敌人，第二列是它们的血量（其起始数值取自角色扮演游戏系统的规则），第三列是本回合造成的伤害。

Table formulas in Org mode are defined on a special *TBLFM* line at the end of the table. If you've used any computerized spreadsheet for anything, [[https://orgmode.org/manual/Tables.html][Org table]] will be fairly intuitive. For combat tracking, I want the third column to be subtracted from the second. Columns are indexed from left to right (*$1* for the first, *$2* for the second, and *$3* for the third), so to replace the contents of column $2 with the sum of columns $2 and $3, I add this line to the bottom of the table:
翻译:表格公式在Org模式中是在表的末尾使用特殊的*TBLFM*行定义的。如果您曾经使用过任何计算机化电子表格，那么[[https://orgmode.org/manual/Tables.html][Org表格]]将会相当直观。对于战斗追踪，我希望第三列减去第二列。列是从左到右索引的（*$1*为第一列，*$2*为第二列，*$3*为第三列），因此要将列$2的内容替换为列$2和列$3的和，我会在表格底部添加这一行：

#+BEGIN_EXAMPLE
#+TBLFM: $2=vsum($2 - $3)
#+END_EXAMPLE

I don't actually type that into Emacs every time the game enters combat mode. Instead, I've defined an auto-completion trigger with Emacs' [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Abbrevs.html#Abbrevs][abbrev mode]], a system that allows you to type in a special string of your choosing, which Emacs expands into something more complex. I define my abbreviations in a file called *~/.emacs.d/abbrev_defs*, using *rpgi* followed by a *Space* as the trigger for Emacs to change the line to my initiative table formula:
翻译:实际上，我并不是每次游戏进入战斗模式时就输入那段文字到Emacs中。相反，我已经在Emacs的[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Abbrevs.html#Abbrevs][缩写模式]]中定义了一个自动完成触发器，这个系统能够让你输入一个特殊字符串，Emacs会将其扩展为更复杂的内容。我在一个叫做*~/.emacs.d/abbrev_defs*的文件中定义了我的缩写，使用*rpgi*后跟一个*空格*作为触发器，让Emacs将行转换为我的主动性表格公式：

#+BEGIN_EXAMPLE
(define-abbrev-table 'global-abbrev-table

  '(

    ("rpgi" "#+TBLFM: $2=vsum($2 - $3)" nil 0)

   ))
#+END_EXAMPLE

Each time a player deals damage to a monster, I enter the amount of damage in the damage column. To trigger a table recalculation, I press *Ctrl+u Ctrl+c* (i.e., *C-u C-c* in Emacs) or *Ctrl+c Ctrl+c* (i.e., *C-c C-c*) if I happen to be on the formula line: 
翻译:每次玩家对一个怪物造成伤害时，我在伤害栏中输入造成的伤害值。为了触发表格重新计算，我按下“Ctrl+u Ctrl+c”（在Emacs中即为 “*C-u C-c*”）或者如果碰巧在公式行上则为“Ctrl+c Ctrl+c”（即* C-c C-c*）。

#+BEGIN_EXAMPLE
| brad        |    |    |

| emily       |    |    |

| zombie      | 12 | 10 |

| zombie      | 15 |  7 |

| flesh-golem | 91 |  2 |

#+TBLFM: $2=vsum($2 - $3)
#+END_EXAMPLE

This system isn't perfect. Character names can't contain any spaces because Org table splits cells by white space. It's relatively easy to forget that you processed one line and accidentally reprocess it at the end of a round. To add HP back to a creature's total, you have to use a negative number. (I think of it as negative damage, which suggests health.) Then again, many computerized initiative trackers suffer the same problems, so it's not a particularly bad solution. For me, it's one of the faster methods I've found (I'm happy to admit that [[https://opensource.com/article/19/6/how-use-maptools][MapTool]] is the best, but I use my Emacs workflow when I'm not using a digital shared map).
翻译:这个系统并不完美。角色名称不能包含空格，因为Org表格通过空白来分割单元格。相对容易忘记你已经处理了一行，并在一轮结束时意外重新处理它。要向生物的总HP中添加HP，你必须使用一个负数。（我认为这是负伤害，这表明健康。）然而，许多计算机化的行动追踪器都存在相同的问题，所以这不是一个特别糟糕的解决方案。对我来说，这是我找到的最快的方法之一（我很乐意承认[[https://opensource.com/article/19/6/how-use-maptools][MapTool]]是最好的，但我不是在使用数字共享地图时使用我的Emacs工作流程）。

** View PDFs in DocView
:PROPERTIES:
:CUSTOM_ID: view-pdfs-in-docview
:END:

Sometimes a PDF is unavoidable. Whether it's a d100 list of tavern names or a dungeon map, some resources exist only as a PDF with no extractable text data. In these cases, Emacs' [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Document-View.html][DocView]] package can help. DocView is a mode that loads PDF data and generates a PNG file for you to view (Emacs can also view JPEG files). I've found that large PDFs are problematic and slow, but if it's a low-resolution PDF with just one or two pages, DocView is an easy way to reference a document without leaving Emacs.
翻译:有时候PDF是不可避免的。无论是酒馆名字的d100列表还是地牢地图，一些资源仅以没有可提取文本数据的PDF形式存在。在这些情况下，Emacs的[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Document-View.html][文档视图]]包可以提供帮助。文档视图是一种加载PDF数据并为您生成PNG文件的模式（Emacs还可以查看JPEG文件）。我发现大型的PDF文件存在问题并且运行缓慢，但如果是一张或两张低分辨率的PDF页面，文档视图是在不离开Emacs的情况下引用文档的一个简单方法。

I use this mode exclusively for maps, tables, and lists. It's not useful for anything that might involve searching, because text data isn't accessible, but it's an amazingly useful feature for documents you only need to glance at.
翻译:我专门用这个模式来处理地图、表格和列表。它不适合任何可能涉及搜索的内容，因为文本数据不可访问，但对于只需浏览的文档来说，这是一个非常棒的功能。

The [[https://www.ghostscript.com/][Ghostscript]] suite that ships with most Linux distributions (or certainly is available in your repository) allows you to process PDFs, drastically simplifying them by lowering the resolution of images from print quality to screen quality. The command contains mostly PostScript commands and attributes, but you don't need to become a PostScript expert to perform a quick down-res:
翻译:大多数Linux发行版（或至少在你的仓库中可用）附带的[[https://www.ghostscript.com/][Ghostscript]]套件允许您处理PDF文件，通过将图像分辨率从打印质量降低到屏幕质量来大幅简化它们。该命令主要包含PostScript命令和属性，但您不需要成为PostScript专家即可快速执行降分辨率操作：

#+BEGIN_EXAMPLE
$ gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4
-dPDFSETTINGS=/ebook -dNOPAUSE -dBATCH
-sOutputFile=adventure.pdf
-dDownsampleColorImages=true
-dColorImageResolution=72 big-adventure-module.pdf
#+END_EXAMPLE

Opening PDFs in Emacs isn't as exciting as it may sound. It's not by any means a first-class PDF viewer, but for select resources, it can be a convenient way to keep all your information on one screen.
翻译:在Emacs中打开PDF文件并不像听起来那么令人兴奋。它绝对不是一个一流的PDF查看器，但对于特定的资源来说，它可以成为一个方便的方式，让你把所有信息放在一个屏幕上。

** Create adventure rap sheets
:PROPERTIES:
:CUSTOM_ID: create-adventure-rap-sheets
:END:

Published adventures are often heavy on prose. The theory is that you've paid a lot of money for a prepared adventure, so you obviously want value for your purchase. I do value the lore and world-building that authors put into their adventures, but during a game, I like to have a quick reference to the information I need for the game mechanics to work as intended. In other words, I don't need to have the story of why a trap was placed in a dungeon when a rogue triggers it; I only need to know that the trap exists and what the rogue needs to roll in order to survive.
翻译:出版的冒险故事通常文笔较重。理论是，你已经为准备好的冒险支付了相当多的钱，所以显然希望物有所值。我也珍视作者在冒险中所投入的传说和世界观构建，但在游戏中，我喜欢快速查阅我需要的游戏机制信息以便按预期进行游戏。换句话说，我不需要知道当盗贼触发地牢中的陷阱背后的故事；我只需要知道这个陷阱存在，以及盗贼需要掷出多少才能幸存。

I haven't found any modern adventure format that provides me with just that information, so I end up creating my own "rap sheets": a minimal outline for the adventure, with just the game mechanics information I need for each location. Once again, Org mode is the best way for me to keep this information handy.
翻译:我还没有找到任何现代冒险格式能为我提供这样的信息，所以我最终会创建自己的“犯罪记录”：一个关于每个地点的游戏机制信息的最简大纲。再次证明，Org模式是我随手获取这些信息的最佳方式。

In Org mode, you create lists using asterisks for bullet points. For a sub-item, add an asterisk. Even better, press *C-c t* (that's *Ctrl+c* and then the *t* key) to mark the item as a *TODO* item. When your players clear an area in the game, press *C-c t* again to mark the location *DONE*.
翻译:在Org模式中，您使用星号来创建项目符号列表。对于子项，添加一个星号。更好的是，按*Ctrl+c*然后*t*键（*C-c t*）将项目标记为*TODO*项目。当您的玩家清理游戏中的区域时，再次按下*Ctrl+c t*以标记位置为*完成*。

#+BEGIN_EXAMPLE
* DONE 1 Entrance

** Zombie

AC 9 | HP 22

* TODO 2 Necromancer's chambers

** Flesh golem

AC 16 | HP 93

** Treasure

- Gold ring (200 gp)

- Rusty nail (1 cp)

  Cursed (roll on curse table)

** Secret door (DC 20)

- to area 11
#+END_EXAMPLE

Each asterisk is collapsible, so you can get a summary of a global area by collapsing your list down to just the top-level:
翻译:每个星号都可以折叠，因此您可以通过将列表折叠仅剩下顶级条目来获取全局区域的摘要：

#+BEGIN_EXAMPLE
* DONE 1 Entrance

* TODO 2 Necromancer's chambers

* TODO 3 Wyrmling nursery

* TODO 4 Caretaker's chambers

* TODO 5 Caretaker's laboratory
#+END_EXAMPLE

An added bonus: I find that making my own rap sheets helps me internalize both the mechanics and the lore of the adventure I'm preparing, so the benefits to this method are numerous. Since I manage any adventure I run in Emacs with Git, once I do the prep work for an adventure, I have fresh copies of all my assets in case I run the adventure with another group or with a set of fresh characters.
翻译:额外的好处是：我发现制作自己的犯罪记录有助于我深入了解准备中的冒险的机制和传说，所以这种方法的好处是多方面的。由于我用Git管理在Emacs中运行的任何冒险，一旦我为一个冒险完成准备工作，我就会有所有资产的新副本，以防我与另一组人或一组新角色一起运行这个冒险。

** Make your own adventure journal
:PROPERTIES:
:CUSTOM_ID: make-your-own-adventure-journal
:END:

Generally, I let my players keep their own notes about the adventure because I want to encourage players to interpret the events happening in the adventure for themselves. However, a game master needs private notes to keep all of the improvised data in order. For example, if a published adventure doesn't feature a blacksmith shop, but players decide to visit a blacksmith, then a blacksmith needs to be invented in the moment. If the players revisit the blacksmith six weeks later, then they expect it to be the same blacksmith, and it's up to the game master to keep track of such additions to the published setting. I manage my personal notes about adventures in two different ways, depending on what's available to me.
翻译:通常，我会让玩家自己记录关于冒险的经历，因为我希望鼓励玩家自行解读冒险中发生的事件。然而，游戏主持人需要私有的笔记来整理所有的临时数据。例如，如果一个公开发表的冒险中没有铁匠铺，但如果玩家决定去拜访一个铁匠，那么就需要现场创造一个铁匠。如果六周后玩家再次访问铁匠铺，他们期望见到同一个铁匠，这就需要游戏主持人跟踪这些对出版设定的添加。我根据可用资源的不同方式管理个人关于冒险的笔记：

If I have the text of the adventure in an editable format (such as HTML or Markdown), I enter my additions into the adventure as if the publisher had included them from the start. This means there's always one source of truth for the setting and for significant events.
翻译:如果我有冒险故事的文本（如HTML或Markdown）可编辑格式，我就把我的补充内容加到冒险故事中，就好像出版商从一开始就包含了它们一样。这意味着对于设定和重大事件来说，始终只有一个真相来源。

If I haven't been able to get an editable copy of the adventure because it's a hard copy or a PDF that's not easily modified, then I write my additions into my rap sheets in Org mode. This functionally means that there's still one source of truth because my rap sheets are the first place I look for information, falling back on the published text only for details I've forgotten. Sometimes I like my additions enough to merge them back into my Git master for the adventure, but usually, I trust in improvisation and let additions happen dynamically for each group that plays the adventure.
翻译:如果因为我没有能够获取冒险的可编辑副本（因为它是纸质版或者不易修改的PDF），那么我就把我的补充写在我的角色表单中。这实际上意味着仍然有一个事实来源，因为我的角色表单是我查找信息的第一个地方，只有在忘记细节的情况下才会回过头去看已发布的文本。有时候我喜欢我的补充足够多以至于把它们合并回我的Git主分支中以供冒险使用，但通常情况下，我信任即兴创作，让每次玩这个冒险的小组动态地产生新的补充。

** Why Emacs is my favorite RPG dashboard
:PROPERTIES:
:CUSTOM_ID: why-emacs-is-my-favorite-rpg-dashboard
:END:

I've fallen into using Emacs for RPGs because it serves as the heads-up display of my dreams. The "right" answer is probably a good [[https://opensource.com/article/19/12/ratpoison-linux-desktop][tiling window manager]], but until I implement that, I'm happy with Emacs. Everything's bound to keyboard shortcuts designed for specificity and speed, and there's just enough easy customization that I can hack together good-enough solutions---sometimes even while players are arguing with one another about what to do next.
翻译:我陷入使用Emacs玩RPG游戏的原因是因为它充当了我梦想中的抬头显示器。"正确"的回答可能是一个好的[[https://opensource.com/article/19/12/ratpoison-linux-desktop][平铺窗口管理器]]，但在实现这一点之前，我对Emacs感到满意。一切都绑定到了为特定性和速度设计的键盘快捷方式上，而且有足够的简单自定义，我可以拼凑出足够好的解决方案——有时甚至在玩家们争论下一步该做什么的时候也能做到。

I've tried juggling multiple desktops, several PDF reader windows, and a spreadsheet for initiatives; while it's a fine experience, nothing has equaled the fluidity of Emacs as my RPG dashboard.
翻译:我尝试过同时处理多个桌面、几个PDF阅读器窗口和一个电子表格来管理项目；虽然这种体验还不错，但没有什么能比Emacs作为我的RPG控制台那样流畅。

Hey! do you love Emacs? [[https://opensource.com/how-submit-article][Write an article]] about how you use an Emacs (GNU or otherwise) for inclusion in our forthcoming Emacs series!
翻译:嘿！你喜欢Emacs吗？为我们的即将推出的Emacs系列投稿一篇关于你是如何使用Emacs（GNU或其他版本）的文章吧！[[https://opensource.com/how-submit-article][提交文章]]
