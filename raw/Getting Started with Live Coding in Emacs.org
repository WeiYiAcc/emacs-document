#+TITLE: Getting Started with Live Coding in Emacs
#+URL: https://donkirkby.github.io/live-py-plugin/starting_emacs
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2020年 02月 19日 星期三 09:38:25 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
Live Coding in Python lets you run your Python code as you type it. For
翻译:实时Python编程允许你在输入代码的同时运行它。对于
example, this code prints a greeting to my friend, Alice.
翻译:例如，这段代码会向我的朋友爱丽丝打印一个问候语。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
name = 'Alice'                         |name = 'Alice'
print('Hello, ' + name + '!')          |print('Hello, Alice!')
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
-UU-:----F1  hello.py       All L3     |-UUU:**--F1  *live-py-trace_hello.py_227
#+END_EXAMPLE

When I change the name to Bob, the display on the right immediately changes. I don't even have to save the file.
翻译:当我把名字改为Bob时，右边的显示立即就变了。我甚至不需要保存文件。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
name = 'Bob'                           |name = 'Bob'
print('Hello, ' + name + '!')          |print('Hello, Bob!')
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
-UU-:**--F1  hello.py       All L1     |-UUU:**--F1  *live-py-trace_hello.py_227
#+END_EXAMPLE

In this tutorial, I'll demonstrate two things: a live coding display that can be used to show you what's happening inside your code, and live unit tests. To try it yourself, follow the Emacs [[https://donkirkby.github.io/live-py-plugin/#installing-the-emacs-mode][installation instructions]], then type some code, as in the example above. Finally, launch the Live Python mode with =M-x live-py-mode=. You should see the display on the right. You can also watch [[https://www.youtube.com/watch?v=Vdr2l3yNFH4][my demo video]].
翻译:null

* Live Coding Display
:PROPERTIES:
:CUSTOM_ID: live-coding-display
:END:

I'll start with a trivial chunk of code where I assign a variable, and then
翻译:我将从一个非常简单的代码片段开始，其中我给一个变量赋值，然后
modify it.
翻译:您可以使用我作为翻译助手来帮助您翻译非中文文本为中文。只需将您想要翻译的内容发给我，我会尽量忠实地将其翻译成中文，并保留原文的格式。请告诉我您需要翻译的具体内容。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
s = 'Hello'
s += ', World!'



















-UU-:----F1  hello.py       All L3     (Python) --------------------------------
#+END_EXAMPLE

That's easy to step through in your head and see that =s= is now ='Hello, World!'= Remember, though, that I want to let your brain focus on writing code instead of stepping through it.
翻译:这很容易在脑海中一步步进行，并看到=s=现在变为='你好，世界'！记住，不过，我想让您的头脑专注于编写代码，而不是逐步进行。

I turn on live coding mode with =M-x live-py-mode=, and it opens the live coding display like the one on the right (below). The display shows me what's in the variable after each change.
翻译:我使用命令“=M-x live-py-mode=”打开实时编程模式，它就像右图（下方）所示的那样打开实时编码显示。这个显示器在每次更改后都显示变量的内容。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
s = 'Hello'                            |s = 'Hello'
s += ', World!'                        |s = 'Hello, World!'
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
-UU-:----F1  hello.py       All L3     |-UUU:**--F1  *live-py-trace_hello.py_227
Live-Py mode enabled in current buffer
#+END_EXAMPLE

Let's do something more interesting and write a library function that does binary search for a value in a sorted array. The live coding will show us what's happening in our code so we don't have to hold it all in our heads.
翻译:让我们做一些更有趣的事情，编写一个库函数在排序数组中查找值。现场编码将展示代码中的发生情况，这样我们就不必全部记在心里了。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
def search(n, a):                      |
return -1                          |
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
-UU-:**--F1  hello.py       All L3     |-UUU:**--F1  *live-py-trace_hello.py_227
#+END_EXAMPLE

It's a bad search function that never finds anything, but let's see how it works when we call it.
翻译:这是一个糟糕的搜索功能，它从未找到过任何东西，但让我们看看当我们调用它时它是如何工作的。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
def search(n, a):                      |n = 2 | a = [1, 2, 4]
return -1                          |return -1
|
|
i = search(2, [1, 2, 4])               |i = -1
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
-UU-:**--F1  hello.py       All L4     |-UUU:**--F1  *live-py-trace_hello.py_227
#+END_EXAMPLE

You can see the input parameters at the start of the function, and the return value at the end.
翻译:在函数开头可以看到输入参数，而在函数末尾可以看到返回值。

We'll start looking for the value in the array, and the first place to look is the middle item.
翻译:我们将开始在数组中查找值，首先查看的位置是中间项。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
def search(n, a):                      |n = 2 | a = [1, 2, 4]
low = 0                            |low = 0
high = len(a) - 1                  |high = 2
mid = low + high // 2              |mid = 1
if n == a[mid]:                    |
return mid                     |return 1
return -1                          |
|
i = search(2, [1, 2, 4])               |i = 1
|
|
|
|
|
|
|
|
|
|
|
|
-UU-:**--F1  hello.py       All L10    |-UUU:**--F1  *live-py-trace_hello.py_227
#+END_EXAMPLE

That was lucky! It was in the first place we looked, and you can see the calculations as it goes. You see an abstract formula in the code, like =high = len(a) - 1=, and you see the concrete result in the live coding display, like =high = 2=. However, a search function usually won't find the item we're searching for on the first try. Let's ask for an item earlier in the list and use a while loop to find it.
翻译:那真是有幸！我们首先看的就是这个地方，你可以看到计算的过程。你看代码中的一个抽象公式，比如`=high = len(a) - 1=`，你在实时编码显示中看到了具体的结果，比如`=high = 2=`。然而，搜索功能通常不会在一次尝试就找到我们要找的项目。让我们请求列表中的较早的一项，并使用一个while循环来查找它。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
def search(n, a):                      |n = 1 | a = [1, 2, 4]
low = 0                            |low = 0
high = len(a) - 1                  |high = 2
while True:                        |         |
mid = low + high // 2          |mid = 1  | mid = 0
v = a[mid]                     |v = 2    | v = 1
if n == v:                     |         |
return mid                 |         | return 0
if n < v:                      |         |
high = mid - 1             |high = 0 |
return -1                          |
|
i = search(1, [1, 2, 4])               |i = 0
|
|
|
|
|
|
|
|
-UU-:**--F1  hello.py       All L1     |-UUU:**--F1  *live-py-trace_hello.py_227
#+END_EXAMPLE

The loop runs twice, and each run adds a column to the display showing the calculations. That's a good example of how this tool differs from a debugger. With a debugger, you're always looking at a single moment in time. Here, you can see the whole history of the search laid out on the screen, and you move back and forth through time just by moving your eye. It's a lot like the difference that makes static visualizations of sorting algorithms easier to follow than animated sorting algorithms.
翻译:循环运行两次，每次在显示中添加一个列来显示计算结果。这是这个工具与调试器不同的一个好例子。在使用调试器时，您总是查看某个时间点的数据。在这里，您可以查看屏幕上搜索的全过程历史记录，只需移动您的视线就可以前后移动时间。这就像静态可视化排序算法比动画排序算法更容易理解之间的区别一样。

Now let's look for an item later in the list.
翻译:现在让我们在列表稍后位置找一个项目。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
def search(n, a):                      |n = 4 | a = [1, 2, 4]
low = 0                            |low = 0
high = len(a) - 1                  |high = 2
while True:                        |        |
mid = low + high // 2          |mid = 1 | mid = 3
v = a[mid]                     |v = 2   | IndexError: list index out of$
if n == v:                     |        |
return mid                 |        |
if n < v:                      |        |
high = mid - 1             |        |
else:                          |        |
low = mid + 1              |low = 2 |
return -1                          |
|
i = search(4, [1, 2, 4])               |IndexError: list index out of range
|
|
|
|
|
|
-UU-:**--F1  hello.py       All L1     |-UUU:**--F1  *live-py-trace_hello.py_227
#+END_EXAMPLE

Oops, I get an IndexError. Without the live coding display, I would just get a traceback that shows where the error happened, but not how it happened. Now, I can walk back from the error to see where things went wrong. =mid= is the index value, and it's calculated at the top of the loop. The two values that go into it are both 2, so they should average to 2. Oh, I need parentheses to calculate the average.
翻译:哎呀，我遇到了一个IndexError。没有实时代码显示的话，我就只能看到一个回溯信息，告诉我错误发生的位置，却无法知道为什么会出错。现在，我可以从错误出发，一步步回溯看看哪里出了问题。"=mid="是这个索引值，它在循环的最上方进行计算。进入它的两个值都是2，所以它们应该平均为2。哦，我需要加上括号来进行平均值计算。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
def search(n, a):                      |n = 4 | a = [1, 2, 4]
low = 0                            |low = 0
high = len(a) - 1                  |high = 2
while True:                        |        |
mid = (low + high) // 2        |mid = 1 | mid = 2
v = a[mid]                     |v = 2   | v = 4
if n == v:                     |        |
return mid                 |        | return 2
if n < v:                      |        |
high = mid - 1             |        |
else:                          |        |
low = mid + 1              |low = 2 |
return -1                          |
|
i = search(4, [1, 2, 4])               |i = 2
|
|
|
|
|
|
-UU-:**--F1  hello.py       All L1     |-UUU:**--F1  *live-py-trace_hello.py_227
#+END_EXAMPLE

What happens if we try to find a value that's not in the list?
翻译:如果我们尝试查找列表中没有的值会发生什么？

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
def search(n, a):                      |n = 3 | a = [1, 2, 4]
low = 0                            |low = 0
high = len(a) - 1                  |high = 2
while True:                        |        |          |         |         $
mid = (low + high) // 2        |mid = 1 | mid = 2  | mid = 1 | mid = 1 $
v = a[mid]                     |v = 2   | v = 4    | v = 2   | v = 2   $
if n == v:                     |        |          |         |         $
return mid                 |        |          |         |         $
if n < v:                      |        |          |         |         $
high = mid - 1             |        | high = 1 |         |         $
else:                          |        |          |         |         $
low = mid + 1              |low = 2 |          | low = 2 | low = 2 $
return -1                          |
|
i = search(3, [1, 2, 4])               |RuntimeError: live coding message limit$
|
|
|
|
|
|
-UU-:**--F1  hello.py       All L1     |-UUU:**--F1  *live-py-trace_hello.py_227
#+END_EXAMPLE

I guess that while True wasn't such a good idea, we're stuck in an infinite loop. If you want to see some of the later loop runs, you can scroll over to the right.
翻译:我猜虽然`while True`不是一个好主意，但我们现在陷入了一个无限循环。如果您想查看后续循环运行的情况，您可以向右滚动屏幕。

From the third run on, the values in the loop don't change, so we probably want to exit from the second or third run. If you look at the end of the second run, you can see that high is lower than low. That means that we've searched all the way from both ends to meet in the middle, and it's time to give up.
翻译:从第三次运行开始，循环中的值不再变化，所以我们应该希望在第二次或第三次运行后退出。如果您查看第二次运行的末尾，可以看到high（高）小于low（低）。这意味着我们从两端搜索到了中间点并相遇，现在是时候放弃了。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
def search(n, a):                      |n = 3 | a = [1, 2, 4]
low = 0                            |low = 0
high = len(a) - 1                  |high = 2
while low <= high:                 |        |
mid = (low + high) // 2        |mid = 1 | mid = 2
v = a[mid]                     |v = 2   | v = 4
if n == v:                     |        |
return mid                 |        |
if n < v:                      |        |
high = mid - 1             |        | high = 1
else:                          |        |
low = mid + 1              |low = 2 |
return -1                          |return -1
|
i = search(3, [1, 2, 4])               |i = -1
|
|
|
|
|
|
-UU-:**--F1  hello.py       All L1     |-UUU:**--F1  *live-py-trace_hello.py_227
#+END_EXAMPLE

At this point, I think I'm done. I can add a few entries and search for them to make sure everything is working. Also, if this were a real library module, I wouldn't want to execute a call at the end of the file, so I only do it when I'm in live coding mode.
翻译:到现在为止，我认为我已经完成了。我可以添加几个条目并搜索它们，以确保一切正常工作。此外，如果这是一个真正的库模块，我不希望在文件的末尾执行调用，所以我只在实时编码模式下才这样做。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
def search(n, a):                      |n = 3 | a = [1, 2, 4]
low = 0                            |low = 0
high = len(a) - 1                  |high = 2
while low <= high:                 |        |
mid = (low + high) // 2        |mid = 1 | mid = 2
v = a[mid]                     |v = 2   | v = 4
if n == v:                     |        |
return mid                 |        |
if n < v:                      |        |
high = mid - 1             |        | high = 1
else:                          |	|
low = mid + 1              |low = 2 |
return -1                          |return -1
|
if __name__ == '__live_coding__':      |
i = search(3, [1, 2, 4])           |i = -1
|
|
|
|
|
-UU-:**--F1  hello.py       All L16    |-UUU:**--F1  *live-py-trace_hello.py_227
#+END_EXAMPLE

** COMMENT Live Unit Tests
:PROPERTIES:
:CUSTOM_ID: live-unit-tests
:END:

In that example, I kept changing the parameters to search for different items in the list. Wouldn't each set of search parameters make a nice unit test? I think unit tests help you [[https://donkirkby.github.io/testing/][write better code]], so you can use the live coding display as you add each unit test and make it pass.
翻译:在示例中，我不断更改参数以在列表中搜索不同的项目。每一组搜索参数不构成一个好的单元测试吗？我认为单元测试有助于[[https://donkirkby.github.io/testing/][编写更好的代码]]，因此您可以在添加每个单元测试并通过它时使用实时编码显示。

In this section, I'll write a function that counts the number of unique words in a list. However, words with the same letters are counted as the same word. For example, the words “apple”, “lemon”, and “melon” would only count as two words, because “lemon” and “melon” have the same letters in different order.
翻译:在这个部分中，我将编写一个函数来计算列表中唯一单词的数量。但是，具有相同字母的单词被视为同一个单词。例如，“apple”、“lemon”和“melon”只会被计为两个单词，因为“lemon”和“melon”虽然在不同的顺序上拥有相同的字母。

To start, I turn off Live Coding mode with =M-x live-py-mode=, then open a new file =test_anagrams.py= and write a simple unit test that doesn't have any duplicate words.
翻译:首先，我使用命令=M-x live-py-mode=关闭实时编码模式，然后打开一个新文件=test_anagrams.py=，并编写一个简单的单元测试，确保没有重复的单词。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
from unittest import TestCase
from anagrams import count_anagrams

class AnagramsTest(TestCase):
def test_words(self):
words = ['apple', 'melon']

n = count_anagrams(words)

self.assertEqual(2, n)











-UU-:**--F1  test_anagrams.py   All L11    (Python) ----------------------------
#+END_EXAMPLE

I can run that test either by switching to another terminal window, or with the =M-x compile= command in Emacs. Either way, use the command
翻译:我可以通过切换到另一个终端窗口或使用Emacs中的=M-x compile=命令来运行那个测试。不管哪种方式，都要使用命令

#+BEGIN_EXAMPLE
python -m unittest test_anagrams
#+END_EXAMPLE

Of course, that fails when I run it as a unit test, because I haven't written =anagrams.py= and the =count_anagrams()= method. I start by creating =anagrams.py= with a stupid version that always returns zero.
翻译:当然，当我作为一个单元测试运行它时，这失败了，因为我还没有编写 =anagrams.py= 和 =count_anagrams()= 方法。我首先创建一个愚蠢版本的 =anagrams.py= ，总是返回零。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help



def count_anagrams(words):
return 0
















-UUU:----F1  anagrams.py    All L4     (Python) --------------------------------
#+END_EXAMPLE

The test now fails with a reasonable complaint.
翻译:测试现在以合理的抱怨失败了。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Compile Help



def count_anagrams(words):
return 0





-UUU:----F1  anagrams.py    All L4     (Python) --------------------------------
======================================================================
FAIL: test_words (test_anagrams.AnagramsTest)
----------------------------------------------------------------------
Traceback (most recent call last):
File "/home/don/workspace/scratch/test_anagrams.py", line 10, in test_words
self.assertEqual(2, n)
AssertionError: 2 != 0

----------------------------------------------------------------------
Ran 1 test in 0.000s
-UUU:%*--F1  *compilation*   22% L10    (Compilation:exit [1]) -----------------
#+END_EXAMPLE

I want to see what's happening as I make the unit test pass, so I close the compile buffer with =C-x 1=, and launch Live Coding mode with =M-x live-py-mode=. Nothing happens at first, because nothing is calling my =count_anagrams()= function. I need to set the driver script to be my unit test, with =C-c M-d= and then enter this driver script:
翻译:我想在单元测试通过的过程中看到发生的情况，所以我使用=C-x 1=关闭编译缓冲区，并启动Live Coding模式=M-x live-py-mode=。一开始什么都没有发生，因为没有东西调用我的=count_anagrams()=函数。我需要设置驱动脚本是我的单元测试，使用=C-c M-d=然后输入这个驱动脚本：

#+BEGIN_EXAMPLE
-m unittest test_anagrams
#+END_EXAMPLE

Now, I see the call that the unit test makes:
翻译:现在，我看到了单元测试所做的调用：

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
|---------------- |
|SystemExit: True |
|---------------- |
def count_anagrams(words):             |words = ['apple', 'melon']
return 0                           |return 0
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
-UU-:----F1  anagrams.py    All L5     |-UUU:**--F1  *live-py-trace_anagrams.py_
#+END_EXAMPLE

I can see the input parameters and the return value, as well as the fact that the test failed. Next, I make that test pass with the simplest code that could possibly work.
翻译:我能看到输入参数和返回值，以及测试失败的事实。接下来，我用尽可能简单的代码让那个测试通过。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
|
|
|
def count_anagrams(words):             |words = ['apple', 'melon']
return len(words)                  |return 2
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
-UU-:**--F1  anagrams.py    All L5     |-UUU:**--F1  *live-py-trace_anagrams.py_
#+END_EXAMPLE

Once the test passes, I can add another test method with another scenario. This one includes two copies of ‘melon', so the number of unique words is still two.
翻译:一旦测试通过，我就可以添加另一个测试方法，使用另一种场景。这一个包括两个“瓜”的副本，所以独特的单词数量仍然是两个。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
from unittest import TestCase
from anagrams import count_anagrams

File Edit Options Buffers Tools Python Help
from unittest import TestCase
from anagrams import count_anagrams

class AnagramsTest(TestCase):
def test_words(self):
words = ['apple', 'melon']

n = count_anagrams(words)

self.assertEqual(2, n)

def test_duplicate_words(self):
words = ['apple', 'melon', 'melon']

n = count_anagrams(words)

self.assertEqual(2, n)




-UU-:----F1  test_anagrams.py   All L18    (Python) ----------------------------
#+END_EXAMPLE

I could make the test pass now, but it's a little confusing when both tests are being displayed.
翻译:我现在可以让测试通过了，但是当两个测试同时显示时有点令人困惑。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
|---------------- |
|SystemExit: True |
|---------------- |
def count_anagrams(words):             |words = ['apple', 'melon', 'melon'] | w$
return len(words)                  |return 3                            | r$
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
-UU-:**--F1  anagrams.py    All L5     |-UUU:**--F1  *live-py-trace_anagrams.py_
#+END_EXAMPLE

Instead, I'll convince Emacs to only run the new test method. That becomes even more useful as we add more and more test methods. I open the test file, and rename the new test method to plain =test()=. Then switch back to the =anagrams.py= file, and use =C-c M-d= to change the driver script to this:
翻译:相反，我将说服Emacs只运行新的测试方法。随着我们添加越来越多的测试方法，这变得更加有用。我打开测试文件，然后将新的测试方法重命名为普通的=test()=。然后切换回=anagrams.py=文件，并使用=C-c M-d=将驱动脚本报错更改为：

#+BEGIN_EXAMPLE
-m unittest test_anagrams.AnagramsTest.test
#+END_EXAMPLE

The up arrow will cycle through previous driver scripts, so I don't have to type the whole thing again. From now on, I'll add each test method as plain =test()= so the driver will run it, then give it a full name when it's passing. Now you can see the failing test on its own.
翻译:上箭头会循环切换到之前的驱动脚本，所以我不用再次输入完整的内容。从现在开始，我将把每个测试方法添加为plain=test()=，这样驱动程序就会运行它，然后在通过时给它一个完整的名称。现在您可以单独看到失败的测试了。

To remove duplicates, just put all the words into a set before counting.
翻译:要去除重复项，只需在计数前将所有单词放入集合中即可。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Help
|$
|$
|$
def count_anagrams(words):             |$'melon']
anagrams = set()                   |$
for word in words:                 |$ = 'melon'                | word = 'me$
anagrams.add(word)             |$rams = {'melon', 'apple'} |
return len(anagrams)               |$
|
|
|
|
|
|
|
|
|
|
|
|
|
-UU-:**--F1  anagrams.py    All L7     |-UUU:**--F1  *live-py-trace_anagrams.py_
#+END_EXAMPLE

When you get to the second copy of ‘melon', the set doesn't change. To see the later iterations of the loop, you might have to use =C-x o= to switch to the other window, then scroll right.
翻译:当你到达第二个“melon”副本时，集合没有改变。要查看循环的后续迭代，你可能需要使用=C-x o=切换到另一个窗口，然后向右滚动。

Now we get to the interesting part: detecting anagrams.
翻译:我们现在来探讨有趣的环节：检测字母排列组合（Anagrams）。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
n = count_anagrams(words)

self.assertEqual(2, n)

def test(self):
words = ['apple', 'melon', 'lemon']

n = count_anagrams(words)

self.assertEqual(2, n)











-UU-:----F1  test_anagrams.py   Bot L20    (Python) ----------------------------
#+END_EXAMPLE

One way is to sort the letters in each word.
翻译:一种方法是按单词中的字母排序。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Help
|$
|$
|$
def count_anagrams(words):             |$lon', 'lemon']
anagrams = set()                   |$
for word in words:                 |$| word = 'melon'                | word$
word = ''.join(                |$| word = 'elmno'                | word$
sorted(word))              |$|                               |
anagrams.add(word)             |$| anagrams = {'aelpp', 'elmno'} |
return len(anagrams)               |$                                      $
|
|
|
|
|
|
|
|
|
|
|
-UU-:**--F1  anagrams.py    All L10    |-UUU:**--F1  *live-py-trace_anagrams.py_
#+END_EXAMPLE

You can see that the second and third iteration of the loop convert ‘melon' and ‘lemon' to ‘elmno', and the set of =anagrams= doesn't change in the third iteration.
翻译:你可以看到循环的第二和第三次迭代将“melon”和“lemon”转换为“elmno”，并且在第三次的迭代中，一组同音词并没有改变。

The next feature I want to add is to treat upper case and lower case the same, so I add a new test case.
翻译:下一个特性我想添加的是对大小写字母一视同仁，所以我添加了一个新的测试用例。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
n = count_anagrams(words)

self.assertEqual(2, n)

def test_anagrams(self):
words = ['apple', 'melon', 'lemon']

n = count_anagrams(words)

self.assertEqual(2, n)

def test(self):
words = ['Melon', 'Lemon']

n = count_anagrams(words)

self.assertEqual(1, n)




-UU-:----F1  test_anagrams.py   Bot L26    (Python) ----------------------------
#+END_EXAMPLE

Back in =anagrams.py=, I see the test fail.
翻译:在'anagrams.py'中，我看到了测试失败。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
|$--- |
|$rue |
|$--- |
def count_anagrams(words):             |$on', 'Lemon']
anagrams = set()                   |$t()
for word in words:                 |$'       | word = 'Lemon'
word = ''.join(                |$'       | word = 'Lemno'
sorted(word))              |$        |
anagrams.add(word)             |$Melno'} | anagrams = {'Melno', 'Lemno'$
return len(anagrams)               |$
|
|
|
|
|
|
|
|
|
|
|
-UU-:**--F1  anagrams.py    All L10    |-UUU:**--F1  *live-py-trace_anagrams.py_
#+END_EXAMPLE

You can see that ‘Melon' and ‘Lemon' get sorted into ‘Melno' and ‘Lemno', because upper-case letters sort before lower-case letters. We can fix that by switching all the words to lower case.
翻译:你可以看到“Melon”和“Lemon”被分类到“Melno”和“Lemno”，因为大写字母在排序前于小写字母。我们可以通过将所有单词转换为小写来解决这一问题。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
|$--- |
|$rue |
|$--- |
def count_anagrams(words):             |$on', 'Lemon']
anagrams = set()                   |$t()
for word in words:                 |$'       | word = 'Lemon'
word = ''.join(                |$'       | word = 'Lemno'
sorted(word))              |$        |
word = word.lower()            |$'       | word = 'lemno'
anagrams.add(word)             |$melno'} | anagrams = {'lemno', 'melno'$
return len(anagrams)               |$
|
|
|
|
|
|
|
|
|
|
-UU-:**--F1  anagrams.py    All L11    |-UUU:**--F1  *live-py-trace_anagrams.py_
#+END_EXAMPLE

Oops, ‘Melon' and ‘Lemon' now get sorted into ‘melno' and ‘lemno'. We fixed the case, but not the sort order. Switching to lower case before sorting the letters will fix it.
翻译:哦，现在“Melon”和“Lemon”被分类到了“melno”和“lemno”。我们修正了大小写问题，但排序顺序没有变。在字母排序前先将它们转换为小写可以解决这个问题。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
|$
|$
|$
def count_anagrams(words):             |$on', 'Lemon']
anagrams = set()                   |$t()
for word in words:                 |$'       | word = 'Lemon'
word = word.lower()            |$'       | word = 'lemon'
word = ''.join(                |$'       | word = 'elmno'
sorted(word))              |$        |
anagrams.add(word)             |$elmno'} |
return len(anagrams)               |$
|
|
|
|
|
|
|
|
|
|
-UU-:**--F1  anagrams.py    All L11    |-UUU:**--F1  *live-py-trace_anagrams.py_
#+END_EXAMPLE

Finally, I want to handle foreign words correctly. For example, the German word for street can be written either as ‘Straße' or ‘Strasse'. Python knows how to convert from one to the other, so I'll add another test case.
翻译:最后，我想正确处理外语单词。例如，德语中的“街道”一词可以写作“Straße”或“Strasse”。Python知道如何从一种形式转换为另一种形式，所以我将添加另一个测试用例。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help

self.assertEqual(2, n)

def test_upper(self):
words = ['Melon', 'Lemon']

n = count_anagrams(words)

self.assertEqual(1, n)

def test(self):
words = ['Straße', 'Strasse']

n = count_anagrams(words)

self.assertEqual(1, n)





-UUU:----F1  test_anagrams.py   Bot L33    (Python) ----------------------------
#+END_EXAMPLE

When I run the new test case, the words are counted separately.
翻译:当我运行新测试用例时，单词是分开计算的。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
|---------------- |
|SystemExit: True |
|---------------- |
def count_anagrams(words):             |words = ['Straße', 'Strasse']
anagrams = set()                   |anagrams = set()
for word in words:                 |word = 'Straße'       | word = 'Strasse$
word = word.lower()            |word = 'straße'       | word = 'strasse$
word = ''.join(                |word = 'aerstß'       | word = 'aerssst$
sorted(word))              |                      |
anagrams.add(word)             |anagrams = {'aerstß'} | anagrams = {'ae$
return len(anagrams)               |return 2
|
|
|
|
|
|
|
|
|
|
-UU-:**--F1  anagrams.py    All L7     |-UUU:**--F1  *live-py-trace_anagrams.py_
#+END_EXAMPLE

To fix it, I just switch =lower()= to =casefold()=.
翻译:要修复它，我只需将 =lower()= 更改为 =casefold()=。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
|
|
|
def count_anagrams(words):             |words = ['Straße', 'Strasse']
anagrams = set()                   |anagrams = set()
for word in words:                 |word = 'Straße'        | word = 'Strass$
word = word.casefold()         |word = 'strasse'       | word = 'strass$
word = ''.join(                |word = 'aerssst'       | word = 'aersss$
sorted(word))              |                       |
anagrams.add(word)             |anagrams = {'aerssst'} |
return len(anagrams)	       |return 1
|
|
|
|
|
|
|
|
|
|
-UU-:**--F1  anagrams.py    All L7     |-UUU:**--F1  *live-py-trace_anagrams.py_
#+END_EXAMPLE

You can see that =casefold()= converts ‘ß' to ‘ss', while still converting ‘S' to ‘s', and the test passes.
翻译:你可以看到，“.”等于“小写”()将‘ß’转换为‘ss’，同时仍然将‘S’转换为‘s’，测试通过。

Now that I've made each test pass, I run the full test suite again to make sure I didn't break any of the other tests. The easiest way to run it is with =M-x compile=.
翻译:现在已经通过了每个测试用例，我会再次运行完整的测试套件，以确保我没有破坏其他任何测试。运行它的最简单方法是用=M-x compile=。

#+BEGIN_EXAMPLE
File Edit Options Buffers Tools Python Help
|-*- mode: compilation; default-director$
|Compilation started at Sat Nov  2 22:48$
|
def count_anagrams(words):             |python -m unittest test_anagrams
anagrams = set()                   |.....
for word in words:                 |---------------------------------------$
word = word.casefold()         |Ran 5 tests in 0.000s
word = ''.join(                |
sorted(word))              |OK
anagrams.add(word)             |
return len(anagrams)               |Compilation finished at Sat Nov  2 22:4$
|
|
|
|
|
|
|
|
|
|
-UU-:----F1  anagrams.py    All L7     |-UUU:%*--F1  *compilation*   All L1
Compilation finished
#+END_EXAMPLE

It looks good, so I can publish my new library.
翻译:看起来不错，所以我可以发布我的新库了。

Remember, you can find installation instructions and descriptions of all the other plugins and tools by visiting [[https://donkirkby.github.io/live-py-plugin/][donkirkby.github.com]]. Help me test it, and report your bugs. I'd also love to hear about any other projects working on the same kind of tools.
翻译:记住，你可以通过访问[[https://donkirkby.github.io/live-py-plugin/][donkirkby.github.com]]来找到安装说明以及所有其他插件和工具的描述。帮助我测试它，并报告你的错误。我还想了解任何正在开发类似工具的其他项目。
