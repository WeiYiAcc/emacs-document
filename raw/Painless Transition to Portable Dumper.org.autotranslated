#+TITLE: Painless Transition to Portable Dumper
#+URL: https://archive.casouri.cat/note/2020/painless-transition-to-portable-dumper/index.html
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2020年 02月 19日 星期三 10:00:41 HKT]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t n:nil ::t |:t ^:nil -:nil f:t *:t <:nil
Emacs 27 is coming with many exciting new features including the portable dumper. There has been attempts to use portable dumper to speed up Emacs startup time. I know Spacemacs [[https://github.com/syl20bnr/spacemacs/blob/develop/core/core-dumper.el][does this]] from a long time ago ^{[[#fn.1][1]]}. But I couldn't find any literature on using portable dumper for one's own init.el. Here I record my take on adopting portable dumper, including gotcha's I found, the general design I use, and some fixes, hacks and tricks I used.
翻译:Emacs 27即将推出许多令人兴奋的新功能，包括便携式转储器。有人尝试使用便携式转储器来加快Emacs启动时间。我很早就知道Spacemacs [[https://github.com/syl20bnr/spacemacs/blob/develop/core/core-dumper.el][这样做]] ^{[[#fn.1][1]]}。但我找不到任何关于为自己init.el使用便携式转储器的文献。在这里，我记录了我采用便携式转储器的看法，包括我发现的问题、我使用的总体设计以及一些修复、黑客和技巧。

With portable dumper, my startup time reduced from 2.47s to 0.76s (3x). (Everybody measures their startup differently. As a common measure, esup gives 0.38s) This is on Mac, it should be even faster on Linux. Even better, all it takes are ~30 lines of code, and the startup without a dump file works like before.
翻译:使用便携式转储程序后，我的启动时间从2.47秒减少到0.76秒（快了3倍）。（每个人测量启动时间的标准都不一样。作为一个常见的衡量标准，esup给出了0.38秒。）这是在Mac上的表现，应该在Linux上更快。更棒的是，只需大约30行代码即可实现，而且没有转储文件时的启动效果与之前一样。

<2020-01-27 Mon>\
翻译:2020年1月27日，星期一
*Note:* Eli says bug-free dumping of custom emacs is not a goal for Emacs 27^{[[#fn.2][2]]}. However, dumping only packages, selectively, works fine for me.
翻译:智谱清言说，让Emacs 27无错误地导出自定义版本并不是一个目标 [[参考2][2]] 。然而，对我而言，选择性导出仅包的功能还是很好的。

** 1 General Design
:PROPERTIES:
:CUSTOM_ID: org3ea95e0
:END:

Start a vanilla Emacs, load packages, dump the image out. Then you start Emacs with this dump file. The point is to speed up packages that you can't autoload --- those you want immediately after startup. For example, company, ivy/helm, which-key, use-package, themes, highlight-parentheses. Other parts of init doesn't change.
翻译:启动一个普通的Emacs，加载包，导出图像。然后你用这个转储文件启动Emacs。目的是加速那些你不能自动加载（autoload）的包——那些你在启动后立即想要的包。例如，company、ivy/helm、which-key、use-package、主题和highlight-parentheses。init的其他部分不会改变。

I create a init file for the dump process, =~/.emacs.d/dump.el=, and dump with
翻译:我创建了一个用于转储过程的初始化文件，名为 `~/.emacs.d/dump.el`，并使用它进行转储。

#+BEGIN_EXAMPLE
emacs --batch -q -l ~/.emacs.d/dump.el
#+END_EXAMPLE

Once dumped, I can start Emacs with the dump file ^{[[#fn.3][3]]} (use root path, not =~=!):
翻译:一旦解压，我就可以使用dump文件启动Emacs（使用根路径，而不是~=~=）：

#+BEGIN_EXAMPLE
emacs --dump-file="/Users/yuan/.emacs.d/emacs.pdmp"
#+END_EXAMPLE

A minimal =dump.el=:
翻译:一个最小的转储el文件

#+BEGIN_EXAMPLE
(require 'package)
;; load autoload files and populate load-path’s
(package-initialize)
;; (package-initialize) doens’t require each package, we need to load
;; those we want manually
(dolist (package '(use-package company ivy counsel org helpful
general helpful use-package general which-key
recentf-ext swiper ivy-prescient find-char
aggressive-indent windman doom-themes winner
elec-pair doom-one-light-theme
doom-cyberpunk-theme rainbow-delimiters
highlight-parentheses hl-todo buffer-move
savehist eyebrowse minions ws-butler
expand-region isolate outshine flyspell magit
eglot))
(require package))
;; dump image
(dump-emacs-portable "~/.emacs.d/emacs.pdmp")
#+END_EXAMPLE

Now let's extend this minimal configuration with fixes and enhancements.
翻译:现在让我们通过修复和增强来扩展这个最小配置。

** 2 Gotcha's
:PROPERTIES:
:CUSTOM_ID: orgfc79eff
:END:

So it seems trivial: I =(package-initialize)= and =(require)= every packages in =dump.el=, and everything works, except that it doesn't. For one, =load-path= is not stored in the dump image ^{[[#fn.4][4]]}. You need to store =load-path= in another variable.
翻译:所以这似乎很简单：执行 =(package-initialize)= 并在 =dump.el= 中加载每一个包，一切都会正常工作，除了它并不总是这样。首先，=load-path= 并没有被存储在dump映像中 ^{[[#fn.4][4]]}。你需要将 =load-path= 存储在其他变量中。

#+BEGIN_EXAMPLE
;; in dump.el
(package-initialize)
(setq luna-dumped-load-path load-path)
...
(dump-emacs-portable "~/.emacs.d/emacs.pdmp")

;; in init.el
(setq load-path luna-dumped-load-path)
#+END_EXAMPLE

Second, when you start Emacs with a dump file, some default modes are not enabled:
翻译:当你用一个转储文件启动Emacs时，一些默认模式并未被启用：

- =transient-mark-mode=
翻译:好的
- =global-font-lock-mode=
翻译:全局字体锁定模式

And =global-undo-tree-mode= makes Emacs segfault during dumping (didn't verify, Spacemacs says so, but why would you enable it when dumping anyway?) Spacemacs also says =winner-mode= and =global-undo-tree= mode doesn't live through dumping, but I enable them in my =init.el=, not in dump, so that doesn't affect me.
翻译:“全局撤销树模式”使得Emacs在转储时出现段错误（尚未验证，Spacemacs说如此，但为什么要在转储时启用它呢？）Spacemacs还说“赢家模式”和“全局撤销树”模式不能通过转储，但我把它们放在了我的“初始化文件”中，而不是在转储中，所以这不会影响我。

The fix is simple, have something like this in =init.el=:
翻译:修复很简单，在`=init.el=`中加入类似如下内容：

#+BEGIN_EXAMPLE
(global-font-lock-mode)
(transient-mark-mode)
#+END_EXAMPLE

Third, you can't use =~= in the =--dump-file= command line flag. Otherwise Emacs complains about cannot open dump file. So don't use =~/.emacs.d/emacs.pdmp=. The dump file loads in very early stage, many variables are not known yet, so =~= won't expand.
翻译:第三，你不能在`=--dump-file=`命令行标志中使用`~==`。否则Emacs会抱怨无法打开转储文件。所以不要使用`~=/.emacs.d/emacs.pdmp=`。转储文件在非常早期的阶段加载，许多变量还未知，所以`~==`不会展开。

Fourth, scratch buffer behaves differently when Emacs starts with a dump file.
翻译:第四点，当Emacs以转储文件启动时，刮擦缓冲区的行为有所不同。
Re-run mode hook seems to fix it:
翻译:重新运行模式钩子似乎解决了问题：

#+BEGIN_EXAMPLE
(add-hook 'after-init-hook
(lambda ()
(save-excursion
(switch-to-buffer "*scratch*")
(lisp-interaction-mode))))
#+END_EXAMPLE

<2020-01-27 Mon>\
翻译:2020年1月27日，星期一
As a side note (kindly provided by Damien Cassou), (a relatively new version of) magit uses dynamic modules, which is not dumpable. So don't require magit in your dump. The portable dumper doesn't dump window configurations either, but since I'm dumping only the packages, it doesn't annoy me.
翻译:顺便说一下（由Damien Cassou善意提供），(magit的一个相对较新版本)使用动态模块，这不可转储。所以不要在你的转储中要求magit。可移植的转储程序也不会转储窗口配置，但由于我只转储了包，所以它没有打扰到我。

Now the =dump.el= is:
翻译:现在`dump.el`文件的内容是：

#+BEGIN_EXAMPLE
(require 'package)
;; load autoload files and populate load-path’s
(package-initialize)
;; store load-path
(setq luna-dumped-load-path load-path)
;; (package-initialize) doens’t require each package, we need to load
;; those we want manually
(dolist (package '(use-package company ivy counsel org helpful
general helpful use-package general which-key
recentf-ext swiper ivy-prescient find-char
aggressive-indent windman doom-themes winner
elec-pair doom-one-light-theme
doom-cyberpunk-theme rainbow-delimiters
highlight-parentheses hl-todo buffer-move
savehist eyebrowse minions ws-butler
expand-region isolate outshine flyspell magit
eglot))
(require package))
;; dump image
(dump-emacs-portable "xxx")
#+END_EXAMPLE

=init.el=:
翻译:初始化.el文件

#+BEGIN_EXAMPLE
(global-font-lock-mode)
(transient-mark-mode)
(add-hook 'after-init-hook
(lambda ()
(save-excursion
(switch-to-buffer "*scratch*")
(lisp-interaction-mode))))
#+END_EXAMPLE

** 3 Tricks
:PROPERTIES:
:CUSTOM_ID: orgdc871f5
:END:

*** 3.1 Keep non-dump-file startup working as before
:PROPERTIES:
:CUSTOM_ID: orgd0a6044
:END:

I want my configuration to still work without a dump file. This is what I do:
翻译:我想让我的配置在没有转储文件的情况下仍然可以工作。这是我做的：

#+BEGIN_EXAMPLE
;; in init.el
(defvar luna-dumped nil
"non-nil when a dump file is loaded (because dump.el sets this variable).")

(defmacro luna-if-dump (then &rest else)
"Evaluate IF if running with a dump file, else evaluate ELSE."
(declare (indent 1))
`(if luna-dumped
,then
,@else))

;; in dump.el
(setq luna-dumped t)
#+END_EXAMPLE

And I use the =luna-if-dump= in =init.el= at where two startup process differs:
翻译:我在`~/.emacs.d/init.el`中使用了`=luna-if-dump=`，在两个启动过程中有所不同：

#+BEGIN_EXAMPLE
(luna-if-dump
(progn
(setq load-path luna-dumped-load-path)
(global-font-lock-mode)
(transient-mark-mode)
(add-hook 'after-init-hook
(lambda ()
(save-excursion
(switch-to-buffer "*scratch*")
(lisp-interaction-mode)))))
;; add load-path’s and load autoload files
(package-initialize))
#+END_EXAMPLE

In a dump-file-startup, we don't need to =(package-initialize)= because it's done during dumping, but we need to load =load-path= and fix other gotcha's.
翻译:在dump文件启动过程中，我们不需要执行=(package-initialize)=，因为在转储过程中已经完成了这项工作，但是我们需要加载=load-path=并修复其他一些小问题。

*** 3.2 Dump packages selectively
:PROPERTIES:
:CUSTOM_ID: org24c3dcc
:END:

Blindly dumping every package is a recipe for weird errors. I only dump those I want immediately on startup (company, ivy/helm) and those are big (org). Not that dumping everything doesn't work, but it takes more energy to get everything right.
翻译:盲目地导入每一个包会导致奇怪的错误。我只在启动时立即导入了那些我想要的（公司、ivy/helm）并且它们很大（组织）。并不是说导入所有东西不管用，但要让一切都正确无误需要更多的精力。

*** 3.3 Dumping themes greatly speeds things up
:PROPERTIES:
:CUSTOM_ID: orgc16bdd3
:END:

When profiling my startup with [[https://github.com/jschaf/esup][esup]], I found Emacs spends 70% of the time loading the theme.
翻译:在使用[[https://github.com/jschaf/esup][esup]]分析我的创业项目时，我发现Emacs花了70%的时间来加载主题。

#+BEGIN_EXAMPLE
Total User Startup Time: 1.063sec Total Number of GC Pauses: 21 Total GC Time: 0.646sec

doom-one-light-theme.el:5 0.755sec 71%
(def-doom-theme doom-one-light
"A light theme inspired by Atom One"
...
#+END_EXAMPLE

Dumping themes is not as simple as adding =(load-theme theme)= to =dump.el=, if you do that, Emacs complains and doesn't load the theme. I guess that's because it's in batch mode. Instead, require your themes like other libraries and loads them /without enabling them/.
翻译:导出主题并不像在 =dump.el= 中添加 =(load-theme theme)= 那么简单，如果你这样做，Emacs 会报错并不会加载主题。我想这是因为它处于批处理模式。相反，你应该像要求其他库一样引入你的主题，并在不启用它们的情况下加载它们。

#+BEGIN_EXAMPLE
;; in dump.el
(require 'doom-themes)
(require 'doom-one-light-theme)
;; the two flags are no-confirm and no-enable
(load-theme 'doom-one-light-theme t t)
#+END_EXAMPLE

In =init.el=, we enable the theme, instead of loading it. Unlike require, =load-theme= doesn't check if the theme is already loaded.
翻译:在`init.el`中，我们启用主题，而不是加载它。与`require`不同，`load-theme`不会检查主题是否已经加载。

#+BEGIN_EXAMPLE
;; in init.el
(when window-system
(luna-if-dump
(enable-theme 'doom-one-light)
(load-theme 'doom-one-light)))
#+END_EXAMPLE

And the speed up is significant.
翻译:加速效果非常显著。

#+BEGIN_EXAMPLE
...
init.el:87 0.034sec 7%
(when window-system
(luna-if-dump
(enable-theme 'doom-one-light)
(luna-load-theme nil t)))
...
#+END_EXAMPLE

*** 3.4 Complete example =dump.el= & =init.el=
:PROPERTIES:
:CUSTOM_ID: orga887c55
:END:

With everything I just talked about:\
翻译:鉴于我刚才所说的所有内容：
=dump.el=:
翻译:您似乎没有提供要翻译的非中文文本。请上传或输入您希望我帮助翻译的内容。

#+BEGIN_EXAMPLE
(require 'package)
;; load autoload files and populate load-path’s
(package-initialize)
;; store load-path
(setq luna-dumped-load-path load-path
luna-dumped t)
;; (package-initialize) doens’t require each package, we need to load
;; those we want manually
(dolist (package '(use-package company ivy counsel org helpful
general helpful use-package general which-key
recentf-ext swiper ivy-prescient find-char
aggressive-indent windman doom-themes winner
elec-pair doom-one-light-theme
doom-cyberpunk-theme rainbow-delimiters
highlight-parentheses hl-todo buffer-move
savehist eyebrowse minions ws-butler
expand-region isolate outshine flyspell magit
eglot))
(require package))
;; pre-load themes
(load-theme 'doom-one-light-theme t t)
(load-theme 'doom-cyberpunk-theme t t)
;; dump image
(dump-emacs-portable "~/.emacs.d/emacs.pdmp")
#+END_EXAMPLE

=init.el=:
翻译:初始化.el文件

#+BEGIN_EXAMPLE
(luna-if-dump
(progn
(setq load-path luna-dumped-load-path)
(global-font-lock-mode)
(transient-mark-mode)
(add-hook 'after-init-hook
(lambda ()
(save-excursion
(switch-to-buffer "*scratch*")
(lisp-interaction-mode)))))
;; add load-path’s and load autoload files
(package-initialize))
;; load theme
(when window-system
(luna-if-dump
(enable-theme 'doom-one-light)
(luna-load-theme)))
#+END_EXAMPLE

After everything works, I wrapped dump file's path with variables and added =defvar= for variables I introduced, and did other irrelevant stuff.
翻译:在一切就绪后，我将dump文件的路径用变量包裹起来，并为引入的变量添加了=defvar=，还做了其他无关的事情。

** 4 Final notes
:PROPERTIES:
:CUSTOM_ID: org3a0e5a6
:END:

You can be more aggressive and dump /all/ packages and init files. But 1) since current approach is fast enough, the marginal benefit you get hardly justifies the effort; 2) if you dump your init files, you need to re-dump every time you change your configuration. Oh, and there are a bunch of Lisp objects that cannot be dumped, e.g., window configuration. Just think about the work needed to handle those in your init files. If you really care that much about speed, [[https://github.com/hlissner/doom-emacs][Dark Side]] is always awaiting.
翻译:你可以更加激进地丢弃所有的包和初始化文件。但是，1）鉴于当前的方法已经足够快，你从这种做法中获得的好处几乎无法证明所付出的努力是值得的；2）如果你丢弃了你的初始化文件，每次更改配置时都需要重新丢弃。哦，还有一堆Lisp对象不能被丢弃，比如窗口配置。想想在初始化文件中处理这些需要多少工作量吧。如果你真的非常关心速度的话，[[https://github.com/hlissner/doom-emacs][黑暗面]]一直在等着你。

** 5 Some fixes and hacks
:PROPERTIES:
:CUSTOM_ID: org586ab01
:END:

Here I record some problems I encountered that's not related to dumping.
翻译:我在这里记录一些与倾倒无关的问题。

*** 5.1 recentf-ext
:PROPERTIES:
:CUSTOM_ID: orgff3e5f8
:END:

When dumping recentf-ext, I found some problems and changed two places in =recentf-ext.el=. It has a =(recentf-mode 1)= as a top level form. That means =recentf-mode= enables whenever =recentf-ext.el= loads. Not good. I removed it. It also has a line requiring for =cl=, although it didn't use it, I removed that as well. My fork is at [[https://github.com/casouri/lunarymacs/blob/master/site-lisp/recentf-ext.el][here]].
翻译:在导出最近文件列表（recentf-ext）时，我发现了一些问题，并在=recentf-ext.el=中修改了两个地方。它有一个=(recentf-mode 1)=作为顶层形式。这意味着每次加载=recentf-ext.el=时都会启用=recentf-mode=。这不太好。我移除了它。此外，还有一个要求使用=cl=的行，尽管它没有实际使用，我也将其删除了。我的分支位于[[https://github.com/casouri/lunarymacs/blob/master/site-lisp/recentf-ext.el][这里]]。

*** 5.2 Use esup with dump file
:PROPERTIES:
:CUSTOM_ID: orgbbe61fe
:END:

[[https://github.com/jschaf/esup][esup]] is a great way to see what package is taking most time in startup. It helps me to find what package to dump. However, esup doesn't support loading dump files, and we need to modify it a bit. We also want to know if we are in esup child process, so we don't start an emacs server (and do other things differently, depends on your configuration). Go to =esup= in =esup.el= (by =find-library=), and change the =process-args=:
翻译:[[https://github.com/jschaf/esup][esup]] 是查看启动时占用时间最长的包的好方法。它帮助我找到要丢弃的包。然而，esup 不支持加载转储文件，我们需要对其进行一些修改。我们还想知道我们是否处于 esup 子进程中，这样我们就不会启动emacs服务器（根据您的配置执行其他不同的操作）。前往 =esup.el= 中的 =esup= （通过 =find-library=），然后更改 =process-args=:

#+BEGIN_EXAMPLE
("*esup-child*"
"*esup-child*"
,esup-emacs-path
,@args
"-q"
"-L" ,esup-load-path
"-l" "esup-child"
;; +++++++++++++++++++++++++++++++++++++++++
"--dump-file=/Users/yuan/.emacs.d/emacs.pdmp"
"--eval (setq luna-in-esup t)"
;; +++++++++++++++++++++++++++++++++++++++++
,(format "--eval=(esup-child-run "%s" "%s" %d)"
init-file
esup-server-port
esup-depth))
#+END_EXAMPLE

** 6 Other speedup tricks
:PROPERTIES:
:CUSTOM_ID: org8f72c56
:END:

*** 6.1 early-init.el
:PROPERTIES:
:CUSTOM_ID: org6fd8df6
:END:

This [[https://www.reddit.com/r/emacs/comments/enmbv4/earlyinitel_reduce_init_time_about_02_sec_and/][post about early-init.el speedup]] is useful. Here is [[https://github.com/casouri/lunarymacs/blob/master/early-init.el][my early-init.el]].
翻译:这篇关于早期初始化（early-init.el）加速的文章很有用。[我的早期初始化（early-init.el）](https://github.com/casouri/lunarymacs/blob/master/early-init.el)。

*** 6.2 Start with correct frame size
:PROPERTIES:
:CUSTOM_ID: orgfe69e64
:END:

Normally Emacs starts with a small frame, and if you have =(toggle-frame-maximized)=, it later expands to the full size. You can eliminate this annoying flicker and make Emacs show up with full frame size. I learned it from [[https://emacs-china.org/t/emacs/11271/11?u=casouri][this emacs-china post]]. Basically you use =-g= (for geometry) and =--font= flags together to size the startup frame. I use
翻译:通常Emacs以一个小窗口启动，如果你有 =(toggle-frame-maximized)=，它会稍后扩展到全尺寸。你可以消除这种令人讨厌的闪烁，让Emacs以全窗口大小显示。我从[[https://emacs-china.org/t/emacs/11271/11?u=casouri][这篇emacs-china帖子]]中学到了这个方法。基本上，你使用 =-g=（用于几何形状）和 =--font= 标志一起来设置启动窗口的大小。我使用的

#+BEGIN_EXAMPLE
~/bin/emacs -g 151x50 -font "SF Mono-13"
#+END_EXAMPLE

At the point (<2020-01-18 Sat>) you can't use =--dump-file= with =-g= and =-font= because of a bug, but it should be fixed soon. See [[https://debbugs.gnu.org/cgi/bugreport.cgi?bug=39168][here]].
翻译:在您提问的时间点（<2020年1月18日星期六>），由于一个错误，您不能同时使用`=--dump-file=`与`=-g=`和`=-font=`选项，但这个问题应该很快就会得到修复。请参阅[[https://debbugs.gnu.org/cgi/bugreport.cgi?bug=39168][这里]]。

*** 6.3 Eliminate theme flicker
:PROPERTIES:
:CUSTOM_ID: orga2025a8
:END:

Manateelazycat [[https://github.com/manateelazycat/lazycat-emacs/blob/39a74af15d3343219997a3c7894e9bb87cfc4e6c/site-lisp/config/init.el#L17][sets default background to theme background in custom.el]]. This way Emacs starts with your theme's background color, instead of white.
翻译:海牛懒惰猫[[https://github.com/manateelazycat/lazycat-emacs/blob/39a74af15d3343219997a3c7894e9bb87cfc4e6c/site-lisp/config/init.el#L17][在custom.el中设置默认背景为主题背景]]。这样Emacs启动时就使用您主题的背景颜色，而不是白色。

** Footnotes:
:PROPERTIES:
:CUSTOM_ID: footnotes
:CLASS: footnotes
:END:

^{[[#fnr.1][1]]}
翻译:您可以使用我来进行图片翻译的功能，您可以上传一张包含非中文文本的图片，我将尽力为您提供相应的中文翻译。请注意，翻译结果可能不会非常准确，因为某些复杂的语境和文化元素可能难以完全捕捉到。

And people have been using the old dumping facility for a even longer time, you can found more on EmacsWiki.
翻译:人们甚至更长时间地使用旧的倾倒设施，你可以在EmacsWiki上找到更多相关信息。

^{[[#fnr.2][2]]}
翻译:您可以使用我提供的[链接](https://example.com)来获取更多信息。请注意，这个链接是示例性的，您应该替换为实际的链接地址。

Quote from [[https://www.reddit.com/r/emacs/comments/eqhvt7/use_portable_dumper_in_your_init/fewiwr7?utm_source=share&utm_medium=web2x][reddit]]:
翻译:来自Reddit用户[[https://www.reddit.com/user/fewiwr7][fewiwr7]]在emacs子版块[[https://www.reddit.com/r/emacs/][emacs]]发布的帖子“use_portable_dumper_in_your_init”中的引用：

#+BEGIN_QUOTE
翻译:你是一个好用的翻译助手，请将我的非中文文字翻译成中文!注意翻译时保持源文本格式不变，另外你只需要输出翻译内容，不要做其他操作！

#+END_QUOTE
Caveat emptor: Re-dumping is still not 100% bug-free in the current Emacs codebase (both the emacs-27 release branch and master). There are known issues, and quite probably some unknown ones. Making re-dumping bug-free is not a goal for Emacs 27.1, so this feature should be at this point considered as experimental "use at your own risk" one.
翻译:免责声明：在当前的Emacs代码库中（emacs-27发布分支和master），重新转储仍然不是百分之百没有错误的。已知存在一些问题，很可能还有一些未知的问题。使重新转储完全没有错误并不是Emacs 27.1的目标，因此这个功能在此阶段应被视为实验性的“自行承担风险”的功能。
#+END_QUOTE
翻译:您可以使用我提供的[在线翻译服务](https://translate.google.cn/)来翻译非中文文字为中文。只需将您的文字复制粘贴到翻译工具中，选择目标语言为中文，即可获得翻译结果。请注意，确保遵守相关法律法规和版权要求。

^{[[#fnr.3][3]]}
翻译:您可以使用我来进行图片翻译，您可以上传一张包含非中文文本的图片，我将为您提供相应的中文翻译。

Apart from =--dump-file=, =--dump= also works, even though =emacs --help= didn't mention it. Spacemacs uses =--dump=.
翻译:除了 =--dump-file=，=--dump= 也有效，尽管 =emacs --help= 中没有提到它。Spacemacs 使用 =--dump=。

^{[[#fnr.4][4]]}
翻译:您可以使用我来进行图片翻译，您可以上传一张包含非中文文本的图片，我将为您提供相应的中文翻译。

You can found more about it in Emacs 27's Manual. I was foolish enough to read the online manual (Emacs 26 at the time) and not aware of the =load-path= thing until I read Spacemacs's implementation.
翻译:您可以在Emacs 27的手册中找到更多关于它的信息。我当时愚蠢地阅读了在线手册（当时是Emacs 26），直到我读到Spacemacs的实现，才了解到=load-path=这个东西。

Written by Yuan Fu <[[mailto:casouri@gmail.com][casouri@gmail.com]]>
翻译:由袁福撰写<[[mailto:casouri@gmail.com][casouri@gmail.com]]>

First Published on 2020-01-17 Fri 23:34
翻译:首次发布于2020年1月17日星期五晚上11:34

Last modified on 2020-02-03 Mon 23:02
翻译:最后修改于2020年2月3日星期一晚上11点02分
